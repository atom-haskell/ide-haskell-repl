//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"atom-generate.d-.js","sourceRoot":"","sources":["../../typings/atom-generate.d-.ts"],"names":[],"mappings":"","sourcesContent":["declare module AtomTypes {\n    /**\n     * Atom global for dealing with packages, themes, menus, and the window.\n     *\n     * An instance of this class is always available as the `atom` global.\n     *\n     * file: src/atom-environment.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/atom-environment.coffee#L60\n     */\n    class AtomEnvironment {\n        /**\n         * A {CommandRegistry} instance\n         */\n        commands: CommandRegistry;\n        /**\n         * A {Config} instance\n         */\n        config: Config;\n        /**\n         * A {Clipboard} instance\n         */\n        clipboard: Clipboard;\n        /**\n         * A {ContextMenuManager} instance\n         */\n        contextMenu: ContextMenuManager;\n        /**\n         * A {MenuManager} instance\n         */\n        menu: MenuManager;\n        /**\n         * A {KeymapManager} instance\n         */\n        keymaps: KeymapManager;\n        /**\n         * A {TooltipManager} instance\n         */\n        tooltips: TooltipManager;\n        /**\n         * A {NotificationManager} instance\n         */\n        notifications: NotificationManager;\n        /**\n         * A {Project} instance\n         */\n        project: Project;\n        /**\n         * A {GrammarRegistry} instance\n         */\n        grammars: GrammarRegistry;\n        /**\n         * A {HistoryManager} instance\n         */\n        history: HistoryManager;\n        /**\n         * A {PackageManager} instance\n         */\n        packages: PackageManager;\n        /**\n         * A {ThemeManager} instance\n         */\n        themes: ThemeManager;\n        /**\n         * A {StyleManager} instance\n         */\n        styles: StyleManager;\n        /**\n         * A {DeserializerManager} instance\n         */\n        deserializers: DeserializerManager;\n        /**\n         * A {ViewRegistry} instance\n         */\n        views: ViewRegistry;\n        /**\n         * A {Workspace} instance\n         */\n        workspace: Workspace;\n        /**\n         * A {TextEditorRegistry} instance\n         */\n        textEditors: TextEditorRegistry;\n\n        /**\n         * Invoke the given callback whenever {::beep} is called.\n         * @param {Function} {Function} to be called whenever {::beep} is called.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidBeep(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when there is an unhandled error, but\n         * before the devtools pop open\n         * @param {Function} {Function} to be called whenever there is an unhandled error\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillThrowError(callback: Function): Disposable;\n        /**\n         * Invoke the given callback whenever there is an unhandled error.\n         * @param {Function} {Function} to be called whenever there is an unhandled error\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidThrowError(callback: Function): Disposable;\n        /**\n         * @returns {boolean} Returns a {Boolean} that is `true` if the current window is in development mode.\n         */\n        inDevMode(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} that is `true` if the current window is in safe mode.\n         */\n        inSafeMode(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} that is `true` if the current window is running specs.\n         */\n        inSpecMode(): boolean;\n        /**\n         * Get the version of the Atom application.\n         * @returns {string} Returns the version text {String}.\n         */\n        getVersion(): string;\n        /**\n         * @returns {boolean} Returns a {Boolean} that is `true` if the current version is an official release.\n         */\n        isReleasedVersion(): boolean;\n        /**\n         * Get the time taken to completely load the current window.\n         *\n         * This time include things like loading and activating packages, creating\n         * DOM elements for the editor, and reading the config.\n         * @returns {number} Returns the {Number} of milliseconds taken to load the window or null\n        if the window hasn't finished loading yet.\n         */\n        getWindowLoadTime(): number;\n        /**\n         * Get the load settings for the current window.\n         * @returns {Object} Returns an {Object} containing all the load setting key/value pairs.\n         */\n        getLoadSettings(): Object;\n        /**\n         * Open a new Atom window using the given options.\n         *\n         * Calling this method without an options parameter will open a prompt to pick\n         * a file/folder to open in the new window.\n         * @param {Object} An {Object} with the following keys:\n         */\n        open(params: Object): void;\n        /**\n         * Prompt the user to select one or more folders.\n         * @param {Function} A {Function} to call once the user has confirmed the selection.\n         */\n        pickFolder(callback: Function): void;\n        /**\n         * Close the current window.\n         */\n        close(): void;\n        /**\n         * Get the size of current window.\n         * @returns {Object} Returns an {Object} in the format `{width: 1000, height: 700}`\n         */\n        getSize(): Object;\n        /**\n         * Set the size of current window.\n         * @param {number} The {Number} of pixels.\n         * @param {number} The {Number} of pixels.\n         */\n        setSize(width: number, height: number): void;\n        /**\n         * Get the position of current window.\n         * @returns {Object} Returns an {Object} in the format `{x: 10, y: 20}`\n         */\n        getPosition(): Object;\n        /**\n         * Set the position of current window.\n         * @param {number} The {Number} of pixels.\n         * @param {number} The {Number} of pixels.\n         */\n        setPosition(x: number, y: number): void;\n        /**\n         * Get the current window\n         */\n        getCurrentWindow(): void;\n        /**\n         * Move current window to the center of the screen.\n         */\n        center(): void;\n        /**\n         * Focus the current window.\n         */\n        focus(): void;\n        /**\n         * Show the current window.\n         */\n        show(): void;\n        /**\n         * Hide the current window.\n         */\n        hide(): void;\n        /**\n         * Reload the current window.\n         */\n        reload(): void;\n        /**\n         * Relaunch the entire application.\n         */\n        restartApplication(): void;\n        /**\n         * @returns {boolean} Returns a {Boolean} that is `true` if the current window is maximized.\n         */\n        isMaximized(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} that is `true` if the current window is in full screen mode.\n         */\n        isFullScreen(): boolean;\n        /**\n         * Set the full screen state of the current window.\n         */\n        setFullScreen(): void;\n        /**\n         * Toggle the full screen state of the current window.\n         */\n        toggleFullScreen(): void;\n        /**\n         * Visually and audibly trigger a beep.\n         */\n        beep(): void;\n        /**\n         * A flexible way to open a dialog akin to an alert dialog.\n         * @param {Object} An {Object} with the following keys:\n         * @returns {number} Returns the chosen button index {Number} if the buttons option was an array.\n         */\n        confirm(options: Object): number;\n        /**\n         * Open the dev tools for the current window.\n         * @returns {Promise<any>} Returns a {Promise} that resolves when the DevTools have been opened.\n         */\n        openDevTools(): Promise<any>;\n        /**\n         * Toggle the visibility of the dev tools for the current window.\n         * @returns {Promise<any>} Returns a {Promise} that resolves when the DevTools have been opened or\n        closed.\n         */\n        toggleDevTools(): Promise<any>;\n        /**\n         * Execute code in dev tools.\n         */\n        executeJavaScriptInDevTools(): void;\n    }\n\n    /**\n     * Like {BufferedProcess}, but accepts a Node script as the command\n     * to run.\n     *\n     * This is necessary on Windows since it doesn't support shebang `#!` lines.\n     *\n     * file: src/buffered-node-process.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/buffered-node-process.js#L15\n     */\n    class BufferedNodeProcess extends BufferedProcess {\n        /**\n         * Runs the given Node script by spawning a new child process.\n         * @param {Object} An {Object} with the following keys:\n         * @param {string} The {String} path to the JavaScript script to execute.\n         * @param {any[]} The {Array} of arguments to pass to the script (optional).\n         * @param {Object} The options {Object} to pass to Node's `ChildProcess.spawn` method (optional).\n         * @param {Function} The callback {Function} that receives a single argument which contains the standard output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call (optional).\n         * @param {Function} The callback {Function} that receives a single argument which contains the standard error output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call (optional).\n         * @param {Function} The callback {Function} which receives a single argument containing the exit status (optional).\n         */\n        constructor(options: { command: string, args: any[], options: Object, stdout: Function, stderr: Function, exit: Function });\n    }\n\n    /**\n     * A wrapper which provides standard error/output line buffering for\n     * Node's ChildProcess.\n     *\n     * file: src/buffered-process.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/buffered-process.js#L22\n     */\n    class BufferedProcess {\n        /**\n         * Runs the given command by spawning a new child process.\n         * @param {Object} An {Object} with the following keys:\n         * @param {string} The {String} command to execute.\n         * @param {any[]} The {Array} of arguments to pass to the command (optional).\n         * @param {Object} {Object} (optional) The options {Object} to pass to Node's `ChildProcess.spawn` method.\n         * @param {Function} {Function} (optional) The callback that receives a single argument which contains the standard output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call.\n         * @param {string} {String}\n         * @param {Function} {Function} (optional) The callback that receives a single argument which contains the standard error output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call.\n         * @param {string} {String}\n         * @param {Function} {Function} (optional) The callback which receives a single argument containing the exit status.\n         * @param {number} {Number}\n         * @param {boolean} {Boolean} (optional) Whether the command will automatically start when this BufferedProcess is created. Defaults to true.  When set to false you must call the `start` method to start the process.\n         */\n        constructor(options: {command: string, args: any[], options: Object, stdout(data: string): any, stderr(data: string): any, exit(code: number): any, autoStart: boolean});\n        /**\n         * Will call your callback when an error will be raised by the process.\n         * Usually this is due to the command not being available or not on the PATH.\n         * You can call `handle()` on the object passed to your callback to indicate\n         * that you have handled this error.\n         * @param {Function} {Function} callback\n         * @param {Object} {Object}\n         * @param {Object} {Object} the error object\n         * @param {Function} {Function} call this to indicate you have handled the error. The error will not be thrown if this function is called.\n         * @returns {Disposable} Returns a {Disposable}\n         */\n        onWillThrowError(callback: Function, errorObject: Object, error: Object, handle: Function): Disposable;\n        /**\n         * Terminate the process.\n         */\n        kill(): void;\n    }\n\n    /**\n     * Represents the clipboard used for copying and pasting in Atom.\n     *\n     * An instance of this class is always available as the `atom.clipboard` global.\n     *\n     * file: src/clipboard.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/clipboard.js#L17\n     */\n    class Clipboard {\n        /**\n         * Write the given text to the clipboard.\n         *\n         * The metadata associated with the text is available by calling\n         * {::readWithMetadata}.\n         * @param {string} The {String} to store.\n         * @param  The additional info to associate with the text.\n         */\n        write(text: string, metadata?: any): void;\n        /**\n         * Read the text from the clipboard.\n         * @returns {string} Returns a {String}.\n         */\n        read(): string;\n        /**\n         * Read the text from the clipboard and return both the text and the\n         * associated metadata.\n         * @returns {Object} Returns an {Object} with the following keys:\n\n        * `text` The {String} clipboard text.\n        * `metadata` The metadata stored by an earlier call to {::write}.\n         */\n        readWithMetadata(): Object;\n    }\n\n    /**\n     * A simple color class returned from {Config::get} when the value\n     * at the key path is of type 'color'.\n     *\n     * file: src/color.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/color.js#L7\n     */\n    class Color {\n        /**\n         * Parse a {String} or {Object} into a {Color}.\n         * @param {string} A {String} such as `'white'`, `#ff00ff`, or `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`, and `alpha` properties.\n         * @returns {Color} Returns a {Color} or `null` if it cannot be parsed.\n         */\n        static parse(value: string): Color;\n\n        /**\n         * @returns {string} Returns a {String} in the form `'#abcdef'`.\n         */\n        toHexString(): string;\n        /**\n         * @returns {string} Returns a {String} in the form `'rgba(25, 50, 75, .9)'`.\n         */\n        toRGBAString(): string;\n    }\n\n    /**\n     * Associates listener functions with commands in a\n     * context-sensitive way using CSS selectors. You can access a global instance of\n     * this class via `atom.commands`, and commands registered there will be\n     * presented in the command palette.\n     *\n     * The global command registry facilitates a style of event handling known as\n     * *event delegation* that was popularized by jQuery. Atom commands are expressed\n     * as custom DOM events that can be invoked on the currently focused element via\n     * a key binding or manually via the command palette. Rather than binding\n     * listeners for command events directly to DOM nodes, you instead register\n     * command event listeners globally on `atom.commands` and constrain them to\n     * specific kinds of elements with CSS selectors.\n     *\n     * Command names must follow the `namespace:action` pattern, where `namespace`\n     * will typically be the name of your package, and `action` describes the\n     * behavior of your command. If either part consists of multiple words, these\n     * must be separated by hyphens. E.g. `awesome-package:turn-it-up-to-eleven`.\n     * All words should be lowercased.\n     *\n     * As the event bubbles upward through the DOM, all registered event listeners\n     * with matching selectors are invoked in order of specificity. In the event of a\n     * specificity tie, the most recently registered listener is invoked first. This\n     * mirrors the \"cascade\" semantics of CSS. Event listeners are invoked in the\n     * context of the current DOM node, meaning `this` always points at\n     * `event.currentTarget`. As is normally the case with DOM events,\n     * `stopPropagation` and `stopImmediatePropagation` can be used to terminate the\n     * bubbling process and prevent invocation of additional listeners.\n     *\n     * ## Example\n     *\n     * Here is a command that inserts the current date in an editor:\n     *\n     * ```coffee\n     * atom.commands.add 'atom-text-editor',\n     *   'user:insert-date': (event) ->\n     *     editor = @getModel()\n     *     editor.insertText(new Date().toLocaleString())\n     * ```\n     *\n     * file: src/command-registry.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/command-registry.coffee#L46\n     */\n    class CommandRegistry {\n        /**\n         * Add one or more command listeners associated with a selector.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        added command handler(s).\n         */\n        add(...args : any[]): Disposable;\n        /**\n         * Find all registered commands matching a query.\n         * @param {Object} An {Object} containing one or more of the following keys:\n         * @returns {any[]} Returns an {Array} of {Object}s containing the following keys:\n\n        * `name` The name of the command. For example, `user:insert-date`.\n        * `displayName` The display name of the command. For example,\n          `User: Insert Date`.\n         */\n        findCommands(params: Object): any[];\n        /**\n         * Simulate the dispatch of a command on a DOM node.\n         *\n         * This can be useful for testing when you want to simulate the invocation of a\n         * command on a detached DOM node. Otherwise, the DOM node in question needs to\n         * be attached to the document so the event bubbles up to the root node to be\n         * processed.\n         * @param  The DOM node at which to start bubbling the command event.\n         * @param {string} {String} indicating the name of the command to dispatch.\n         */\n        dispatch(target: any, commandName: string): void;\n        /**\n         * Invoke the given callback before dispatching a command event.\n         * @param {Function} {Function} to be called before dispatching each command\n         */\n        onWillDispatch(callback: Function): void;\n        /**\n         * Invoke the given callback after dispatching a command event.\n         * @param {Function} {Function} to be called after dispatching each command\n         */\n        onDidDispatch(callback: Function): void;\n    }\n\n    /**\n     * An object that aggregates multiple {Disposable} instances together\n     * into a single disposable, so they can all be disposed as a group.\n     *\n     * These are very useful when subscribing to multiple events.\n     *\n     * file: src/composite-disposable.coffee\n     * srcUrl: https://github.com/atom/event-kit/blob/v2.2.0/src/composite-disposable.coffee#L24\n     */\n    class CompositeDisposable {\n        /**\n         * Construct an instance, optionally with one or more disposables\n         */\n        constructor();\n        /**\n         * Dispose all disposables added to this composite disposable.\n         *\n         * If this object has already been disposed, this method has no effect.\n         */\n        dispose(): void;\n        /**\n         * Add disposables to be disposed when the composite is disposed.\n         *\n         * If this object has already been disposed, this method has no effect.\n         * @param {Disposable} {Disposable} instances or any objects with `.dispose()` methods.\n         */\n        add(...disposables: Disposable[]): void;\n        /**\n         * Remove a previously added disposable.\n         * @param {Disposable} {Disposable} instance or any object with a `.dispose()` method.\n         */\n        remove(disposable: Disposable): void;\n        /**\n         * Clear all disposables. They will not be disposed by the next call\n         * to dispose.\n         */\n        clear(): void;\n    }\n\n    /**\n     * Used to access all of Atom's configuration details.\n     *\n     * An instance of this class is always available as the `atom.config` global.\n     *\n     * ## Getting and setting config settings.\n     *\n     * ```coffee\n     * # Note that with no value set, ::get returns the setting's default value.\n     * atom.config.get('my-package.myKey') # -> 'defaultValue'\n     *\n     * atom.config.set('my-package.myKey', 'value')\n     * atom.config.get('my-package.myKey') # -> 'value'\n     * ```\n     *\n     * You may want to watch for changes. Use {::observe} to catch changes to the setting.\n     *\n     * ```coffee\n     * atom.config.set('my-package.myKey', 'value')\n     * atom.config.observe 'my-package.myKey', (newValue) ->\n     *   # `observe` calls immediately and every time the value is changed\n     *   console.log 'My configuration changed:', newValue\n     * ```\n     *\n     * If you want a notification only when the value changes, use {::onDidChange}.\n     *\n     * ```coffee\n     * atom.config.onDidChange 'my-package.myKey', ({newValue, oldValue}) ->\n     *   console.log 'My configuration changed:', newValue, oldValue\n     * ```\n     *\n     * ### Value Coercion\n     *\n     * Config settings each have a type specified by way of a\n     * [schema](json-schema.org). For example we might an integer setting that only\n     * allows integers greater than `0`:\n     *\n     * ```coffee\n     * # When no value has been set, `::get` returns the setting's default value\n     * atom.config.get('my-package.anInt') # -> 12\n     *\n     * # The string will be coerced to the integer 123\n     * atom.config.set('my-package.anInt', '123')\n     * atom.config.get('my-package.anInt') # -> 123\n     *\n     * # The string will be coerced to an integer, but it must be greater than 0, so is set to 1\n     * atom.config.set('my-package.anInt', '-20')\n     * atom.config.get('my-package.anInt') # -> 1\n     * ```\n     *\n     * ## Defining settings for your package\n     *\n     * Define a schema under a `config` key in your package main.\n     *\n     * ```coffee\n     * module.exports =\n     *   # Your config schema\n     *   config:\n     *     someInt:\n     *       type: 'integer'\n     *       default: 23\n     *       minimum: 1\n     *\n     *   activate: (state) -> # ...\n     *   # ...\n     * ```\n     *\n     * See [package docs](http://flight-manual.atom.io/hacking-atom/sections/package-word-count/) for\n     * more info.\n     *\n     * ## Config Schemas\n     *\n     * We use [json schema](http://json-schema.org) which allows you to define your value's\n     * default, the type it should be, etc. A simple example:\n     *\n     * ```coffee\n     * # We want to provide an `enableThing`, and a `thingVolume`\n     * config:\n     *   enableThing:\n     *     type: 'boolean'\n     *     default: false\n     *   thingVolume:\n     *     type: 'integer'\n     *     default: 5\n     *     minimum: 1\n     *     maximum: 11\n     * ```\n     *\n     * The type keyword allows for type coercion and validation. If a `thingVolume` is\n     * set to a string `'10'`, it will be coerced into an integer.\n     *\n     * ```coffee\n     * atom.config.set('my-package.thingVolume', '10')\n     * atom.config.get('my-package.thingVolume') # -> 10\n     *\n     * # It respects the min / max\n     * atom.config.set('my-package.thingVolume', '400')\n     * atom.config.get('my-package.thingVolume') # -> 11\n     *\n     * # If it cannot be coerced, the value will not be set\n     * atom.config.set('my-package.thingVolume', 'cats')\n     * atom.config.get('my-package.thingVolume') # -> 11\n     * ```\n     *\n     * ### Supported Types\n     *\n     * The `type` keyword can be a string with any one of the following. You can also\n     * chain them by specifying multiple in an an array. For example\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: ['boolean', 'integer']\n     *     default: 5\n     *\n     * # Then\n     * atom.config.set('my-package.someSetting', 'true')\n     * atom.config.get('my-package.someSetting') # -> true\n     *\n     * atom.config.set('my-package.someSetting', '12')\n     * atom.config.get('my-package.someSetting') # -> 12\n     * ```\n     *\n     * #### string\n     *\n     * Values must be a string.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'string'\n     *     default: 'hello'\n     * ```\n     *\n     * #### integer\n     *\n     * Values will be coerced into integer. Supports the (optional) `minimum` and\n     * `maximum` keys.\n     *\n     * ```coffee\n     *   config:\n     *     someSetting:\n     *       type: 'integer'\n     *       default: 5\n     *       minimum: 1\n     *       maximum: 11\n     * ```\n     *\n     * #### number\n     *\n     * Values will be coerced into a number, including real numbers. Supports the\n     * (optional) `minimum` and `maximum` keys.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'number'\n     *     default: 5.3\n     *     minimum: 1.5\n     *     maximum: 11.5\n     * ```\n     *\n     * #### boolean\n     *\n     * Values will be coerced into a Boolean. `'true'` and `'false'` will be coerced into\n     * a boolean. Numbers, arrays, objects, and anything else will not be coerced.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'boolean'\n     *     default: false\n     * ```\n     *\n     * #### array\n     *\n     * Value must be an Array. The types of the values can be specified by a\n     * subschema in the `items` key.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'array'\n     *     default: [1, 2, 3]\n     *     items:\n     *       type: 'integer'\n     *       minimum: 1.5\n     *       maximum: 11.5\n     * ```\n     *\n     * #### color\n     *\n     * Values will be coerced into a {Color} with `red`, `green`, `blue`, and `alpha`\n     * properties that all have numeric values. `red`, `green`, `blue` will be in\n     * the range 0 to 255 and `value` will be in the range 0 to 1. Values can be any\n     * valid CSS color format such as `#abc`, `#abcdef`, `white`,\n     * `rgb(50, 100, 150)`, and `rgba(25, 75, 125, .75)`.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'color'\n     *     default: 'white'\n     * ```\n     *\n     * #### object / Grouping other types\n     *\n     * A config setting with the type `object` allows grouping a set of config\n     * settings. The group will be visualy separated and has its own group headline.\n     * The sub options must be listed under a `properties` key.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'object'\n     *     properties:\n     *       myChildIntOption:\n     *         type: 'integer'\n     *         minimum: 1.5\n     *         maximum: 11.5\n     * ```\n     *\n     * ### Other Supported Keys\n     *\n     * #### enum\n     *\n     * All types support an `enum` key, which lets you specify all the values the\n     * setting can take. `enum` may be an array of allowed values (of the specified\n     * type), or an array of objects with `value` and `description` properties, where\n     * the `value` is an allowed value, and the `description` is a descriptive string\n     * used in the settings view.\n     *\n     * In this example, the setting must be one of the 4 integers:\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'integer'\n     *     default: 4\n     *     enum: [2, 4, 6, 8]\n     * ```\n     *\n     * In this example, the setting must be either 'foo' or 'bar', which are\n     * presented using the provided descriptions in the settings pane:\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     type: 'string'\n     *     default: 'foo'\n     *     enum: [\n     *       {value: 'foo', description: 'Foo mode. You want this.'}\n     *       {value: 'bar', description: 'Bar mode. Nobody wants that!'}\n     *     ]\n     * ```\n     *\n     * Usage:\n     *\n     * ```coffee\n     * atom.config.set('my-package.someSetting', '2')\n     * atom.config.get('my-package.someSetting') # -> 2\n     *\n     * # will not set values outside of the enum values\n     * atom.config.set('my-package.someSetting', '3')\n     * atom.config.get('my-package.someSetting') # -> 2\n     *\n     * # If it cannot be coerced, the value will not be set\n     * atom.config.set('my-package.someSetting', '4')\n     * atom.config.get('my-package.someSetting') # -> 4\n     * ```\n     *\n     * #### title and description\n     *\n     * The settings view will use the `title` and `description` keys to display your\n     * config setting in a readable way. By default the settings view humanizes your\n     * config key, so `someSetting` becomes `Some Setting`. In some cases, this is\n     * confusing for users, and a more descriptive title is useful.\n     *\n     * Descriptions will be displayed below the title in the settings view.\n     *\n     * For a group of config settings the humanized key or the title and the\n     * description are used for the group headline.\n     *\n     * ```coffee\n     * config:\n     *   someSetting:\n     *     title: 'Setting Magnitude'\n     *     description: 'This will affect the blah and the other blah'\n     *     type: 'integer'\n     *     default: 4\n     * ```\n     *\n     * __Note__: You should strive to be so clear in your naming of the setting that\n     * you do not need to specify a title or description!\n     *\n     * Descriptions allow a subset of\n     * [Markdown formatting](https://help.github.com/articles/github-flavored-markdown/).\n     * Specifically, you may use the following in configuration setting descriptions:\n     *\n     * * **bold** - `**bold**`\n     * * *italics* - `*italics*`\n     * * [links](https://atom.io) - `[links](https://atom.io)`\n     * * `code spans` - `\\`code spans\\``\n     * * line breaks - `line breaks<br/>`\n     * * ~~strikethrough~~ - `~~strikethrough~~`\n     *\n     * #### order\n     *\n     * The settings view orders your settings alphabetically. You can override this\n     * ordering with the order key.\n     *\n     * ```coffee\n     * config:\n     *   zSetting:\n     *     type: 'integer'\n     *     default: 4\n     *     order: 1\n     *   aSetting:\n     *     type: 'integer'\n     *     default: 4\n     *     order: 2\n     * ```\n     *\n     * ## Manipulating values outside your configuration schema\n     *\n     * It is possible to manipulate(`get`, `set`, `observe` etc) values that do not\n     * appear in your configuration schema. For example, if the config schema of the\n     * package 'some-package' is\n     *\n     * ```coffee\n     * config:\n     * someSetting:\n     *   type: 'boolean'\n     *   default: false\n     * ```\n     *\n     * You can still do the following\n     *\n     * ```coffee\n     * let otherSetting  = atom.config.get('some-package.otherSetting')\n     * atom.config.set('some-package.stillAnotherSetting', otherSetting * 5)\n     * ```\n     *\n     * In other words, if a function asks for a `key-path`, that path doesn't have to\n     * be described in the config schema for the package or any package. However, as\n     * highlighted in the best practices section, you are advised against doing the\n     * above.\n     *\n     * ## Best practices\n     *\n     * * Don't depend on (or write to) configuration keys outside of your keypath.\n     *\n     * file: src/config.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/config.coffee#L369\n     */\n    class Config {\n        /**\n         * Add a listener for changes to a given key path. This is different\n         * than {::onDidChange} in that it will immediately call your callback with the\n         * current value of the config entry.\n         *\n         * ### Examples\n         *\n         * You might want to be notified when the themes change. We'll watch\n         * `core.themes` for changes\n         *\n         * ```coffee\n         * atom.config.observe 'core.themes', (value) ->\n         *   # do stuff with value\n         * ```\n         * @param {string} {String} name of the key to observe\n         * @param {Object} {Object}\n         * @param {Function} {Function} to call when the value of the key changes.\n         * @returns {Disposable} Returns a {Disposable} with the following keys on which you can call\n        `.dispose()` to unsubscribe.\n         */\n        observe(keyPath: string, options?: Object, callback?: Function): Disposable;\n        /**\n         * Add a listener for changes to a given key path. If `keyPath` is\n         * not specified, your callback will be called on changes to any key.\n         * @param {string} {String} name of the key to observe. Must be specified if `scopeDescriptor` is specified.\n         * @param {Object} {Object}\n         * @param {Function} {Function} to call when the value of the key changes.\n         * @returns {Disposable} Returns a {Disposable} with the following keys on which you can call\n        `.dispose()` to unsubscribe.\n         */\n        onDidChange(keyPath?: string, options?: Object, callback?: Function): Disposable;\n        /**\n         * Retrieves the setting for the given key.\n         *\n         * ### Examples\n         *\n         * You might want to know what themes are enabled, so check `core.themes`\n         *\n         * ```coffee\n         * atom.config.get('core.themes')\n         * ```\n         *\n         * With scope descriptors you can get settings within a specific editor\n         * scope. For example, you might want to know `editor.tabLength` for ruby\n         * files.\n         *\n         * ```coffee\n         * atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n         * ```\n         *\n         * This setting in ruby files might be different than the global tabLength setting\n         *\n         * ```coffee\n         * atom.config.get('editor.tabLength') # => 4\n         * atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n         * ```\n         *\n         * You can get the language scope descriptor via\n         * {TextEditor::getRootScopeDescriptor}. This will get the setting specifically\n         * for the editor's language.\n         *\n         * ```coffee\n         * atom.config.get('editor.tabLength', scope: @editor.getRootScopeDescriptor()) # => 2\n         * ```\n         *\n         * Additionally, you can get the setting at the specific cursor position.\n         *\n         * ```coffee\n         * scopeDescriptor = @editor.getLastCursor().getScopeDescriptor()\n         * atom.config.get('editor.tabLength', scope: scopeDescriptor) # => 2\n         * ```\n         * @param {string} The {String} name of the key to retrieve.\n         * @param {Object} {Object}\n         * @returns  Returns the value from Atom's default settings, the user's configuration\n        file in the type specified by the configuration schema.\n         */\n        get(keyPath: string, options?: Object): any;\n        /**\n         * Get all of the values for the given key-path, along with their\n         * associated scope selector.\n         * @param {string} The {String} name of the key to retrieve\n         * @param {Object} {Object} see the `options` argument to {::get}\n         * @returns {any[]} Returns an {Array} of {Object}s with the following keys:\n\n        * `scopeDescriptor` The {ScopeDescriptor} with which the value is associated\n        * `value` The value for the key-path\n         */\n        getAll(keyPath: string, options?: Object): any[];\n        /**\n         * Sets the value for a configuration setting.\n         *\n         * This value is stored in Atom's internal configuration file.\n         *\n         * ### Examples\n         *\n         * You might want to change the themes programmatically:\n         *\n         * ```coffee\n         * atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])\n         * ```\n         *\n         * You can also set scoped settings. For example, you might want change the\n         * `editor.tabLength` only for ruby files.\n         *\n         * ```coffee\n         * atom.config.get('editor.tabLength') # => 4\n         * atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4\n         * atom.config.get('editor.tabLength', scope: ['source.js']) # => 4\n         *\n         * # Set ruby to 2\n         * atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true\n         *\n         * # Notice it's only set to 2 in the case of ruby\n         * atom.config.get('editor.tabLength') # => 4\n         * atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n         * atom.config.get('editor.tabLength', scope: ['source.js']) # => 4\n         * ```\n         * @param {string} The {String} name of the key.\n         * @param  The value of the setting. Passing `undefined` will revert the setting to the default value.\n         * @param {Object} {Object}\n         * @returns {boolean} Returns a {Boolean}\n\n        * `true` if the value was set.\n        * `false` if the value was not able to be coerced to the type specified in the setting's schema.\n         */\n        set(keyPath: string, value: any, options?: Object): boolean;\n        /**\n         * Restore the setting at `keyPath` to its default value.\n         * @param {string} The {String} name of the key.\n         * @param {Object} {Object}\n         */\n        unset(keyPath: string, options?: Object): void;\n        /**\n         * Get an {Array} of all of the `source` {String}s with which\n         * settings have been added via {::set}.\n         */\n        getSources(): void;\n        /**\n         * Retrieve the schema for a specific key path. The schema will tell\n         * you what type the keyPath expects, and other metadata about the config\n         * option.\n         * @param {string} The {String} name of the key.\n         * @returns {Object} Returns an {Object} eg. `{type: 'integer', default: 23, minimum: 1}`.\n         * @returns  Returns `null` when the keyPath has no schema specified, but is accessible\n        from the root schema.\n         */\n        getSchema(keyPath: string): Object;\n        /**\n         * Get the {String} path to the config file being used.\n         */\n        getUserConfigPath(): void;\n        /**\n         * Suppress calls to handler functions registered with {::onDidChange}\n         * and {::observe} for the duration of `callback`. After `callback` executes,\n         * handlers will be called once if the value for their key-path has changed.\n         * @param {Function} {Function} to execute while suppressing calls to handlers.\n         */\n        transact(callback: Function): void;\n    }\n\n    /**\n     * Provides a registry for commands that you'd like to appear in the\n     * context menu.\n     *\n     * An instance of this class is always available as the `atom.contextMenu`\n     * global.\n     *\n     * ## Context Menu CSON Format\n     *\n     * ```coffee\n     * 'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}]\n     * 'atom-text-editor': [{\n     *   label: 'History',\n     *   submenu: [\n     *     {label: 'Undo', command:'core:undo'}\n     *     {label: 'Redo', command:'core:redo'}\n     *   ]\n     * }]\n     * ```\n     *\n     * In your package's menu `.cson` file you need to specify it under a\n     * `context-menu` key:\n     *\n     * ```coffee\n     * 'context-menu':\n     *   'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}]\n     *   ...\n     * ```\n     *\n     * The format for use in {::add} is the same minus the `context-menu` key. See\n     * {::add} for more information.\n     *\n     * file: src/context-menu-manager.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/context-menu-manager.coffee#L42\n     */\n    class ContextMenuManager {\n        /**\n         * Add context menu items scoped by CSS selectors.\n         * @param {Object} An {Object} whose keys are CSS selectors and whose values are {Array}s of item {Object}s containing the following keys:\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        added menu items.\n         */\n        add(itemsBySelector: Object): Disposable;\n    }\n\n    /**\n     * The `Cursor` class represents the little blinking line identifying\n     * where text can be inserted.\n     *\n     * Cursors belong to {TextEditor}s and have some metadata attached in the form\n     * of a {DisplayMarker}.\n     *\n     * file: src/cursor.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/cursor.coffee#L14\n     */\n    class Cursor {\n        /**\n         * Calls your `callback` when the cursor has been moved.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangePosition(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the cursor is destroyed\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the cursor's visibility has changed\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeVisibility(callback: Function): Disposable;\n        /**\n         * Moves a cursor to a given screen position.\n         * @param {any[]} {Array} of two numbers: the screen row, and the screen column.\n         * @param {Object} {Object} with the following keys:\n         */\n        setScreenPosition(screenPosition: any[], options?: Object): void;\n        /**\n         * @returns {Point} Returns the screen position of the cursor as a {Point}.\n         */\n        getScreenPosition(): Point;\n        /**\n         * Moves a cursor to a given buffer position.\n         * @param {any[]} {Array} of two numbers: the buffer row, and the buffer column.\n         * @param {Object} {Object} with the following keys:\n         */\n        setBufferPosition(bufferPosition: any[], options?: Object): void;\n        /**\n         * @returns  Returns the current buffer position as an Array.\n         */\n        getBufferPosition(): any;\n        /**\n         * @returns  Returns the cursor's current screen row.\n         */\n        getScreenRow(): any;\n        /**\n         * @returns  Returns the cursor's current screen column.\n         */\n        getScreenColumn(): any;\n        /**\n         * Retrieves the cursor's current buffer row.\n         */\n        getBufferRow(): void;\n        /**\n         * @returns  Returns the cursor's current buffer column.\n         */\n        getBufferColumn(): any;\n        /**\n         * @returns  Returns the cursor's current buffer row of text excluding its line\n        ending.\n         */\n        getCurrentBufferLine(): any;\n        /**\n         * @returns  Returns whether the cursor is at the start of a line.\n         */\n        isAtBeginningOfLine(): any;\n        /**\n         * @returns  Returns whether the cursor is on the line return character.\n         */\n        isAtEndOfLine(): any;\n        /**\n         * @returns {DisplayMarker} Returns the underlying {DisplayMarker} for the cursor.\n        Useful with overlay {Decoration}s.\n         */\n        getMarker(): DisplayMarker;\n        /**\n         * Identifies if the cursor is surrounded by whitespace.\n         *\n         * \"Surrounded\" here means that the character directly before and after the\n         * cursor are both whitespace.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isSurroundedByWhitespace(): boolean;\n        /**\n         *\n         *\n         * This method returns false if the character before or after the cursor is\n         * whitespace.\n         * @returns  Returns whether the cursor is currently between a word and non-word\n        character. The non-word characters are defined by the\n        `editor.nonWordCharacters` config value.\n         * @returns  Returns a Boolean.\n         */\n        isBetweenWordAndNonWord(): any;\n        /**\n         * @param {Object} {Object}\n         * @returns  Returns whether this cursor is between a word's start and end.\n         * @returns {boolean} Returns a {Boolean}\n         */\n        isInsideWord(options?: Object): boolean;\n        /**\n         * @returns  Returns the indentation level of the current line.\n         */\n        getIndentLevel(): any;\n        /**\n         * Retrieves the scope descriptor for the cursor's current position.\n         * @returns {ScopeDescriptor} Returns a {ScopeDescriptor}\n         */\n        getScopeDescriptor(): ScopeDescriptor;\n        /**\n         * @returns  Returns true if this cursor has no non-whitespace characters before\n        its current position.\n         */\n        hasPrecedingCharactersOnLine(): any;\n        /**\n         * Identifies if this cursor is the last in the {TextEditor}.\n         *\n         * \"Last\" is defined as the most recently added cursor.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isLastCursor(): boolean;\n        /**\n         * Moves the cursor up one screen row.\n         * @param {number} {Number} number of rows to move (default: 1)\n         * @param {Object} {Object} with the following keys:\n         */\n        moveUp(rowCount?: number, options?: Object): void;\n        /**\n         * Moves the cursor down one screen row.\n         * @param {number} {Number} number of rows to move (default: 1)\n         * @param {Object} {Object} with the following keys:\n         */\n        moveDown(rowCount?: number, options?: Object): void;\n        /**\n         * Moves the cursor left one screen column.\n         * @param {number} {Number} number of columns to move (default: 1)\n         * @param {Object} {Object} with the following keys:\n         */\n        moveLeft(columnCount?: number, options?: Object): void;\n        /**\n         * Moves the cursor right one screen column.\n         * @param {number} {Number} number of columns to move (default: 1)\n         * @param {Object} {Object} with the following keys:\n         */\n        moveRight(columnCount?: number, options?: Object): void;\n        /**\n         * Moves the cursor to the top of the buffer.\n         */\n        moveToTop(): void;\n        /**\n         * Moves the cursor to the bottom of the buffer.\n         */\n        moveToBottom(): void;\n        /**\n         * Moves the cursor to the beginning of the line.\n         */\n        moveToBeginningOfScreenLine(): void;\n        /**\n         * Moves the cursor to the beginning of the buffer line.\n         */\n        moveToBeginningOfLine(): void;\n        /**\n         * Moves the cursor to the beginning of the first character in the\n         * line.\n         */\n        moveToFirstCharacterOfLine(): void;\n        /**\n         * Moves the cursor to the end of the line.\n         */\n        moveToEndOfScreenLine(): void;\n        /**\n         * Moves the cursor to the end of the buffer line.\n         */\n        moveToEndOfLine(): void;\n        /**\n         * Moves the cursor to the beginning of the word.\n         */\n        moveToBeginningOfWord(): void;\n        /**\n         * Moves the cursor to the end of the word.\n         */\n        moveToEndOfWord(): void;\n        /**\n         * Moves the cursor to the beginning of the next word.\n         */\n        moveToBeginningOfNextWord(): void;\n        /**\n         * Moves the cursor to the previous word boundary.\n         */\n        moveToPreviousWordBoundary(): void;\n        /**\n         * Moves the cursor to the next word boundary.\n         */\n        moveToNextWordBoundary(): void;\n        /**\n         * Moves the cursor to the previous subword boundary.\n         */\n        moveToPreviousSubwordBoundary(): void;\n        /**\n         * Moves the cursor to the next subword boundary.\n         */\n        moveToNextSubwordBoundary(): void;\n        /**\n         * Moves the cursor to the beginning of the buffer line, skipping all\n         * whitespace.\n         */\n        skipLeadingWhitespace(): void;\n        /**\n         * Moves the cursor to the beginning of the next paragraph\n         */\n        moveToBeginningOfNextParagraph(): void;\n        /**\n         * Moves the cursor to the beginning of the previous paragraph\n         */\n        moveToBeginningOfPreviousParagraph(): void;\n        /**\n         * @param {Object} {Object} with the following keys:\n         * @returns  Returns buffer position of previous word boundary. It might be on\n        the current word, or the previous word.\n         */\n        getPreviousWordBoundaryBufferPosition(options?: Object): any;\n        /**\n         * @param {Object} {Object} with the following keys:\n         * @returns  Returns buffer position of the next word boundary. It might be on\n        the current word, or the previous word.\n         */\n        getNextWordBoundaryBufferPosition(options?: Object): any;\n        /**\n         * Retrieves the buffer position of where the current word starts.\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Range} Returns a {Range}.\n         */\n        getBeginningOfCurrentWordBufferPosition(options?: Object): Range;\n        /**\n         * Retrieves the buffer position of where the current word ends.\n         * @param {Object} {Object} with the following keys:\n         * @returns {Range} Returns a {Range}.\n         */\n        getEndOfCurrentWordBufferPosition(options?: Object): Range;\n        /**\n         * Retrieves the buffer position of where the next word starts.\n         * @param {Object} {Object}\n         * @returns {Range} Returns a {Range}\n         */\n        getBeginningOfNextWordBufferPosition(options?: Object): Range;\n        /**\n         * @param {Object} {Object}\n         * @returns  Returns the buffer Range occupied by the word located under the cursor.\n         */\n        getCurrentWordBufferRange(options?: Object): any;\n        /**\n         * @param {Object} {Object}\n         * @returns  Returns the buffer Range for the current line.\n         */\n        getCurrentLineBufferRange(options?: Object): any;\n        /**\n         * Retrieves the range for the current paragraph.\n         *\n         * A paragraph is defined as a block of text surrounded by empty lines or comments.\n         * @returns {Range} Returns a {Range}.\n         */\n        getCurrentParagraphBufferRange(): Range;\n        /**\n         * @returns  Returns the characters preceding the cursor in the current word.\n         */\n        getCurrentWordPrefix(): any;\n        /**\n         * Sets whether the cursor is visible.\n         */\n        setVisible(): void;\n        /**\n         * @returns  Returns the visibility of the cursor.\n         */\n        isVisible(): any;\n        /**\n         * Compare this cursor's buffer position to another cursor's buffer position.\n         *\n         * See {Point::compare} for more details.\n         * @param {Cursor} {Cursor} to compare against\n         */\n        compare(otherCursor: Cursor): void;\n        /**\n         * Prevents this cursor from causing scrolling.\n         */\n        clearAutoscroll(): void;\n        /**\n         * Deselects the current selection.\n         */\n        clearSelection(): void;\n        /**\n         * Get the RegExp used by the cursor to determine what a \"word\" is.\n         * @param {Object} {Object} with the following keys:\n         * @returns {RegExp} Returns a {RegExp}.\n         */\n        wordRegExp(options?: Object): RegExp;\n        /**\n         * Get the RegExp used by the cursor to determine what a \"subword\" is.\n         * @param {Object} {Object} with the following keys:\n         * @returns {RegExp} Returns a {RegExp}.\n         */\n        subwordRegExp(options?: Object): RegExp;\n    }\n\n    /**\n     * Represents a decoration that follows a {DisplayMarker}. A decoration is\n     * basically a visual representation of a marker. It allows you to add CSS\n     * classes to line numbers in the gutter, lines, and add selection-line regions\n     * around marked ranges of text.\n     *\n     * {Decoration} objects are not meant to be created directly, but created with\n     * {TextEditor::decorateMarker}. eg.\n     *\n     * ```coffee\n     * range = editor.getSelectedBufferRange() # any range you like\n     * marker = editor.markBufferRange(range)\n     * decoration = editor.decorateMarker(marker, {type: 'line', class: 'my-line-class'})\n     * ```\n     *\n     * Best practice for destroying the decoration is by destroying the {DisplayMarker}.\n     *\n     * ```coffee\n     * marker.destroy()\n     * ```\n     *\n     * You should only use {Decoration::destroy} when you still need or do not own\n     * the marker.\n     *\n     * file: src/decoration.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/decoration.coffee#L37\n     */\n    class Decoration {\n        /**\n         * Destroy this marker decoration.\n         *\n         * You can also destroy the marker if you own it, which will destroy this\n         * decoration.\n         */\n        destroy(): void;\n        /**\n         * When the {Decoration} is updated via {Decoration::update}.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeProperties(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the {Decoration} is destroyed\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * An id unique across all {Decoration} objects\n         */\n        getId(): void;\n        /**\n         * @returns {Decoration} Returns the marker associated with this {Decoration}\n         */\n        getMarker(): Decoration;\n        /**\n         * @returns {Decoration} Returns the {Decoration}'s properties.\n         */\n        getProperties(): Decoration;\n        /**\n         * Update the marker with new Properties. Allows you to change the decoration's class.\n         * @param {Object} {Object} eg. `{type: 'line-number', class: 'my-new-class'}`\n         */\n        setProperties(newProperties: Object): void;\n    }\n\n    /**\n     * Manages the deserializers used for serialized state\n     *\n     * An instance of this class is always available as the `atom.deserializers`\n     * global.\n     *\n     * file: src/deserializer-manager.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/deserializer-manager.js#L24\n     */\n    class DeserializerManager {\n        /**\n         * Register the given class(es) as deserializers.\n         * @param {Atom} One or more deserializers to register. A deserializer can be any object with a `.name` property and a `.deserialize()` method. A common approach is to register a *constructor* as the deserializer for its instances by adding a `.deserialize()` class method. When your method is called, it will be passed serialized state as the first argument and the {Atom} environment object as the second argument, which is useful if you wish to avoid referencing the `atom` global.\n         */\n        add(...deserializers: {name: string, deserialize(state: Object): any}[]): void;\n        /**\n         * Deserialize the state and params.\n         * @param {Object} The state {Object} to deserialize.\n         */\n        deserialize(state: Object): void;\n    }\n\n    /**\n     * Represents a directory on disk that can be watched for changes.\n     *\n     * file: src/directory.coffee\n     * srcUrl: https://github.com/atom/node-pathwatcher/blob/v6.8.0/src/directory.coffee#L13\n     */\n    class Directory {\n        /**\n         * Configures a new Directory instance, no files are accessed.\n         * @param {string} A {String} containing the absolute path to the directory\n         * @param {boolean} A {Boolean} indicating if the path is a symlink. (default: false)\n         */\n        constructor(directoryPath: string, symlink?: boolean);\n        /**\n         * Creates the directory on disk that corresponds to `::getPath()` if\n         * no such directory already exists.\n         * @param {number} {Number} that defaults to `0777`.\n         * @returns {Promise<any>} Returns a {Promise} that resolves once the directory is created on disk. It\n        resolves to a boolean value that is true if the directory was created or\n        false if it already existed.\n         */\n        create(mode?: number): Promise<any>;\n        /**\n         * Invoke the given callback when the directory's contents change.\n         * @param {Function} {Function} to be called when the directory's contents change.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChange(callback: Function): Disposable;\n        /**\n         * @returns {boolean} Returns a {Boolean}, always false.\n         */\n        isFile(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean}, always true.\n         */\n        isDirectory(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether or not this is a symbolic link\n         */\n        isSymbolicLink(): boolean;\n        /**\n         * @returns {boolean} Returns a promise that resolves to a {Boolean}, true if the\n        directory exists, false otherwise.\n         */\n        exists(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean}, true if the directory exists, false otherwise.\n         */\n        existsSync(): boolean;\n        /**\n         * Return a {Boolean}, true if this {Directory} is the root directory\n         * of the filesystem, or false if it isn't.\n         */\n        isRoot(): void;\n        /**\n         *\n         *\n         * This may include unfollowed symlinks or relative directory entries. Or it\n         * may be fully resolved, it depends on what you give it.\n         * @returns {string} Returns the directory's {String} path.\n         */\n        getPath(): string;\n        /**\n         *\n         *\n         * All relative directory entries are removed and symlinks are resolved to\n         * their final destination.\n         * @returns {string} Returns this directory's completely resolved {String} path.\n         */\n        getRealPathSync(): string;\n        /**\n         * @returns {string} Returns the {String} basename of the directory.\n         */\n        getBaseName(): string;\n        /**\n         * @returns {string} Returns the relative {String} path to the given path from this\n        directory.\n         */\n        relativize(any): string;\n        /**\n         * Traverse to the parent directory.\n         * @returns {Directory} Returns a {Directory}.\n         */\n        getParent(): Directory;\n        /**\n         * Traverse within this Directory to a child File. This method doesn't\n         * actually check to see if the File exists, it just creates the File object.\n         * @param {string} The {String} name of a File within this Directory.\n         * @returns {File} Returns a {File}.\n         */\n        getFile(filename: string): File;\n        /**\n         * Traverse within this a Directory to a child Directory. This method\n         * doesn't actually check to see if the Directory exists, it just creates the\n         * Directory object.\n         * @param {string} The {String} name of the child Directory.\n         * @returns {Directory} Returns a {Directory}.\n         */\n        getSubdirectory(dirname: string): Directory;\n        /**\n         * Reads file entries in this directory from disk synchronously.\n         * @returns {any[]} Returns an {Array} of {File} and {Directory} objects.\n         */\n        getEntriesSync(): any[];\n        /**\n         * Reads file entries in this directory from disk asynchronously.\n         * @param {Function} A {Function} to call with the following arguments:\n         */\n        getEntries(callback: Function): void;\n        /**\n         * Determines if the given path (real or symbolic) is inside this\n         * directory. This method does not actually check if the path exists, it just\n         * checks if the path is under this directory.\n         * @param {string} The {String} path to check.\n         * @returns {boolean} Returns a {Boolean} whether the given path is inside this directory.\n         */\n        contains(pathToCheck: string): boolean;\n    }\n\n    /**\n     * Represents a buffer annotation that remains logically stationary\n     * even as the buffer changes. This is used to represent cursors, folds, snippet\n     * targets, misspelled words, and anything else that needs to track a logical\n     * location in the buffer over time.\n     *\n     * ### DisplayMarker Creation\n     *\n     * Use {DisplayMarkerLayer::markBufferRange} or {DisplayMarkerLayer::markScreenRange}\n     * rather than creating Markers directly.\n     *\n     * ### Head and Tail\n     *\n     * Markers always have a *head* and sometimes have a *tail*. If you think of a\n     * marker as an editor selection, the tail is the part that's stationary and the\n     * head is the part that moves when the mouse is moved. A marker without a tail\n     * always reports an empty range at the head position. A marker with a head position\n     * greater than the tail is in a \"normal\" orientation. If the head precedes the\n     * tail the marker is in a \"reversed\" orientation.\n     *\n     * ### Validity\n     *\n     * Markers are considered *valid* when they are first created. Depending on the\n     * invalidation strategy you choose, certain changes to the buffer can cause a\n     * marker to become invalid, for example if the text surrounding the marker is\n     * deleted. The strategies, in order of descending fragility:\n     *\n     * * __never__: The marker is never marked as invalid. This is a good choice for\n     *   markers representing selections in an editor.\n     * * __surround__: The marker is invalidated by changes that completely surround it.\n     * * __overlap__: The marker is invalidated by changes that surround the\n     *   start or end of the marker. This is the default.\n     * * __inside__: The marker is invalidated by changes that extend into the\n     *   inside of the marker. Changes that end at the marker's start or\n     *   start at the marker's end do not invalidate the marker.\n     * * __touch__: The marker is invalidated by a change that touches the marked\n     *   region in any way, including changes that end at the marker's\n     *   start or start at the marker's end. This is the most fragile strategy.\n     *\n     * See {TextBuffer::markRange} for usage.\n     *\n     * file: src/display-marker.coffee\n     * srcUrl: https://github.com/atom/text-buffer/blob/v10.3.12/src/display-marker.coffee#L43\n     */\n    class DisplayMarker {\n        /**\n         * Destroys the marker, causing it to emit the 'destroyed' event. Once\n         * destroyed, a marker cannot be restored by undo/redo operations.\n         */\n        destroy(): void;\n        /**\n         * Creates and returns a new {DisplayMarker} with the same properties as\n         * this marker.\n         *\n         * {Selection} markers (markers with a custom property `type: \"selection\"`)\n         * should be copied with a different `type` value, for example with\n         * `marker.copy({type: null})`. Otherwise, the new marker's selection will\n         * be merged with this marker's selection, and a `null` value will be\n         * returned.\n         * @param {Object} {Object} properties to associate with the new marker. The new marker's properties are computed by extending this marker's properties with `properties`.\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        copy(properties?: Object): DisplayMarker;\n        /**\n         * Invoke the given callback when the state of the marker changes.\n         * @param {Function} {Function} to be called when the marker changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChange(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the marker is destroyed.\n         * @param {Function} {Function} to be called when the marker is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether the marker is valid.\n        Markers can be invalidated when a region surrounding them in the buffer is\n        changed.\n         */\n        isValid(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether the marker has been\n        destroyed. A marker can be invalid without being destroyed, in which case\n        undoing the invalidating operation would restore the marker. Once a marker\n        is destroyed by calling {DisplayMarker::destroy}, no undo/redo operation\n        can ever bring it back.\n         */\n        isDestroyed(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether the head precedes the tail.\n         */\n        isReversed(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether changes that occur exactly\n        at the marker's head or tail cause it to move.\n         */\n        isExclusive(): boolean;\n        /**\n         * Get the invalidation strategy for this marker.\n         *\n         * Valid values include: `never`, `surround`, `overlap`, `inside`, and `touch`.\n         * @returns {string} Returns a {String}.\n         */\n        getInvalidationStrategy(): string;\n        /**\n         * @returns {Object} Returns an {Object} containing any custom properties associated with\n        the marker.\n         */\n        getProperties(): Object;\n        /**\n         * Merges an {Object} containing new properties into the marker's\n         * existing properties.\n         * @param {Object} {Object}\n         */\n        setProperties(properties: Object): void;\n        /**\n         * @returns  Returns whether this marker matches the given parameters. The\n        parameters are the same as {DisplayMarkerLayer::findMarkers}.\n         */\n        matchesProperties(): any;\n        /**\n         * Compares this marker to another based on their ranges.\n         * @param {DisplayMarker} {DisplayMarker}\n         * @returns {number} Returns a {Number}\n         */\n        compare(other: DisplayMarker): number;\n        /**\n         * @param {DisplayMarker} {DisplayMarker} other marker\n         * @returns {boolean} Returns a {Boolean} indicating whether this marker is equivalent to\n        another marker, meaning they have the same range and options.\n         */\n        isEqual(other: DisplayMarker): boolean;\n        /**\n         * Gets the buffer range of this marker.\n         * @returns {Range} Returns a {Range}.\n         */\n        getBufferRange(): Range;\n        /**\n         * Gets the screen range of this marker.\n         * @returns {Range} Returns a {Range}.\n         */\n        getScreenRange(): Range;\n        /**\n         * Modifies the buffer range of this marker.\n         * @param {Range} The new {Range} to use\n         * @param {Object} {Object} properties to associate with the marker.\n         */\n        setBufferRange(bufferRange: Range, properties?: Object): void;\n        /**\n         * Modifies the screen range of this marker.\n         * @param {Range} The new {Range} to use\n         * @param {Object} An {Object} with the following keys:\n         */\n        setScreenRange(screenRange: Range, options?: Object): void;\n        /**\n         * Retrieves the buffer position of the marker's head.\n         * @returns {Point} Returns a {Point}.\n         */\n        getHeadBufferPosition(): Point;\n        /**\n         * Sets the buffer position of the marker's head.\n         * @param {Point} The new {Point} to use\n         */\n        setHeadBufferPosition(bufferPosition: Point): void;\n        /**\n         * Retrieves the screen position of the marker's head.\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Point} Returns a {Point}.\n         */\n        getHeadScreenPosition(options?: Object): Point;\n        /**\n         * Sets the screen position of the marker's head.\n         * @param {Point} The new {Point} to use\n         * @param {Object} An {Object} with the following keys:\n         */\n        setHeadScreenPosition(screenPosition: Point, options?: Object): void;\n        /**\n         * Retrieves the buffer position of the marker's tail.\n         * @returns {Point} Returns a {Point}.\n         */\n        getTailBufferPosition(): Point;\n        /**\n         * Sets the buffer position of the marker's tail.\n         * @param {Point} The new {Point} to use\n         */\n        setTailBufferPosition(bufferPosition: Point): void;\n        /**\n         * Retrieves the screen position of the marker's tail.\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Point} Returns a {Point}.\n         */\n        getTailScreenPosition(options?: Object): Point;\n        /**\n         * Sets the screen position of the marker's tail.\n         * @param {Point} The new {Point} to use\n         * @param {Object} An {Object} with the following keys:\n         */\n        setTailScreenPosition(screenPosition: Point, options?: Object): void;\n        /**\n         * Retrieves the buffer position of the marker's start. This will always be\n         * less than or equal to the result of {DisplayMarker::getEndBufferPosition}.\n         * @returns {Point} Returns a {Point}.\n         */\n        getStartBufferPosition(): Point;\n        /**\n         * Retrieves the screen position of the marker's start. This will always be\n         * less than or equal to the result of {DisplayMarker::getEndScreenPosition}.\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Point} Returns a {Point}.\n         */\n        getStartScreenPosition(options?: Object): Point;\n        /**\n         * Retrieves the buffer position of the marker's end. This will always be\n         * greater than or equal to the result of {DisplayMarker::getStartBufferPosition}.\n         * @returns {Point} Returns a {Point}.\n         */\n        getEndBufferPosition(): Point;\n        /**\n         * Retrieves the screen position of the marker's end. This will always be\n         * greater than or equal to the result of {DisplayMarker::getStartScreenPosition}.\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Point} Returns a {Point}.\n         */\n        getEndScreenPosition(options?: Object): Point;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether the marker has a tail.\n         */\n        hasTail(): boolean;\n        /**\n         * Plants the marker's tail at the current head position. After calling\n         * the marker's tail position will be its head position at the time of the\n         * call, regardless of where the marker's head is moved.\n         */\n        plantTail(): void;\n        /**\n         * Removes the marker's tail. After calling the marker's head position\n         * will be reported as its current tail position until the tail is planted\n         * again.\n         */\n        clearTail(): void;\n    }\n\n    /**\n     * *Experimental:* A container for a related set of markers at the\n     * {DisplayLayer} level. Wraps an underlying {MarkerLayer} on the {TextBuffer}.\n     *\n     * This API is experimental and subject to change on any release.\n     *\n     * file: src/display-marker-layer.coffee\n     * srcUrl: https://github.com/atom/text-buffer/blob/v10.3.12/src/display-marker-layer.coffee#L11\n     */\n    class DisplayMarkerLayer {\n        /**\n         * Destroy this layer.\n         */\n        destroy(): void;\n        /**\n         * Destroy all markers in this layer.\n         */\n        clear(): void;\n        /**\n         * Determine whether this layer has been destroyed.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isDestroyed(): boolean;\n        /**\n         * Subscribe to be notified synchronously when this layer is destroyed.\n         * @returns {Disposable} Returns a {Disposable}.\n         */\n        onDidDestroy(): Disposable;\n        /**\n         * Subscribe to be notified asynchronously whenever markers are\n         * created, updated, or destroyed on this layer. *Prefer this method for\n         * optimal performance when interacting with layers that could contain large\n         * numbers of markers.*\n         *\n         * Subscribers are notified once, asynchronously when any number of changes\n         * occur in a given tick of the event loop. You should re-query the layer\n         * to determine the state of markers in which you're interested in. It may\n         * be counter-intuitive, but this is much more efficient than subscribing to\n         * events on individual markers, which are expensive to deliver.\n         * @param {Function} A {Function} that will be called with no arguments when changes occur on this layer.\n         * @returns {Disposable} Returns a {Disposable}.\n         */\n        onDidUpdate(callback: Function): Disposable;\n        /**\n         * Subscribe to be notified synchronously whenever markers are created\n         * on this layer. *Avoid this method for optimal performance when interacting\n         * with layers that could contain large numbers of markers.*\n         *\n         * You should prefer {onDidUpdate} when synchronous notifications aren't\n         * absolutely necessary.\n         * @param {Function} A {Function} that will be called with a {TextEditorMarker} whenever a new marker is created.\n         * @returns {Disposable} Returns a {Disposable}.\n         */\n        onDidCreateMarker(callback: Function): Disposable;\n        /**\n         * Create a marker with the given screen range.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markScreenRange(range: Range, options: any): DisplayMarker;\n        /**\n         * Create a marker on this layer with its head at the given screen\n         * position and no tail.\n         * @param {Point} A {Point} or point-compatible {Array}\n         * @param {Object} An {Object} with the following keys:\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markScreenPosition(screenPosition: Point, options?: Object): DisplayMarker;\n        /**\n         * Create a marker with the given buffer range.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markBufferRange(range: Range, options: any): DisplayMarker;\n        /**\n         * Create a marker on this layer with its head at the given buffer\n         * position and no tail.\n         * @param {Point} A {Point} or point-compatible {Array}\n         * @param {Object} An {Object} with the following keys:\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markBufferPosition(bufferPosition: Point, options?: Object): DisplayMarker;\n        /**\n         * Get an existing marker by its id.\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        getMarker(): DisplayMarker;\n        /**\n         * Get all markers in the layer.\n         * @returns {any[]} Returns an {Array} of {DisplayMarker}s.\n         */\n        getMarkers(): any[];\n        /**\n         * Get the number of markers in the marker layer.\n         * @returns {number} Returns a {Number}.\n         */\n        getMarkerCount(): number;\n        /**\n         * Find markers in the layer conforming to the given parameters.\n         *\n         * This method finds markers based on the given properties. Markers can be\n         * associated with custom properties that will be compared with basic equality.\n         * In addition, there are several special properties that will be compared\n         * with the range of the markers rather than their properties.\n         * @param {Object} An {Object} containing properties that each returned marker must satisfy. Markers can be associated with custom properties, which are compared with basic equality. In addition, several reserved properties can be used to filter markers based on their current range:\n         * @returns {any[]} Returns an {Array} of {DisplayMarker}s\n         */\n        findMarkers(properties: Object): any[];\n    }\n\n    /**\n     * A handle to a resource that can be disposed. For example,\n     * {Emitter::on} returns disposables representing subscriptions.\n     *\n     * file: src/disposable.coffee\n     * srcUrl: https://github.com/atom/event-kit/blob/v2.2.0/src/disposable.coffee#L4\n     */\n    class Disposable {\n        /**\n         * Ensure that `object` correctly implements the `Disposable`\n         * contract.\n         * @param {Object} An {Object} you want to perform the check against.\n         * @returns {boolean} Returns a {Boolean} indicating whether `object` is a valid `Disposable`.\n         */\n        static isDisposable(object: Object): boolean;\n\n        /**\n         * Construct a Disposable\n         * @param {Function} A {Function} to call when {::dispose} is called for the first time.\n         */\n        constructor(disposalAction: Function);\n        /**\n         * Perform the disposal action, indicating that the resource associated\n         * with this disposable is no longer needed.\n         *\n         * You can call this method more than once, but the disposal action will only\n         * be performed the first time.\n         */\n        dispose(): void;\n    }\n\n    /**\n     * Utility class to be used when implementing event-based APIs that\n     * allows for handlers registered via `::on` to be invoked with calls to\n     * `::emit`. Instances of this class are intended to be used internally by\n     * classes that expose an event-based API.\n     *\n     * For example:\n     *\n     * ```coffee\n     * class User\n     *   constructor: ->\n     *     @emitter = new Emitter\n     *\n     *   onDidChangeName: (callback) ->\n     *     @emitter.on 'did-change-name', callback\n     *\n     *   setName: (name) ->\n     *     if name isnt @name\n     *       @name = name\n     *       @emitter.emit 'did-change-name', name\n     *     @name\n     * ```\n     *\n     * file: src/emitter.coffee\n     * srcUrl: https://github.com/atom/event-kit/blob/v2.2.0/src/emitter.coffee#L25\n     */\n    class Emitter {\n        /**\n         * Construct an emitter.\n         *\n         * ```coffee\n         * @emitter = new Emitter()\n         * ```\n         */\n        constructor();\n        /**\n         * Clear out any existing subscribers.\n         */\n        clear(): void;\n        /**\n         * Unsubscribe all handlers.\n         */\n        dispose(): void;\n        /**\n         * Register the given handler function to be invoked whenever events by\n         * the given name are emitted via {::emit}.\n         * @param {string} {String} naming the event that you want to invoke the handler when emitted.\n         * @param {Function} {Function} to invoke when {::emit} is called with the given event name.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        on(eventName: string, handler: Function): Disposable;\n        /**\n         * Register the given handler function to be invoked *before* all\n         * other handlers existing at the time of subscription whenever events by the\n         * given name are emitted via {::emit}.\n         *\n         * Use this method when you need to be the first to handle a given event. This\n         * could be required when a data structure in a parent object needs to be\n         * updated before third-party event handlers registered on a child object via a\n         * public API are invoked. Your handler could itself be preempted via\n         * subsequent calls to this method, but this can be controlled by keeping\n         * methods based on `::preempt` private.\n         * @param {string} {String} naming the event that you want to invoke the handler when emitted.\n         * @param {Function} {Function} to invoke when {::emit} is called with the given event name.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        preempt(eventName: string, handler: Function): Disposable;\n        /**\n         * Invoke handlers registered via {::on} for the given event name.\n         * @param  The name of the event to emit. Handlers registered with {::on} for the same name will be invoked.\n         * @param  Callbacks will be invoked with this value as an argument.\n         */\n        emit(eventName: string, value?: any): void;\n    }\n\n    /**\n     * Represents an individual file that can be watched, read from, and\n     * written to.\n     *\n     * file: src/file.coffee\n     * srcUrl: https://github.com/atom/node-pathwatcher/blob/v6.8.0/src/file.coffee#L18\n     */\n    class File {\n        /**\n         * Configures a new File instance, no files are accessed.\n         * @param {string} A {String} containing the absolute path to the file\n         * @param {boolean} A {Boolean} indicating if the path is a symlink (default: false).\n         */\n        constructor(filePath: string, symlink: boolean);\n        /**\n         * Creates the file on disk that corresponds to `::getPath()` if no\n         * such file already exists.\n         * @returns {Promise<any>} Returns a {Promise} that resolves once the file is created on disk. It\n        resolves to a boolean value that is true if the file was created or false if\n        it already existed.\n         */\n        create(): Promise<any>;\n        /**\n         * Invoke the given callback when the file's contents change.\n         * @param {Function} {Function} to be called when the file's contents change.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChange(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the file's path changes.\n         * @param {Function} {Function} to be called when the file's path changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidRename(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the file is deleted.\n         * @param {Function} {Function} to be called when the file is deleted.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDelete(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when there is an error with the watch.\n         * When your callback has been invoked, the file will have unsubscribed from\n         * the file watches.\n         * @param {Function} {Function} callback\n         */\n        onWillThrowWatchError(callback: Function): void;\n        /**\n         * @returns {boolean} Returns a {Boolean}, always true.\n         */\n        isFile(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean}, always false.\n         */\n        isDirectory(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether or not this is a symbolic link\n         */\n        isSymbolicLink(): boolean;\n        /**\n         * @returns {boolean} Returns a promise that resolves to a {Boolean}, true if the file\n        exists, false otherwise.\n         */\n        exists(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean}, true if the file exists, false otherwise.\n         */\n        existsSync(): boolean;\n        /**\n         * Get the SHA-1 digest of this file\n         * @returns {string} Returns a promise that resolves to a {String}.\n         */\n        getDigest(): string;\n        /**\n         * Get the SHA-1 digest of this file\n         * @returns {string} Returns a {String}.\n         */\n        getDigestSync(): string;\n        /**\n         * Sets the file's character set encoding name.\n         * @param {string} The {String} encoding to use (default: 'utf8')\n         */\n        setEncoding(encoding: string): void;\n        /**\n         * @returns {string} Returns the {String} encoding name for this file (default: 'utf8').\n         */\n        getEncoding(): string;\n        /**\n         * @returns {string} Returns the {String} path for the file.\n         */\n        getPath(): string;\n        /**\n         * @returns {string} Returns this file's completely resolved {String} path.\n         */\n        getRealPathSync(): string;\n        /**\n         * @returns {string} Returns a promise that resolves to the file's completely resolved {String} path.\n         */\n        getRealPath(): string;\n        /**\n         * Return the {String} filename without any directory information.\n         */\n        getBaseName(): void;\n        /**\n         * Return the {Directory} that contains this file.\n         */\n        getParent(): void;\n        /**\n         * Reads the contents of the file.\n         * @param {boolean} A {Boolean} indicating whether to require a direct read or if a cached copy is acceptable.\n         * @returns  Returns a promise that resolves to a String.\n         */\n        read(flushCache: boolean): any;\n        /**\n         * @returns  Returns a stream to read the content of the file.\n         * @returns {ReadStream} Returns a {ReadStream} object.\n         */\n        createReadStream(): ReadStream;\n        /**\n         * Overwrites the file with the given text.\n         * @param {string} The {String} text to write to the underlying file.\n         * @returns {Promise<any>} Returns a {Promise} that resolves when the file has been written.\n         */\n        write(text: string): Promise<any>;\n        /**\n         * @returns  Returns a stream to write content to the file.\n         * @returns {WriteStream} Returns a {WriteStream} object.\n         */\n        createWriteStream(): WriteStream;\n        /**\n         * Overwrites the file with the given text.\n         * @param {string} The {String} text to write to the underlying file.\n         * @returns  Returns .\n         */\n        writeSync(text: string): any;\n    }\n\n    /**\n     * Represents the underlying git operations performed by Atom.\n     *\n     * This class shouldn't be instantiated directly but instead by accessing the\n     * `atom.project` global and calling `getRepositories()`. Note that this will\n     * only be available when the project is backed by a Git repository.\n     *\n     * This class handles submodules automatically by taking a `path` argument to many\n     * of the methods.  This `path` argument will determine which underlying\n     * repository is used.\n     *\n     * For a repository with submodules this would have the following outcome:\n     *\n     * ```coffee\n     * repo = atom.project.getRepositories()[0]\n     * repo.getShortHead() # 'master'\n     * repo.getShortHead('vendor/path/to/a/submodule') # 'dead1234'\n     * ```\n     *\n     * file: src/git-repository.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/git-repository.coffee#L44\n     */\n    class GitRepository {\n        /**\n         * Creates a new GitRepository instance.\n         * @param {string} The {String} path to the Git repository to open.\n         * @param {Object} An optional {Object} with the following keys:\n         * @returns {GitRepository} Returns a {GitRepository} instance or `null` if the repository could not be opened.\n         */\n        static open(path: string, options: Object): GitRepository;\n\n        /**\n         * Destroy this {GitRepository} object.\n         *\n         * This destroys any tasks and subscriptions and releases the underlying\n         * libgit2 repository handle. This method is idempotent.\n         */\n        destroy(): void;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating if this repository has been destroyed.\n         */\n        isDestroyed(): boolean;\n        /**\n         * Invoke the given callback when this GitRepository's destroy() method\n         * is invoked.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a specific file's status has\n         * changed. When a file is updated, reloaded, etc, and the status changes, this\n         * will be fired.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeStatus(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a multiple files' statuses have\n         * changed. For example, on window focus, the status of all the paths in the\n         * repo is checked. If any of them have changed, this will be fired. Call\n         * {::getPathStatus(path)} to get the status for your path of choice.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeStatuses(callback: Function): Disposable;\n        /**\n         * A {String} indicating the type of version control system used by\n         * this repository.\n         * @returns  Returns `\"git\"`.\n         */\n        getType(): any;\n        /**\n         * @returns {string} Returns the {String} path of the repository.\n         */\n        getPath(): string;\n        /**\n         * @returns {string} Returns the {String} working directory path of the repository.\n         */\n        getWorkingDirectory(): string;\n        /**\n         * @returns  Returns true if at the root, false if in a subfolder of the\n        repository.\n         */\n        isProjectAtRoot(): any;\n        /**\n         * Makes a path relative to the repository's working directory.\n         */\n        relativize(): void;\n        /**\n         * @returns  Returns true if the given branch exists.\n         */\n        hasBranch(): any;\n        /**\n         * Retrieves a shortened version of the HEAD reference value.\n         *\n         * This removes the leading segments of `refs/heads`, `refs/tags`, or\n         * `refs/remotes`.  It also shortens the SHA-1 of a detached `HEAD` to 7\n         * characters.\n         * @param {string} An optional {String} path in the repository to get this information for, only needed if the repository contains submodules.\n         * @returns {string} Returns a {String}.\n         */\n        getShortHead(path: string): string;\n        /**\n         * Is the given path a submodule in the repository?\n         * @param {string} The {String} path to check.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isSubmodule(path: string): boolean;\n        /**\n         * @param {string} The {String} branch reference name.\n         * @param {string} The {String} path in the repository to get this information for, only needed if the repository contains submodules.\n         * @returns  Returns the number of commits behind the current branch is from the\n        its upstream remote branch.\n         */\n        getAheadBehindCount(reference: string, path: string): any;\n        /**\n         * Get the cached ahead/behind commit counts for the current branch's\n         * upstream branch.\n         * @param {string} An optional {String} path in the repository to get this information for, only needed if the repository has submodules.\n         * @returns {Object} Returns an {Object} with the following keys:\n\n        * `ahead`  The {Number} of commits ahead.\n        * `behind` The {Number} of commits behind.\n         */\n        getCachedUpstreamAheadBehindCount(path: string): Object;\n        /**\n         * @param {string} The {String} key for the configuration to lookup.\n         * @param {string} An optional {String} path in the repository to get this information for, only needed if the repository has submodules.\n         * @returns  Returns the git configuration value specified by the key.\n         */\n        getConfigValue(key: string, path: string): any;\n        /**\n         * @param {string} {String} path in the repository to get this information for, only needed if the repository has submodules.\n         * @returns  Returns the origin url of the repository.\n         */\n        getOriginURL(path?: string): any;\n        /**\n         * @param {string} An optional {String} path in the repo to get this information for, only needed if the repository contains submodules.\n         * @returns  Returns the upstream branch for the current HEAD, or null if there\n        is no upstream branch for the current HEAD.\n         * @returns {string} Returns a {String} branch name such as `refs/remotes/origin/master`.\n         */\n        getUpstreamBranch(path: string): string;\n        /**\n         * Gets all the local and remote references.\n         * @param {string} An optional {String} path in the repository to get this information for, only needed if the repository has submodules.\n         * @returns {Object} Returns an {Object} with the following keys:\n\n        * `heads`   An {Array} of head reference names.\n        * `remotes` An {Array} of remote reference names.\n        * `tags`    An {Array} of tag reference names.\n         */\n        getReferences(path: string): Object;\n        /**\n         * @param {string} The {String} reference to get the target of.\n         * @param {string} An optional {String} path in the repo to get the reference target for. Only needed if the repository contains submodules.\n         * @returns {string} Returns the current {String} SHA for the given reference.\n         */\n        getReferenceTarget(reference: string, path: string): string;\n        /**\n         * @param {string} The {String} path to check.\n         * @returns  Returns true if the given path is modified.\n         * @returns {boolean} Returns a {Boolean} that's true if the `path` is modified.\n         */\n        isPathModified(path: string): boolean;\n        /**\n         * @param {string} The {String} path to check.\n         * @returns  Returns true if the given path is new.\n         * @returns {boolean} Returns a {Boolean} that's true if the `path` is new.\n         */\n        isPathNew(path: string): boolean;\n        /**\n         * Is the given path ignored?\n         * @param {string} The {String} path to check.\n         * @returns {boolean} Returns a {Boolean} that's true if the `path` is ignored.\n         */\n        isPathIgnored(path: string): boolean;\n        /**\n         * Get the status of a directory in the repository's working directory.\n         * @param {string} The {String} path to check.\n         * @returns {number} Returns a {Number} representing the status. This value can be passed to\n        {::isStatusModified} or {::isStatusNew} to get more information.\n         */\n        getDirectoryStatus(path: string): number;\n        /**\n         * Get the status of a single path in the repository.\n         * @param {string} A {String} repository-relative path.\n         * @returns {number} Returns a {Number} representing the status. This value can be passed to\n        {::isStatusModified} or {::isStatusNew} to get more information.\n         */\n        getPathStatus(path: string): number;\n        /**\n         * Get the cached status for the given path.\n         * @param {string} A {String} path in the repository, relative or absolute.\n         * @returns {number} Returns a status {Number} or null if the path is not in the cache.\n         */\n        getCachedPathStatus(path: string): number;\n        /**\n         * @param {number} A {Number} representing the status.\n         * @returns  Returns true if the given status indicates modification.\n         * @returns {boolean} Returns a {Boolean} that's true if the `status` indicates modification.\n         */\n        isStatusModified(status: number): boolean;\n        /**\n         * @param {number} A {Number} representing the status.\n         * @returns  Returns true if the given status indicates a new path.\n         * @returns {boolean} Returns a {Boolean} that's true if the `status` indicates a new path.\n         */\n        isStatusNew(status: number): boolean;\n        /**\n         * Retrieves the number of lines added and removed to a path.\n         *\n         * This compares the working directory contents of the path to the `HEAD`\n         * version.\n         * @param {string} The {String} path to check.\n         * @returns {Object} Returns an {Object} with the following keys:\n\n        * `added` The {Number} of added lines.\n        * `deleted` The {Number} of deleted lines.\n         */\n        getDiffStats(path: string): Object;\n        /**\n         * Retrieves the line diffs comparing the `HEAD` version of the given\n         * path and the given text.\n         * @param {string} The {String} path relative to the repository.\n         * @param {string} The {String} to compare against the `HEAD` contents\n         * @returns {any[]} Returns an {Array} of hunk {Object}s with the following keys:\n\n        * `oldStart` The line {Number} of the old hunk.\n        * `newStart` The line {Number} of the new hunk.\n        * `oldLines` The {Number} of lines in the old hunk.\n        * `newLines` The {Number} of lines in the new hunk\n         */\n        getLineDiffs(path: string, text: string): any[];\n        /**\n         * Restore the contents of a path in the working directory and index\n         * to the version at `HEAD`.\n         *\n         * This is essentially the same as running:\n         *\n         * ```sh\n         *   git reset HEAD -- <path>\n         *   git checkout HEAD -- <path>\n         * ```\n         * @param {string} The {String} path to checkout.\n         * @returns {boolean} Returns a {Boolean} that's true if the method was successful.\n         */\n        checkoutHead(path: string): boolean;\n        /**\n         * Checks out a branch in your repository.\n         * @param {string} The {String} reference to checkout.\n         * @param {boolean} A {Boolean} value which, if true creates the new reference if it doesn't exist.\n         * @returns  Returns a Boolean that's true if the method was successful.\n         */\n        checkoutReference(reference: string, create: boolean): any;\n    }\n\n    /**\n     * Grammar that tokenizes lines of text.\n     *\n     * This class should not be instantiated directly but instead obtained from\n     * a {GrammarRegistry} by calling {GrammarRegistry::loadGrammar}.\n     *\n     * file: src/grammar.coffee\n     * srcUrl: https://github.com/atom/first-mate/blob/v6.3.0/src/grammar.coffee#L19\n     */\n    class Grammar {\n        /**\n         * Invoke the given callback when this grammar is updated due to a\n         * grammar it depends on being added or removed from the registry.\n         * @param {Function} {Function} to call when this grammar is updated.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidUpdate(callback: Function): Disposable;\n        /**\n         * Tokenize all lines in the given text.\n         * @param {string} A {String} containing one or more lines.\n         * @returns {any[]} Returns an {Array} of token arrays for each line tokenized.\n         */\n        tokenizeLines(text: string): any[];\n        /**\n         * Tokenize the line of text.\n         * @param {string} A {String} of text to tokenize.\n         * @param {any[]} An optional {Array} of rules previously returned from this method. This should be null when tokenizing the first line in the file.\n         * @param {boolean} A optional {Boolean} denoting whether this is the first line in the file which defaults to `false`. This should be `true` when tokenizing the first line in the file.\n         * @returns {Object} Returns an {Object} containing the following properties:\n\n        * `line` The {String} of text that was tokenized.\n        * `tags` An {Array} of integer scope ids and strings. Positive ids\n          indicate the beginning of a scope, and negative tags indicate the end.\n          To resolve ids to scope names, call {GrammarRegistry::scopeForId} with the\n          absolute value of the id.\n        * `tokens` This is a dynamic property. Invoking it will incur additional\n          overhead, but will automatically translate the `tags` into token objects\n          with `value` and `scopes` properties.\n        * `ruleStack` An {Array} of rules representing the tokenized state at the\n          end of the line. These should be passed back into this method when\n          tokenizing the next line in the file.\n         */\n        tokenizeLine(line: string, ruleStack: any[], firstLine: boolean): Object;\n    }\n\n    /**\n     * Registry containing one or more grammars.\n     *\n     * file: src/grammar-registry.coffee\n     * srcUrl: https://github.com/atom/first-mate/blob/v6.3.0/src/grammar-registry.coffee#L11\n     */\n    class GrammarRegistry {\n        /**\n         * Invoke the given callback when a grammar is added to the registry.\n         * @param {Function} {Function} to call when a grammar is added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddGrammar(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a grammar is updated due to a grammar\n         * it depends on being added or removed from the registry.\n         * @param {Function} {Function} to call when a grammar is updated.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidUpdateGrammar(callback: Function): Disposable;\n        /**\n         * Get all the grammars in this registry.\n         * @returns {any[]} Returns a non-empty {Array} of {Grammar} instances.\n         */\n        getGrammars(): any[];\n        /**\n         * Get a grammar with the given scope name.\n         * @param {string} A {String} such as `\"source.js\"`.\n         * @returns {Grammar} Returns a {Grammar} or .\n         */\n        grammarForScopeName(scopeName: string): Grammar;\n        /**\n         * Add a grammar to this registry.\n         *\n         * A 'grammar-added' event is emitted after the grammar is added.\n         * @param {Grammar} The {Grammar} to add. This should be a value previously returned from {::readGrammar} or {::readGrammarSync}.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        grammar.\n         */\n        addGrammar(grammar: Grammar): Disposable;\n        /**\n         * Remove the grammar with the given scope name.\n         * @param {string} A {String} such as `\"source.js\"`.\n         * @returns {Grammar} Returns the removed {Grammar} or .\n         */\n        removeGrammarForScopeName(scopeName: string): Grammar;\n        /**\n         * Read a grammar synchronously but don't add it to the registry.\n         * @param {string} A {String} absolute file path to a grammar file.\n         * @returns {Grammar} Returns a {Grammar}.\n         */\n        readGrammarSync(grammarPath: string): Grammar;\n        /**\n         * Read a grammar asynchronously but don't add it to the registry.\n         * @param {string} A {String} absolute file path to a grammar file.\n         * @param {Function} A {Function} to call when read with the following arguments:\n         * @returns  Returns .\n         */\n        readGrammar(grammarPath: string, callback: Function): any;\n        /**\n         * Read a grammar synchronously and add it to this registry.\n         * @param {string} A {String} absolute file path to a grammar file.\n         * @returns {Grammar} Returns a {Grammar}.\n         */\n        loadGrammarSync(grammarPath: string): Grammar;\n        /**\n         * Read a grammar asynchronously and add it to the registry.\n         * @param {string} A {String} absolute file path to a grammar file.\n         * @param {Function} A {Function} to call when loaded with the following arguments:\n         * @returns  Returns .\n         */\n        loadGrammar(grammarPath: string, callback: Function): any;\n    }\n\n    /**\n     * Represents a gutter within a {TextEditor}.\n     *\n     * See {TextEditor::addGutter} for information on creating a gutter.\n     *\n     * file: src/gutter.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/gutter.coffee#L9\n     */\n    class Gutter {\n        /**\n         * Destroys the gutter.\n         */\n        destroy(): void;\n        /**\n         * Calls your `callback` when the gutter's visibility changes.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeVisible(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the gutter is destroyed.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * Hide the gutter.\n         */\n        hide(): void;\n        /**\n         * Show the gutter.\n         */\n        show(): void;\n        /**\n         * Determine whether the gutter is visible.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isVisible(): boolean;\n        /**\n         * Add a decoration that tracks a {DisplayMarker}. When the marker moves,\n         * is invalidated, or is destroyed, the decoration will be updated to reflect\n         * the marker's state.\n         * @param {DisplayMarker} A {DisplayMarker} you want this decoration to follow.\n         * @param {Object} An {Object} representing the decoration. It is passed to {TextEditor::decorateMarker} as its `decorationParams` and so supports all options documented there.\n         * @returns {Decoration} Returns a {Decoration} object\n         */\n        decorateMarker(marker: DisplayMarker, decorationParams: Object): Decoration;\n    }\n\n    /**\n     * History manager for remembering which projects have been opened.\n     *\n     * An instance of this class is always available as the `atom.history` global.\n     *\n     * The project history is used to enable the 'Reopen Project' menu.\n     *\n     * file: src/history-manager.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/history-manager.js#L10\n     */\n    class HistoryManager {\n        /**\n         * Obtain a list of previously opened projects.\n         * @returns {any[]} Returns an {Array} of {HistoryProject} objects, most recent first.\n         */\n        getProjects(): any[];\n        /**\n         * Clear all projects from the history.\n         *\n         * Note: This is not a privacy function - other traces will still exist,\n         * e.g. window state.\n         */\n        clearProjects(): void;\n        /**\n         * Invoke the given callback when the list of projects changes.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeProjects(callback: Function): Disposable;\n    }\n\n    /**\n     * Allows commands to be associated with keystrokes in a\n     * context-sensitive way. In Atom, you can access a global instance of this\n     * object via `atom.keymaps`.\n     *\n     * Key bindings are plain JavaScript objects containing **CSS selectors** as\n     * their top level keys, then **keystroke patterns** mapped to commands.\n     *\n     * ```cson\n     * '.workspace':\n     *   'ctrl-l': 'package:do-something'\n     *   'ctrl-z': 'package:do-something-else'\n     * '.mini.editor':\n     *   'enter': 'core:confirm'\n     * ```\n     *\n     * When a keystroke sequence matches a binding in a given context, a custom DOM\n     * event with a type based on the command is dispatched on the target of the\n     * keyboard event.\n     *\n     * To match a keystroke sequence, the keymap starts at the target element for the\n     * keyboard event. It looks for key bindings associated with selectors that match\n     * the target element. If multiple match, the most specific is selected. If there\n     * is a tie in specificity, the most recently added binding wins. If no bindings\n     * are found for the events target, the search is repeated again for the target's\n     * parent node and so on recursively until a binding is found or we traverse off\n     * the top of the document.\n     *\n     * When a binding is found, its command event is always dispatched on the\n     * original target of the keyboard event, even if the matching element is higher\n     * up in the DOM. In addition, `.preventDefault()` is called on the keyboard\n     * event to prevent the browser from taking action. `.preventDefault` is only\n     * called if a matching binding is found.\n     *\n     * Command event objects have a non-standard method called `.abortKeyBinding()`.\n     * If your command handler is invoked but you programmatically determine that no\n     * action can be taken and you want to allow other bindings to be matched, call\n     * `.abortKeyBinding()` on the event object. An example of where this is useful\n     * is binding snippet expansion to `tab`. If `snippets:expand` is invoked when\n     * the cursor does not follow a valid snippet prefix, we abort the binding and\n     * allow `tab` to be handled by the default handler, which inserts whitespace.\n     *\n     * Multi-keystroke bindings are possible. If a sequence of one or more keystrokes\n     * *partially* matches a multi-keystroke binding, the keymap enters a pending\n     * state. The pending state is terminated on the next keystroke, or after\n     * {::partialMatchTimeout} milliseconds has elapsed. When the pending state is\n     * terminated via a timeout or a keystroke that leads to no matches, the longest\n     * ambiguous bindings that caused the pending state are temporarily disabled and\n     * the previous keystrokes are replayed. If there is ambiguity again during the\n     * replay, the next longest bindings are disabled and the keystrokes are replayed\n     * again.\n     *\n     * file: src/keymap-manager.coffee\n     * srcUrl: https://github.com/atom/atom-keymap/blob/v7.1.20/src/keymap-manager.coffee#L66\n     */\n    class KeymapManager {\n        /**\n         * Create a keydown DOM event for testing purposes.\n         * @param  The key or keyIdentifier of the event. For example, `'a'`, `'1'`, `'escape'`, `'backspace'`, etc.\n         * @param {Object} An {Object} containing any of the following:\n         */\n        static buildKeydownEvent(key: any, options?: Object): void;\n\n        /**\n         * Create a new KeymapManager.\n         * @param {Object} An {Object} containing properties to assign to the keymap.  You can pass custom properties to be used by extension methods. The following properties are also supported:\n         */\n        constructor(options: Object);\n        /**\n         * Clear all registered key bindings and enqueued keystrokes. For use\n         * in tests.\n         */\n        clear(): void;\n        /**\n         * Unwatch all watched paths.\n         */\n        destroy(): void;\n        /**\n         * Invoke the given callback when one or more keystrokes completely\n         * match a key binding.\n         * @param {Function} {Function} to be called when keystrokes match a binding.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidMatchBinding(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when one or more keystrokes partially\n         * match a binding.\n         * @param {Function} {Function} to be called when keystrokes partially match a binding.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidPartiallyMatchBindings(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when one or more keystrokes fail to match\n         * any bindings.\n         * @param {Function} {Function} to be called when keystrokes fail to match any bindings.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidFailToMatchBinding(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a keymap file not able to be loaded.\n         * @param {Function} {Function} to be called when a keymap file is unloaded.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidFailToReadFile(callback: Function): Disposable;\n        /**\n         * Add sets of key bindings grouped by CSS selector.\n         * @param {string} A {String} (usually a path) uniquely identifying the given bindings so they can be removed later.\n         * @param {Object} An {Object} whose top-level keys point at sub-objects mapping keystroke patterns to commands.\n         * @param {number} A {Number} used to sort keybindings which have the same specificity. Defaults to `0`.\n         */\n        add(source: string, bindings: Object, priority: number): void;\n        /**\n         * Get all current key bindings.\n         * @returns {any[]} Returns an {Array} of {KeyBinding}s.\n         */\n        getKeyBindings(): any[];\n        /**\n         * Get the key bindings for a given command and optional target.\n         * @param {Object} An {Object} whose keys constrain the binding search:\n         * @returns {any[]} Returns an {Array} of key bindings.\n         */\n        findKeyBindings(params: Object): any[];\n        /**\n         * Load the key bindings from the given path.\n         * @param {string} A {String} containing a path to a file or a directory. If the path is a directory, all files inside it will be loaded.\n         * @param {Object} An {Object} containing the following optional keys:\n         */\n        loadKeymap(path: string, options: Object): void;\n        /**\n         * Cause the keymap to reload the key bindings file at the given path\n         * whenever it changes.\n         *\n         * This method doesn't perform the initial load of the key bindings file. If\n         * that's what you're looking for, call {::loadKeymap} with `watch: true`.\n         * @param {string} A {String} containing a path to a file or a directory. If the path is a directory, all files inside it will be loaded.\n         * @param {Object} An {Object} containing the following optional keys:\n         */\n        watchKeymap(path: string, options: Object): void;\n        /**\n         * Dispatch a custom event associated with the matching key binding for\n         * the given `KeyboardEvent` if one can be found.\n         *\n         * If a matching binding is found on the event's target or one of its\n         * ancestors, `.preventDefault()` is called on the keyboard event and the\n         * binding's command is emitted as a custom event on the matching element.\n         *\n         * If the matching binding's command is 'native!', the method will terminate\n         * without calling `.preventDefault()` on the keyboard event, allowing the\n         * browser to handle it as normal.\n         *\n         * If the matching binding's command is 'unset!', the search will continue from\n         * the current element's parent.\n         *\n         * If the matching binding's command is 'abort!', the search will terminate\n         * without dispatching a command event.\n         *\n         * If the event's target is `document.body`, it will be treated as if its\n         * target is `.defaultTarget` if that property is assigned on the keymap.\n         * @param  A `KeyboardEvent` of type 'keydown'\n         */\n        handleKeyboardEvent(event: any): void;\n        /**\n         * Translate a keydown event to a keystroke string.\n         * @param  A `KeyboardEvent` of type 'keydown'\n         * @returns {string} Returns a {String} describing the keystroke.\n         */\n        keystrokeForKeyboardEvent(event: any): string;\n        /**\n         * Customize translation of raw keyboard events to keystroke strings.\n         * This API is useful for working around Chrome bugs or changing how Atom\n         * resolves certain key combinations. If multiple resolvers are installed,\n         * the most recently-added resolver returning a string for a given keystroke\n         * takes precedence.\n         * @param {Function} A {Function} that returns a keystroke {String} and is called  with an object containing the following keys:\n         * @returns {Disposable} Returns a {Disposable} that removes the added resolver.\n         */\n        addKeystrokeResolver(resolver: Function): Disposable;\n        /**\n         * Get the number of milliseconds allowed before pending states caused\n         * by partial matches of multi-keystroke bindings are terminated.\n         * @returns {number} Returns a {Number}\n         */\n        getPartialMatchTimeout(): number;\n    }\n\n    /**\n     * Represents a decoration that applies to every marker on a given\n     * layer. Created via {TextEditor::decorateMarkerLayer}.\n     *\n     * file: src/layer-decoration.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/layer-decoration.coffee#L7\n     */\n    class LayerDecoration {\n        /**\n         * Destroys the decoration.\n         */\n        destroy(): void;\n        /**\n         * Determine whether this decoration is destroyed.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isDestroyed(): boolean;\n        /**\n         * Get this decoration's properties.\n         * @returns {Object} Returns an {Object}.\n         */\n        getProperties(): Object;\n        /**\n         * Set this decoration's properties.\n         * @param  See {TextEditor::decorateMarker} for more information on the properties. The `type` of `gutter` and `overlay` are not supported on layer decorations.\n         */\n        setProperties(newProperties: any): void;\n        /**\n         * Override the decoration properties for a specific marker.\n         * @param {DisplayMarker} The {DisplayMarker} or {Marker} for which to override properties.\n         * @param {Object} An {Object} containing properties to apply to this marker. Pass `null` to clear the override.\n         */\n        setPropertiesForMarker(marker: DisplayMarker, properties: Object): void;\n    }\n\n    /**\n     * *Experimental:* A container for a related set of markers.\n     *\n     * This API is experimental and subject to change on any release.\n     *\n     * file: src/marker-layer.coffee\n     * srcUrl: https://github.com/atom/text-buffer/blob/v10.3.12/src/marker-layer.coffee#L15\n     */\n    class MarkerLayer {\n        /**\n         * Create a copy of this layer with markers in the same state and\n         * locations.\n         */\n        copy(): void;\n        /**\n         * Destroy this layer.\n         */\n        destroy(): void;\n        /**\n         * Remove all markers from this layer.\n         */\n        clear(): void;\n        /**\n         * Determine whether this layer has been destroyed.\n         */\n        isDestroyed(): void;\n        /**\n         * Get an existing marker by its id.\n         * @returns {Marker} Returns a {Marker}.\n         */\n        getMarker(): Marker;\n        /**\n         * Get all existing markers on the marker layer.\n         * @returns {any[]} Returns an {Array} of {Marker}s.\n         */\n        getMarkers(): any[];\n        /**\n         * Get the number of markers in the marker layer.\n         * @returns {number} Returns a {Number}.\n         */\n        getMarkerCount(): number;\n        /**\n         * Find markers in the layer conforming to the given parameters.\n         *\n         * See the documentation for {TextBuffer::findMarkers}.\n         */\n        findMarkers(): void;\n        /**\n         * Create a marker with the given range.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.\n         * @returns {Marker} Returns a {Marker}.\n         */\n        markRange(range: Range, options: any): Marker;\n        /**\n         * Create a marker at with its head at the given position with no tail.\n         * @param {Point} {Point} or point-compatible {Array}\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Marker} Returns a {Marker}.\n         */\n        markPosition(position: Point, options?: Object): Marker;\n        /**\n         * Subscribe to be notified asynchronously whenever markers are\n         * created, updated, or destroyed on this layer. *Prefer this method for\n         * optimal performance when interacting with layers that could contain large\n         * numbers of markers.*\n         *\n         * Subscribers are notified once, asynchronously when any number of changes\n         * occur in a given tick of the event loop. You should re-query the layer\n         * to determine the state of markers in which you're interested in. It may\n         * be counter-intuitive, but this is much more efficient than subscribing to\n         * events on individual markers, which are expensive to deliver.\n         * @param {Function} A {Function} that will be called with no arguments when changes occur on this layer.\n         * @returns {Disposable} Returns a {Disposable}.\n         */\n        onDidUpdate(callback: Function): Disposable;\n        /**\n         * Subscribe to be notified synchronously whenever markers are created\n         * on this layer. *Avoid this method for optimal performance when interacting\n         * with layers that could contain large numbers of markers.*\n         *\n         * You should prefer {onDidUpdate} when synchronous notifications aren't\n         * absolutely necessary.\n         * @param {Function} A {Function} that will be called with a {Marker} whenever a new marker is created.\n         * @returns {Disposable} Returns a {Disposable}.\n         */\n        onDidCreateMarker(callback: Function): Disposable;\n        /**\n         * Subscribe to be notified synchronously when this layer is destroyed.\n         * @returns {Disposable} Returns a {Disposable}.\n         */\n        onDidDestroy(): Disposable;\n    }\n\n    /**\n     * Provides a registry for menu items that you'd like to appear in the\n     * application menu.\n     *\n     * An instance of this class is always available as the `atom.menu` global.\n     *\n     * ## Menu CSON Format\n     *\n     * Here is an example from the [tree-view](https://github.com/atom/tree-view/blob/master/menus/tree-view.cson):\n     *\n     * ```coffee\n     * [\n     *   {\n     *     'label': 'View'\n     *     'submenu': [\n     *       { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' }\n     *     ]\n     *   }\n     *   {\n     *     'label': 'Packages'\n     *     'submenu': [\n     *       'label': 'Tree View'\n     *       'submenu': [\n     *         { 'label': 'Focus', 'command': 'tree-view:toggle-focus' }\n     *         { 'label': 'Toggle', 'command': 'tree-view:toggle' }\n     *         { 'label': 'Reveal Active File', 'command': 'tree-view:reveal-active-file' }\n     *         { 'label': 'Toggle Tree Side', 'command': 'tree-view:toggle-side' }\n     *       ]\n     *     ]\n     *   }\n     * ]\n     * ```\n     *\n     * Use in your package's menu `.cson` file requires that you place your menu\n     * structure under a `menu` key.\n     *\n     * ```coffee\n     * 'menu': [\n     *   {\n     *     'label': 'View'\n     *     'submenu': [\n     *       { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' }\n     *     ]\n     *   }\n     * ]\n     * ```\n     *\n     * See {::add} for more info about adding menu's directly.\n     *\n     * file: src/menu-manager.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/menu-manager.coffee#L61\n     */\n    class MenuManager {\n        /**\n         * Adds the given items to the application menu.\n         * @param {any[]} An {Array} of menu item {Object}s containing the keys:\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        added menu items.\n         */\n        add(items: any[]): Disposable;\n        /**\n         * Refreshes the currently visible menu.\n         */\n        update(): void;\n    }\n\n    /**\n     * A notification to the user containing a message and type.\n     *\n     * file: src/notification.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/notification.coffee#L6\n     */\n    class Notification {\n        /**\n         * Invoke the given callback when the notification is dismissed.\n         * @param {Function} {Function} to be called when the notification is dismissed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDismiss(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the notification is displayed.\n         * @param {Function} {Function} to be called when the notification is displayed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDisplay(callback: Function): Disposable;\n        /**\n         * @returns {string} Returns the {String} type.\n         */\n        getType(): string;\n        /**\n         * @returns {string} Returns the {String} message.\n         */\n        getMessage(): string;\n        /**\n         * Dismisses the notification, removing it from the UI. Calling this programmatically\n         * will call all callbacks added via `onDidDismiss`.\n         */\n        dismiss(): void;\n    }\n\n    /**\n     * A notification manager used to create {Notification}s to be shown\n     * to the user.\n     *\n     * An instance of this class is always available as the `atom.notifications`\n     * global.\n     *\n     * file: src/notification-manager.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/notification-manager.coffee#L10\n     */\n    class NotificationManager {\n        /**\n         * Invoke the given callback after a notification has been added.\n         * @param {Function} {Function} to be called after the notification is added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddNotification(callback: Function): Disposable;\n        /**\n         * Add a success notification.\n         * @param {string} A {String} message\n         * @param {Object} An options {Object} with the following keys:\n         */\n        addSuccess(message: string, options?: Object): void;\n        /**\n         * Add an informational notification.\n         * @param {string} A {String} message\n         * @param {Object} An options {Object} with the following keys:\n         */\n        addInfo(message: string, options?: Object): void;\n        /**\n         * Add a warning notification.\n         * @param {string} A {String} message\n         * @param {Object} An options {Object} with the following keys:\n         */\n        addWarning(message: string, options?: Object): void;\n        /**\n         * Add an error notification.\n         * @param {string} A {String} message\n         * @param {Object} An options {Object} with the following keys:\n         */\n        addError(message: string, options?: Object): void;\n        /**\n         * Add a fatal error notification.\n         * @param {string} A {String} message\n         * @param {Object} An options {Object} with the following keys:\n         */\n        addFatalError(message: string, options?: Object): void;\n        /**\n         * Get all the notifications.\n         * @returns {any[]} Returns an {Array} of {Notification}s.\n         */\n        getNotifications(): any[];\n    }\n\n    /**\n     * Loads and activates a package's main module and resources such as\n     * stylesheets, keymaps, grammar, editor properties, and menus.\n     *\n     * file: src/package.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/package.coffee#L17\n     */\n    class Package {\n        /**\n         * Invoke the given callback when all packages have been activated.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDeactivate(callback: Function): Disposable;\n        /**\n         * Are all native modules depended on by this package correctly\n         * compiled against the current version of Atom?\n         *\n         * Incompatible packages cannot be activated.\n         * @returns {boolean} Returns a {Boolean}, true if compatible, false if incompatible.\n         */\n        isCompatible(): boolean;\n        /**\n         * Rebuild native modules in this package's dependencies for the\n         * current version of Atom.\n         * @returns {Promise<any>} Returns a {Promise} that resolves with an object containing `code`,\n        `stdout`, and `stderr` properties based on the results of running\n        `apm rebuild` on the package.\n         */\n        rebuild(): Promise<any>;\n        /**\n         * If a previous rebuild failed, get the contents of stderr.\n         * @returns {string} Returns a {String} or null if no previous build failure occurred.\n         */\n        getBuildFailureOutput(): string;\n    }\n\n    /**\n     * Package manager for coordinating the lifecycle of Atom packages.\n     *\n     * An instance of this class is always available as the `atom.packages` global.\n     *\n     * Packages can be loaded, activated, and deactivated, and unloaded:\n     *\n     * * Loading a package reads and parses the package's metadata and resources\n     *   such as keymaps, menus, stylesheets, etc.\n     * * Activating a package registers the loaded resources and calls `activate()`\n     *   on the package's main module.\n     * * Deactivating a package unregisters the package's resources  and calls\n     *   `deactivate()` on the package's main module.\n     * * Unloading a package removes it completely from the package manager.\n     *\n     * Packages can be enabled/disabled via the `core.disabledPackages` config\n     * settings and also by calling `enablePackage()/disablePackage()`.\n     *\n     * file: src/package-manager.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/package-manager.coffee#L30\n     */\n    class PackageManager {\n        /**\n         * Invoke the given callback when all packages have been loaded.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidLoadInitialPackages(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when all packages have been activated.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidActivateInitialPackages(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a package is activated.\n         * @param {Function} A {Function} to be invoked when a package is activated.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidActivatePackage(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a package is deactivated.\n         * @param {Function} A {Function} to be invoked when a package is deactivated.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDeactivatePackage(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a package is loaded.\n         * @param {Function} A {Function} to be invoked when a package is loaded.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidLoadPackage(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a package is unloaded.\n         * @param {Function} A {Function} to be invoked when a package is unloaded.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidUnloadPackage(callback: Function): Disposable;\n        /**\n         * Get the path to the apm command.\n         *\n         * Uses the value of the `core.apmPath` config setting if it exists.\n         *\n         * Return a {String} file path to apm.\n         */\n        getApmPath(): void;\n        /**\n         * Get the paths being used to look for packages.\n         * @returns {any[]} Returns an {Array} of {String} directory paths.\n         */\n        getPackageDirPaths(): any[];\n        /**\n         * Resolve the given package name to a path on disk.\n         *\n         * Return a {String} folder path or undefined if it could not be resolved.\n         * @param {string} The {String} package name.\n         */\n        resolvePackagePath(name: string): void;\n        /**\n         * Is the package with the given name bundled with Atom?\n         * @param {string} The {String} package name.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isBundledPackage(name: string): boolean;\n        /**\n         * Enable the package with the given name.\n         * @param {string} The {String} package name.\n         * @returns {Package} Returns the {Package} that was enabled or null if it isn't loaded.\n         */\n        enablePackage(name: string): Package;\n        /**\n         * Disable the package with the given name.\n         * @param {string} The {String} package name.\n         * @returns {Package} Returns the {Package} that was disabled or null if it isn't loaded.\n         */\n        disablePackage(name: string): Package;\n        /**\n         * Is the package with the given name disabled?\n         * @param {string} The {String} package name.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isPackageDisabled(name: string): boolean;\n        /**\n         * Get an {Array} of all the active {Package}s.\n         */\n        getActivePackages(): void;\n        /**\n         * Get the active {Package} with the given name.\n         * @param {string} The {String} package name.\n         * @returns {Package} Returns a {Package} or .\n         */\n        getActivePackage(name: string): Package;\n        /**\n         * Is the {Package} with the given name active?\n         * @param {string} The {String} package name.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isPackageActive(name: string): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether package activation has occurred.\n         */\n        hasActivatedInitialPackages(): boolean;\n        /**\n         * Get an {Array} of all the loaded {Package}s\n         */\n        getLoadedPackages(): void;\n        /**\n         * Get the loaded {Package} with the given name.\n         * @param {string} The {String} package name.\n         * @returns {Package} Returns a {Package} or .\n         */\n        getLoadedPackage(name: string): Package;\n        /**\n         * Is the package with the given name loaded?\n         * @param {string} The {String} package name.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isPackageLoaded(name: string): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether package loading has occurred.\n         */\n        hasLoadedInitialPackages(): boolean;\n        /**\n         * @returns {any[]} Returns an {Array} of {String}s of all the available package paths.\n         */\n        getAvailablePackagePaths(): any[];\n        /**\n         * @returns {any[]} Returns an {Array} of {String}s of all the available package names.\n         */\n        getAvailablePackageNames(): any[];\n        /**\n         * @returns {any[]} Returns an {Array} of {String}s of all the available package metadata.\n         */\n        getAvailablePackageMetadata(): any[];\n    }\n\n    /**\n     * A container for presenting content in the center of the workspace.\n     * Panes can contain multiple items, one of which is *active* at a given time.\n     * The view corresponding to the active item is displayed in the interface. In\n     * the default configuration, tabs are also displayed for each item.\n     *\n     * Each pane may also contain one *pending* item. When a pending item is added\n     * to a pane, it will replace the currently pending item, if any, instead of\n     * simply being added. In the default configuration, the text in the tab for\n     * pending items is shown in italics.\n     *\n     * file: src/pane.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/pane.coffee#L18\n     */\n    class Pane {\n        /**\n         * Invoke the given callback when the pane resizes\n         *\n         * The callback will be invoked when pane's flexScale property changes.\n         * Use {::getFlexScale} to get the current value.\n         * @param {Function} {Function} to be called when the pane is resized\n         * @returns {Disposable} Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.\n         */\n        onDidChangeFlexScale(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with the current and future values of\n         * {::getFlexScale}.\n         * @param {Function} {Function} to be called with the current and future values of the {::getFlexScale} property.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeFlexScale(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the pane is activated.\n         *\n         * The given callback will be invoked whenever {::activate} is called on the\n         * pane, even if it is already active at the time.\n         * @param {Function} {Function} to be called when the pane is activated.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidActivate(callback: Function): Disposable;\n        /**\n         * Invoke the given callback before the pane is destroyed.\n         * @param {Function} {Function} to be called before the pane is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillDestroy(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the pane is destroyed.\n         * @param {Function} {Function} to be called when the pane is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the value of the {::isActive}\n         * property changes.\n         * @param {Function} {Function} to be called when the value of the {::isActive} property changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeActive(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with the current and future values of the\n         * {::isActive} property.\n         * @param {Function} {Function} to be called with the current and future values of the {::isActive} property.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeActive(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when an item is added to the pane.\n         * @param {Function} {Function} to be called with when items are added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when an item is removed from the pane.\n         * @param {Function} {Function} to be called with when items are removed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidRemoveItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback before an item is removed from the pane.\n         * @param {Function} {Function} to be called with when items are removed.\n         */\n        onWillRemoveItem(callback: Function): void;\n        /**\n         * Invoke the given callback when an item is moved within the pane.\n         * @param {Function} {Function} to be called with when items are moved.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidMoveItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with all current and future items.\n         * @param {Function} {Function} to be called with current and future items.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeItems(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the value of {::getActiveItem}\n         * changes.\n         * @param {Function} {Function} to be called with when the active item changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeActiveItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when {::activateNextRecentlyUsedItem}\n         * has been called, either initiating or continuing a forward MRU traversal of\n         * pane items.\n         * @param {Function} {Function} to be called with when the active item changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onChooseNextMRUItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when {::activatePreviousRecentlyUsedItem}\n         * has been called, either initiating or continuing a reverse MRU traversal of\n         * pane items.\n         * @param {Function} {Function} to be called with when the active item changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onChooseLastMRUItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when {::moveActiveItemToTopOfStack}\n         * has been called, terminating an MRU traversal of pane items and moving the\n         * current active item to the top of the stack. Typically bound to a modifier\n         * (e.g. CTRL) key up event.\n         * @param {Function} {Function} to be called with when the MRU traversal is done.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDoneChoosingMRUItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with the current and future values of\n         * {::getActiveItem}.\n         * @param {Function} {Function} to be called with the current and future active items.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeActiveItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback before items are destroyed.\n         * @param {Function} {Function} to be called before items are destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to\n        unsubscribe.\n         */\n        onWillDestroyItem(callback: Function): Disposable;\n        /**\n         * Get the items in this pane.\n         * @returns {any[]} Returns an {Array} of items.\n         */\n        getItems(): any[];\n        /**\n         * Get the active pane item in this pane.\n         * @returns  Returns a pane item.\n         */\n        getActiveItem(): any;\n        /**\n         * Return the item at the given index.\n         * @param {number} {Number}\n         * @returns  Returns an item or `null` if no item exists at the given index.\n         */\n        itemAtIndex(index: number): any;\n        /**\n         * Makes the next item active.\n         */\n        activateNextItem(): void;\n        /**\n         * Makes the previous item active.\n         */\n        activatePreviousItem(): void;\n        /**\n         * Move the active tab to the right.\n         */\n        moveItemRight(): void;\n        /**\n         * Move the active tab to the left\n         */\n        moveItemLeft(): void;\n        /**\n         * Get the index of the active item.\n         * @returns {number} Returns a {Number}.\n         */\n        getActiveItemIndex(): number;\n        /**\n         * Activate the item at the given index.\n         * @param {number} {Number}\n         */\n        activateItemAtIndex(index: number): void;\n        /**\n         * Make the given item *active*, causing it to be displayed by\n         * the pane's view.\n         * @param {Object} {Object}\n         */\n        activateItem(options?: Object): void;\n        /**\n         * Add the given item to the pane.\n         * @param  The item to add. It can be a model with an associated view or a view.\n         * @param {Object} {Object}\n         * @returns  Returns the added item.\n         */\n        addItem(item: any, options?: Object): any;\n        /**\n         * Add the given items to the pane.\n         * @param {any[]} An {Array} of items to add. Items can be views or models with associated views. Any objects that are already present in the pane's current items will not be added again.\n         * @param {number} {Number} index at which to add the items. If omitted, the item is #   added after the current active item.\n         * @returns {any[]} Returns an {Array} of added items.\n         */\n        addItems(items: any[], index?: number): any[];\n        /**\n         * Move the given item to the given index.\n         * @param  The item to move.\n         * @param {number} {Number} indicating the index to which to move the item.\n         */\n        moveItem(item: any, index: number): void;\n        /**\n         * Move the given item to the given index on another pane.\n         * @param  The item to move.\n         * @param {Pane} {Pane} to which to move the item.\n         * @param {number} {Number} indicating the index to which to move the item in the given pane.\n         */\n        moveItemToPane(item: any, pane: Pane, index: number): void;\n        /**\n         * Destroy the active item and activate the next item.\n         */\n        destroyActiveItem(): void;\n        /**\n         * Destroy the given item.\n         *\n         * If the item is active, the next item will be activated. If the item is the\n         * last item, the pane will be destroyed if the `core.destroyEmptyPanes` config\n         * setting is `true`.\n         * @param  Item to destroy\n         */\n        destroyItem(item: any): void;\n        /**\n         * Destroy all items.\n         */\n        destroyItems(): void;\n        /**\n         * Destroy all items except for the active item.\n         */\n        destroyInactiveItems(): void;\n        /**\n         * Save the active item.\n         */\n        saveActiveItem(): void;\n        /**\n         * Prompt the user for a location and save the active item with the\n         * path they select.\n         * @param {Function} {Function} which will be called after the item is successfully saved.\n         */\n        saveActiveItemAs(nextAction?: Function): void;\n        /**\n         * Save the given item.\n         * @param  The item to save.\n         * @param {Function} {Function} which will be called with no argument after the item is successfully saved, or with the error if it failed. The return value will be that of `nextAction` or `undefined` if it was not provided\n         */\n        saveItem(item: any, nextAction?: Function): void;\n        /**\n         * Prompt the user for a location and save the active item with the\n         * path they select.\n         * @param  The item to save.\n         * @param {Function} {Function} which will be called with no argument after the item is successfully saved, or with the error if it failed. The return value will be that of `nextAction` or `undefined` if it was not provided\n         */\n        saveItemAs(item: any, nextAction?: Function): void;\n        /**\n         * Save all items.\n         */\n        saveItems(): void;\n        /**\n         * Return the first item that matches the given URI or undefined if\n         * none exists.\n         * @param {string} {String} containing a URI.\n         */\n        itemForURI(uri: string): void;\n        /**\n         * Activate the first item that matches the given URI.\n         * @param {string} {String} containing a URI.\n         * @returns {boolean} Returns a {Boolean} indicating whether an item matching the URI was found.\n         */\n        activateItemForURI(uri: string): boolean;\n        /**\n         * Determine whether the pane is active.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isActive(): boolean;\n        /**\n         * Makes this pane the *active* pane, causing it to gain focus.\n         */\n        activate(): void;\n        /**\n         * Close the pane and destroy all its items.\n         *\n         * If this is the last pane, all the items will be destroyed but the pane\n         * itself will not be destroyed.\n         */\n        destroy(): void;\n        /**\n         * Create a new pane to the left of this pane.\n         * @param {Object} {Object} with the following keys:\n         * @returns {Pane} Returns the new {Pane}.\n         */\n        splitLeft(params?: Object): Pane;\n        /**\n         * Create a new pane to the right of this pane.\n         * @param {Object} {Object} with the following keys:\n         * @returns {Pane} Returns the new {Pane}.\n         */\n        splitRight(params?: Object): Pane;\n        /**\n         * Creates a new pane above the receiver.\n         * @param {Object} {Object} with the following keys:\n         * @returns {Pane} Returns the new {Pane}.\n         */\n        splitUp(params?: Object): Pane;\n        /**\n         * Creates a new pane below the receiver.\n         * @param {Object} {Object} with the following keys:\n         * @returns {Pane} Returns the new {Pane}.\n         */\n        splitDown(params?: Object): Pane;\n    }\n\n    /**\n     * A container representing a panel on the edges of the editor window.\n     * You should not create a `Panel` directly, instead use {Workspace::addTopPanel}\n     * and friends to add panels.\n     *\n     * Examples: [tree-view](https://github.com/atom/tree-view),\n     * [status-bar](https://github.com/atom/status-bar),\n     * and [find-and-replace](https://github.com/atom/find-and-replace) all use\n     * panels.\n     *\n     * file: src/panel.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/panel.coffee#L12\n     */\n    class Panel {\n        /**\n         * Destroy and remove this panel from the UI.\n         */\n        destroy(): void;\n        /**\n         * Invoke the given callback when the pane hidden or shown.\n         * @param {Function} {Function} to be called when the pane is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeVisible(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the pane is destroyed.\n         * @param {Function} {Function} to be called when the pane is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * @returns  Returns the panel's item.\n         */\n        getItem(): any;\n        /**\n         * @returns {number} Returns a {Number} indicating this panel's priority.\n         */\n        getPriority(): number;\n        /**\n         * @returns {boolean} Returns a {Boolean} true when the panel is visible.\n         */\n        isVisible(): boolean;\n        /**\n         * Hide this panel\n         */\n        hide(): void;\n        /**\n         * Show this panel\n         */\n        show(): void;\n    }\n\n    /**\n     * Represents a point in a buffer in row/column coordinates.\n     *\n     * Every public method that takes a point also accepts a *point-compatible*\n     * {Array}. This means a 2-element array containing {Number}s representing the\n     * row and column. So the following are equivalent:\n     *\n     * ```coffee\n     * new Point(1, 2)\n     * [1, 2] # Point compatible Array\n     * ```\n     *\n     * file: src/point.coffee\n     * srcUrl: https://github.com/atom/text-buffer/blob/v10.3.12/src/point.coffee#L12\n     */\n    class Point {\n        /**\n         * A zero-indexed {Number} representing the row of the {Point}.\n         */\n        row: Number;\n    /*} representing the row of the {Point;*/\n        /**\n         * A zero-indexed {Number} representing the column of the {Point}.\n         */\n        column: Number;\n    /*} representing the column of the {Point;*/\n\n      /**\n       * Convert any point-compatible object to a {Point}.\n       * @param {Point} This can be an object that's already a {Point}, in which case it's simply returned, or an array containing two {Number}s representing the row and column.\n       * @param  An optional boolean indicating whether to force the copying of objects that are already points.\n       * @returns {Point} Returns: A {Point} based on the given object.\n       */\n        static fromObject(object: Point, copy: any): Point;\n      /**\n       * @param {Point} {Point}\n       * @param {Point} {Point}\n       * @returns {Point} Returns the given {Point} that is earlier in the buffer.\n       */\n        static min(point1: Point, point2: Point): Point;\n\n\n        /**\n         * Construct a {Point} object\n         * @param {number} {Number} row\n         * @param {number} {Number} column\n         */\n        constructor(row: number, column: number);\n        /**\n         * @returns {Point} Returns a new {Point} with the same row and column.\n         */\n        copy(): Point;\n        /**\n         * @returns {Point} Returns a new {Point} with the row and column negated.\n         */\n        negate(): Point;\n        /**\n         * Makes this point immutable and returns itself.\n         * @returns {Point} Returns an immutable version of this {Point}\n         */\n        freeze(): Point;\n        /**\n         * Build and return a new point by adding the rows and columns of\n         * the given point.\n         * @param {Point} A {Point} whose row and column will be added to this point's row and column to build the returned point.\n         * @returns {Point} Returns a {Point}.\n         */\n        translate(other: Point): Point;\n        /**\n         * Build and return a new {Point} by traversing the rows and columns\n         * specified by the given point.\n         *\n         * This method differs from the direct, vector-style addition offered by\n         * {::translate}. Rather than adding the rows and columns directly, it derives\n         * the new point from traversing in \"typewriter space\". At the end of every row\n         * traversed, a carriage return occurs that returns the columns to 0 before\n         * continuing the traversal.\n         * @param {Point} A {Point} providing the rows and columns to traverse by.\n         * @returns {Point} Returns a {Point}.\n         */\n        traverse(other: Point): Point;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns  Returns `-1` if this point precedes the argument.\n         * @returns  Returns `0` if this point is equivalent to the argument.\n         * @returns  Returns `1` if this point follows the argument.\n         */\n        compare(other: Point): any;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this point has the same row\n        and column as the given {Point} or point-compatible {Array}.\n         */\n        isEqual(other: Point): boolean;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this point precedes the given\n        {Point} or point-compatible {Array}.\n         */\n        isLessThan(other: Point): boolean;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this point precedes or is\n        equal to the given {Point} or point-compatible {Array}.\n         */\n        isLessThanOrEqual(other: Point): boolean;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this point follows the given\n        {Point} or point-compatible {Array}.\n         */\n        isGreaterThan(other: Point): boolean;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this point follows or is\n        equal to the given {Point} or point-compatible {Array}.\n         */\n        isGreaterThanOrEqual(other: Point): boolean;\n        /**\n         * @returns  Returns an array of this point's row and column.\n         */\n        toArray(): any;\n        /**\n         * @returns  Returns an array of this point's row and column.\n         */\n        serialize(): any;\n        /**\n         * @returns  Returns a string representation of the point.\n         */\n        toString(): any;\n    }\n\n    /**\n     * Represents a project that's opened in Atom.\n     *\n     * An instance of this class is always available as the `atom.project` global.\n     *\n     * file: src/project.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/project.coffee#L16\n     */\n    class Project {\n        /**\n         * Invoke the given callback when the project paths change.\n         * @param {Function} {Function} to be called after the project paths change.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangePaths(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a text buffer is added to the\n         * project.\n         * @param {Function} {Function} to be called when a text buffer is added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddBuffer(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with all current and future text\n         * buffers in the project.\n         * @param {Function} {Function} to be called with current and future text buffers.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeBuffers(callback: Function): Disposable;\n        /**\n         * Get an {Array} of {GitRepository}s associated with the project's\n         * directories.\n         *\n         * This method will be removed in 2.0 because it does synchronous I/O.\n         * Prefer the following, which evaluates to a {Promise} that resolves to an\n         * {Array} of {Repository} objects:\n         *\n         * ```\n         * Promise.all(atom.project.getDirectories().map(\n         *     atom.project.repositoryForDirectory.bind(atom.project)))\n         * ```\n         */\n        getRepositories(): void;\n        /**\n         * Get the repository for a given directory asynchronously.\n         * @param {Directory} {Directory} for which to get a {Repository}.\n         * @returns {Promise<any>} Returns a {Promise} that resolves with either:\n\n        * {Repository} if a repository can be created for the given directory\n        * `null` if no repository can be created for the given directory.\n         */\n        repositoryForDirectory(directory: Directory): Promise<any>;\n        /**\n         * Get an {Array} of {String}s containing the paths of the project's\n         * directories.\n         */\n        getPaths(): void;\n        /**\n         * Set the paths of the project's directories.\n         * @param {any[]} {Array} of {String} paths.\n         */\n        setPaths(projectPaths: any[]): void;\n        /**\n         * Add a path to the project's list of root paths\n         * @param {string} {String} The path to the directory to add.\n         */\n        addPath(projectPath: string): void;\n        /**\n         * remove a path from the project's list of root paths.\n         * @param {string} {String} The path to remove.\n         */\n        removePath(projectPath: string): void;\n        /**\n         * Get an {Array} of {Directory}s associated with this project.\n         */\n        getDirectories(): Directory[];\n        /**\n         * Get the path to the project directory that contains the given path,\n         * and the relative path from that project directory to the given path.\n         * @param {string} {String} An absolute path.\n         * @returns {any[]} Returns an {Array} with two elements:\n\n        * `projectPath` The {String} path to the project directory that contains the\n          given path, or `null` if none is found.\n        * `relativePath` {String} The relative path from the project directory to\n          the given path.\n         */\n        relativizePath(fullPath: string): any[];\n        /**\n         * Determines whether the given path (real or symbolic) is inside the\n         * project's directory.\n         *\n         * This method does not actually check if the path exists, it just checks their\n         * locations relative to each other.\n         * @param {string} {String} path\n         * @returns  Returns whether the path is inside the project's root directory.\n         */\n        contains(pathToCheck: string): any;\n    }\n\n    /**\n     * Represents a region in a buffer in row/column coordinates.\n     *\n     * Every public method that takes a range also accepts a *range-compatible*\n     * {Array}. This means a 2-element array containing {Point}s or point-compatible\n     * arrays. So the following are equivalent:\n     *\n     * file: src/range.coffee\n     * srcUrl: https://github.com/atom/text-buffer/blob/v10.3.12/src/range.coffee#L18\n     */\n    class Range {\n        /**\n         * A {Point} representing the start of the {Range}.\n         */\n        start: Point\n    //} representing the start of the {Range;\n        /**\n         * A {Point} representing the end of the {Range}.\n         */\n        end: Point\n    //} representing the end of the {Range;\n\n/**\n * Convert any range-compatible object to a {Range}.\n * @param {Range} This can be an object that's already a {Range}, in which case it's simply returned, or an array containing two {Point}s or point-compatible arrays.\n * @param  An optional boolean indicating whether to force the copying of objects that are already ranges.˚\n * @returns {Range} Returns: A {Range} based on the given object.\n */\n  static fromObject(object: Range | [Point, Point] | [[number, number], [number, number]], copy?: boolean): Range;\n/**\n * Call this with the result of {Range::serialize} to construct a new Range.\n * @param {any[]} {Array} of params to pass to the {::constructor}\n */\n  static deserialize(array: any[]): void;\n\n        /**\n         * Construct a {Range} object\n         * @param {Point} {Point} or Point compatible {Array} (default: [0,0])\n         * @param {Point} {Point} or Point compatible {Array} (default: [0,0])\n         */\n        constructor(pointA: Point, pointB: Point);\n        /**\n         * @returns  Returns a new range with the same start and end positions.\n         */\n        copy(): any;\n        /**\n         * @returns  Returns a new range with the start and end positions negated.\n         */\n        negate(): any;\n        /**\n         * @returns  Returns a plain javascript object representation of the range.\n         */\n        serialize(): any;\n        /**\n         * Is the start position of this range equal to the end position?\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isEmpty(): boolean;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether this range starts and ends on\n        the same row.\n         */\n        isSingleLine(): boolean;\n        /**\n         * Get the number of rows in this range.\n         * @returns {number} Returns a {Number}.\n         */\n        getRowCount(): number;\n        /**\n         * @returns  Returns an array of all rows in the range.\n         */\n        getRows(): any;\n        /**\n         * Freezes the range and its start and end point so it becomes\n         * immutable and returns itself.\n         * @returns {Range} Returns an immutable version of this {Range}\n         */\n        freeze(): Range;\n        /**\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @returns  Returns a new range that contains this range and the given range.\n         */\n        union(otherRange: Range): any;\n        /**\n         * Build and return a new range by translating this range's start and\n         * end points by the given delta(s).\n         * @param {Point} A {Point} by which to translate the start of this range.\n         * @param {Point} A {Point} to by which to translate the end of this range. If omitted, the `startDelta` will be used instead.\n         * @returns {Range} Returns a {Range}.\n         */\n        translate(startDelta: Point, endDelta ?: Point): Range;\n        /**\n         * Build and return a new range by traversing this range's start and\n         * end points by the given delta.\n         *\n         * See {Point::traverse} for details of how traversal differs from translation.\n         * @param {Point} A {Point} containing the rows and columns to traverse to derive the new range.\n         * @returns {Range} Returns a {Range}.\n         */\n        traverse(delta: Point): Range;\n        /**\n         * Compare two Ranges\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @returns  Returns `-1` if this range starts before the argument or contains it.\n         * @returns  Returns `0` if this range is equivalent to the argument.\n         * @returns  Returns `1` if this range starts after the argument or is contained by it.\n         */\n        compare(otherRange: Range): any;\n        /**\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this range has the same start\n        and end points as the given {Range} or range-compatible {Array}.\n         */\n        isEqual(otherRange: Range): boolean;\n        /**\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean} indicating whether this range starts and ends on\n        the same row as the argument.\n         */\n        coversSameRows(otherRange: Range): boolean;\n        /**\n         * Determines whether this range intersects with the argument.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param {boolean} {Boolean} indicating whether to exclude endpoints   when testing for intersection. Defaults to `false`.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        intersectsWith(otherRange: Range, exclusive ?: boolean): boolean;\n        /**\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A boolean value including that the containment should be exclusive of endpoints. Defaults to false.\n         * @returns {boolean} Returns a {Boolean} indicating whether this range contains the given\n        range.\n         */\n        containsRange(otherRange: Range, exclusive?: boolean): boolean;\n        /**\n         * @param {Point} A {Point} or point-compatible {Array}\n         * @param  A boolean value including that the containment should be exclusive of endpoints. Defaults to false.\n         * @returns {boolean} Returns a {Boolean} indicating whether this range contains the given\n        point.\n         */\n        containsPoint(point: Point, exclusive?: any): boolean;\n        /**\n         * @param {number} Row {Number}\n         * @returns {boolean} Returns a {Boolean} indicating whether this range intersects the\n        given row {Number}.\n         */\n        intersectsRow(row: number): boolean;\n        /**\n         * @param {number} {Number} start row\n         * @param {number} {Number} end row\n         * @returns {boolean} Returns a {Boolean} indicating whether this range intersects the\n        row range indicated by the given startRow and endRow {Number}s.\n         */\n        intersectsRowRange(startRow: number, endRow: number): boolean;\n        /**\n         * @returns  Returns a string representation of the range.\n         */\n        toString(): any;\n    }\n\n    /**\n     * Wraps an {Array} of `String`s. The Array describes a path from the\n     * root of the syntax tree to a token including _all_ scope names for the entire\n     * path.\n     *\n     * Methods that take a `ScopeDescriptor` will also accept an {Array} of {Strings}\n     * scope names e.g. `['.source.js']`.\n     *\n     * You can use `ScopeDescriptor`s to get language-specific config settings via\n     * {Config::get}.\n     *\n     * You should not need to create a `ScopeDescriptor` directly.\n     *\n     * * {Editor::getRootScopeDescriptor} to get the language's descriptor.\n     * * {Editor::scopeDescriptorForBufferPosition} to get the descriptor at a\n     *   specific position in the buffer.\n     * * {Cursor::getScopeDescriptor} to get a cursor's descriptor based on position.\n     *\n     * See the [scopes and scope descriptor guide](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)\n     * for more information.\n     *\n     * file: src/scope-descriptor.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/scope-descriptor.coffee#L21\n     */\n    class ScopeDescriptor {\n        /**\n         * Create a {ScopeDescriptor} object.\n         * @param {Object} {Object}\n         */\n        constructor(object: Object);\n        /**\n         * @returns {any[]} Returns an {Array} of {String}s\n         */\n        getScopesArray(): any[];\n    }\n\n    /**\n     * Represents a selection in the {TextEditor}.\n     *\n     * file: src/selection.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/selection.coffee#L10\n     */\n    class Selection {\n        /**\n         * Calls your `callback` when the selection was moved.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeRange(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the selection was destroyed\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * @returns {Range} Returns the screen {Range} for the selection.\n         */\n        getScreenRange(): Range;\n        /**\n         * Modifies the screen range for the selection.\n         * @param {Range} The new {Range} to use.\n         * @param {Object} {Object} options matching those found in {::setBufferRange}.\n         */\n        setScreenRange(screenRange: Range, options?: Object): void;\n        /**\n         * @returns {Range} Returns the buffer {Range} for the selection.\n         */\n        getBufferRange(): Range;\n        /**\n         * Modifies the buffer {Range} for the selection.\n         * @param {Range} The new {Range} to select.\n         * @param {Object} {Object} with the keys:\n         */\n        setBufferRange(bufferRange: Range, options?: Object): void;\n        /**\n         * @returns  Returns the starting and ending buffer rows the selection is\n        highlighting.\n         * @returns {any[]} Returns an {Array} of two {Number}s: the starting row, and the ending row.\n         */\n        getBufferRowRange(): any[];\n        /**\n         * Determines if the selection contains anything.\n         */\n        isEmpty(): void;\n        /**\n         * Determines if the ending position of a marker is greater than the\n         * starting position.\n         *\n         * This can happen when, for example, you highlight text \"up\" in a {TextBuffer}.\n         */\n        isReversed(): void;\n        /**\n         * @returns  Returns whether the selection is a single line or not.\n         */\n        isSingleScreenLine(): any;\n        /**\n         * @returns  Returns the text in the selection.\n         */\n        getText(): any;\n        /**\n         * Identifies if a selection intersects with a given buffer range.\n         * @param {Range} A {Range} to check against.\n         * @returns {boolean} Returns a {Boolean}\n         */\n        intersectsBufferRange(bufferRange: Range): boolean;\n        /**\n         * Identifies if a selection intersects with another selection.\n         * @param {Selection} A {Selection} to check against.\n         * @returns {boolean} Returns a {Boolean}\n         */\n        intersectsWith(otherSelection: Selection): boolean;\n        /**\n         * Clears the selection, moving the marker to the head.\n         * @param {Object} {Object} with the following keys:\n         */\n        clear(options?: Object): void;\n        /**\n         * Selects the text from the current cursor position to a given screen\n         * position.\n         * @param {Point} An instance of {Point}, with a given `row` and `column`.\n         */\n        selectToScreenPosition(position: Point): void;\n        /**\n         * Selects the text from the current cursor position to a given buffer\n         * position.\n         * @param {Point} An instance of {Point}, with a given `row` and `column`.\n         */\n        selectToBufferPosition(position: Point): void;\n        /**\n         * Selects the text one position right of the cursor.\n         * @param {number} {Number} number of columns to select (default: 1)\n         */\n        selectRight(columnCount?: number): void;\n        /**\n         * Selects the text one position left of the cursor.\n         * @param {number} {Number} number of columns to select (default: 1)\n         */\n        selectLeft(columnCount?: number): void;\n        /**\n         * Selects all the text one position above the cursor.\n         * @param {number} {Number} number of rows to select (default: 1)\n         */\n        selectUp(rowCount?: number): void;\n        /**\n         * Selects all the text one position below the cursor.\n         * @param {number} {Number} number of rows to select (default: 1)\n         */\n        selectDown(rowCount?: number): void;\n        /**\n         * Selects all the text from the current cursor position to the top of\n         * the buffer.\n         */\n        selectToTop(): void;\n        /**\n         * Selects all the text from the current cursor position to the bottom\n         * of the buffer.\n         */\n        selectToBottom(): void;\n        /**\n         * Selects all the text in the buffer.\n         */\n        selectAll(): void;\n        /**\n         * Selects all the text from the current cursor position to the\n         * beginning of the line.\n         */\n        selectToBeginningOfLine(): void;\n        /**\n         * Selects all the text from the current cursor position to the first\n         * character of the line.\n         */\n        selectToFirstCharacterOfLine(): void;\n        /**\n         * Selects all the text from the current cursor position to the end of\n         * the screen line.\n         */\n        selectToEndOfLine(): void;\n        /**\n         * Selects all the text from the current cursor position to the end of\n         * the buffer line.\n         */\n        selectToEndOfBufferLine(): void;\n        /**\n         * Selects all the text from the current cursor position to the\n         * beginning of the word.\n         */\n        selectToBeginningOfWord(): void;\n        /**\n         * Selects all the text from the current cursor position to the end of\n         * the word.\n         */\n        selectToEndOfWord(): void;\n        /**\n         * Selects all the text from the current cursor position to the\n         * beginning of the next word.\n         */\n        selectToBeginningOfNextWord(): void;\n        /**\n         * Selects text to the previous word boundary.\n         */\n        selectToPreviousWordBoundary(): void;\n        /**\n         * Selects text to the next word boundary.\n         */\n        selectToNextWordBoundary(): void;\n        /**\n         * Selects text to the previous subword boundary.\n         */\n        selectToPreviousSubwordBoundary(): void;\n        /**\n         * Selects text to the next subword boundary.\n         */\n        selectToNextSubwordBoundary(): void;\n        /**\n         * Selects all the text from the current cursor position to the\n         * beginning of the next paragraph.\n         */\n        selectToBeginningOfNextParagraph(): void;\n        /**\n         * Selects all the text from the current cursor position to the\n         * beginning of the previous paragraph.\n         */\n        selectToBeginningOfPreviousParagraph(): void;\n        /**\n         * Modifies the selection to encompass the current word.\n         * @returns {Range} Returns a {Range}.\n         */\n        selectWord(): Range;\n        /**\n         * Expands the newest selection to include the entire word on which\n         * the cursors rests.\n         */\n        expandOverWord(): void;\n        /**\n         * Selects an entire line in the buffer.\n         * @param {number} The line {Number} to select (default: the row of the cursor).\n         */\n        selectLine(row: number): void;\n        /**\n         * Expands the newest selection to include the entire line on which\n         * the cursor currently rests.\n         *\n         * It also includes the newline character.\n         */\n        expandOverLine(): void;\n        /**\n         * Replaces text at the current selection.\n         * @param {string} A {String} representing the text to add\n         * @param {Object} {Object} with keys:\n         */\n        insertText(text: string, options?: Object): void;\n        /**\n         * Removes the first character before the selection if the selection\n         * is empty otherwise it deletes the selection.\n         */\n        backspace(): void;\n        /**\n         * Removes the selection or, if nothing is selected, then all\n         * characters from the start of the selection back to the previous word\n         * boundary.\n         */\n        deleteToPreviousWordBoundary(): void;\n        /**\n         * Removes the selection or, if nothing is selected, then all\n         * characters from the start of the selection up to the next word\n         * boundary.\n         */\n        deleteToNextWordBoundary(): void;\n        /**\n         * Removes from the start of the selection to the beginning of the\n         * current word if the selection is empty otherwise it deletes the selection.\n         */\n        deleteToBeginningOfWord(): void;\n        /**\n         * Removes from the beginning of the line which the selection begins on\n         * all the way through to the end of the selection.\n         */\n        deleteToBeginningOfLine(): void;\n        /**\n         * Removes the selection or the next character after the start of the\n         * selection if the selection is empty.\n         */\n        delete(): void;\n        /**\n         * If the selection is empty, removes all text from the cursor to the\n         * end of the line. If the cursor is already at the end of the line, it\n         * removes the following newline. If the selection isn't empty, only deletes\n         * the contents of the selection.\n         */\n        deleteToEndOfLine(): void;\n        /**\n         * Removes the selection or all characters from the start of the\n         * selection to the end of the current word if nothing is selected.\n         */\n        deleteToEndOfWord(): void;\n        /**\n         * Removes the selection or all characters from the start of the\n         * selection to the end of the current word if nothing is selected.\n         */\n        deleteToBeginningOfSubword(): void;\n        /**\n         * Removes the selection or all characters from the start of the\n         * selection to the end of the current word if nothing is selected.\n         */\n        deleteToEndOfSubword(): void;\n        /**\n         * Removes only the selected text.\n         */\n        deleteSelectedText(): void;\n        /**\n         * Removes the line at the beginning of the selection if the selection\n         * is empty unless the selection spans multiple lines in which case all lines\n         * are removed.\n         */\n        deleteLine(): void;\n        /**\n         * Joins the current line with the one below it. Lines will\n         * be separated by a single space.\n         *\n         * If there selection spans more than one line, all the lines are joined together.\n         */\n        joinLines(): void;\n        /**\n         * Removes one level of indent from the currently selected rows.\n         */\n        outdentSelectedRows(): void;\n        /**\n         * Sets the indentation level of all selected rows to values suggested\n         * by the relevant grammars.\n         */\n        autoIndentSelectedRows(): void;\n        /**\n         * Wraps the selected lines in comments if they aren't currently part\n         * of a comment.\n         *\n         * Removes the comment if they are currently wrapped in a comment.\n         */\n        toggleLineComments(): void;\n        /**\n         * Cuts the selection until the end of the screen line.\n         */\n        cutToEndOfLine(): void;\n        /**\n         * Cuts the selection until the end of the buffer line.\n         */\n        cutToEndOfBufferLine(): void;\n        /**\n         * Copies the selection to the clipboard and then deletes it.\n         * @param {boolean} {Boolean} (default: false) See {::copy}\n         * @param {boolean} {Boolean} (default: false) See {::copy}\n         */\n        cut(maintainClipboard: boolean, fullLine: boolean): void;\n        /**\n         * Copies the current selection to the clipboard.\n         * @param {boolean} {Boolean} if `true`, a specific metadata property is created to store each content copied to the clipboard. The clipboard `text` still contains the concatenation of the clipboard with the current selection. (default: false)\n         * @param {boolean} {Boolean} if `true`, the copied text will always be pasted at the beginning of the line containing the cursor, regardless of the cursor's horizontal position. (default: false)\n         */\n        copy(maintainClipboard: boolean, fullLine: boolean): void;\n        /**\n         * Creates a fold containing the current selection.\n         */\n        fold(): void;\n        /**\n         * If the selection spans multiple rows, indent all of them.\n         */\n        indentSelectedRows(): void;\n        /**\n         * Moves the selection down one row.\n         */\n        addSelectionBelow(): void;\n        /**\n         * Moves the selection up one row.\n         */\n        addSelectionAbove(): void;\n        /**\n         * Combines the given selection into this selection and then destroys\n         * the given selection.\n         * @param {Selection} A {Selection} to merge with.\n         * @param {Object} {Object} options matching those found in {::setBufferRange}.\n         */\n        merge(otherSelection: Selection, options?: Object): void;\n        /**\n         * Compare this selection's buffer range to another selection's buffer\n         * range.\n         *\n         * See {Range::compare} for more details.\n         * @param {Selection} A {Selection} to compare against\n         */\n        compare(otherSelection: Selection): void;\n    }\n\n    /**\n     * A singleton instance of this class available via `atom.styles`,\n     * which you can use to globally query and observe the set of active style\n     * sheets. The `StyleManager` doesn't add any style elements to the DOM on its\n     * own, but is instead subscribed to by individual `<atom-styles>` elements,\n     * which clone and attach style elements in different contexts.\n     *\n     * file: src/style-manager.js\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/style-manager.js#L15\n     */\n    class StyleManager {\n        /**\n         * Invoke `callback` for all current and future style elements.\n         * @param {Function} {Function} that is called with style elements.\n         * @param  An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it. The style element will also have the following non-standard properties:\n         * @param {string} A {String} containing the path from which the style element was loaded.\n         * @param {string} A {String} indicating the target context of the style element.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to cancel the\n        subscription.\n         */\n        observeStyleElements(callback: Function, styleElement: any, sourcePath: string, context: string): Disposable;\n        /**\n         * Invoke `callback` when a style element is added.\n         * @param {Function} {Function} that is called with style elements.\n         * @param  An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it. The style element will also have the following non-standard properties:\n         * @param {string} A {String} containing the path from which the style element was loaded.\n         * @param {string} A {String} indicating the target context of the style element.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to cancel the\n        subscription.\n         */\n        onDidAddStyleElement(callback: Function, styleElement: any, sourcePath: string, context: string): Disposable;\n        /**\n         * Invoke `callback` when a style element is removed.\n         * @param {Function} {Function} that is called with style elements.\n         * @param  An `HTMLStyleElement` instance.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to cancel the\n        subscription.\n         */\n        onDidRemoveStyleElement(callback: Function, styleElement: any): Disposable;\n        /**\n         * Invoke `callback` when an existing style element is updated.\n         * @param {Function} {Function} that is called with style elements.\n         * @param  An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. The style element will also have the following non-standard properties:\n         * @param {string} A {String} containing the path from which the style element was loaded.\n         * @param {string} A {String} indicating the target context of the style element.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to cancel the\n        subscription.\n         */\n        onDidUpdateStyleElement(callback: Function, styleElement: any, sourcePath: string, context: string): Disposable;\n        /**\n         * Get all loaded style elements.\n         */\n        getStyleElements(): void;\n        /**\n         * Get the path of the user style sheet in `~/.atom`.\n         * @returns {string} Returns a {String}.\n         */\n        getUserStyleSheetPath(): string;\n    }\n\n    /**\n     * Run a node script in a separate process.\n     *\n     * Used by the fuzzy-finder and [find in project](https://github.com/atom/atom/blob/master/src/scan-handler.coffee).\n     *\n     * For a real-world example, see the [scan-handler](https://github.com/atom/atom/blob/master/src/scan-handler.coffee)\n     * and the [instantiation of the task](https://github.com/atom/atom/blob/4a20f13162f65afc816b512ad7201e528c3443d7/src/project.coffee#L245).\n     *\n     * file: src/task.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/task.coffee#L40\n     */\n    class Task {\n        /**\n         * A helper method to easily launch and run a task once.\n         * @param {string} The {String} path to the CoffeeScript/JavaScript file which exports a single {Function} to execute.\n         * @param  The arguments to pass to the exported function.\n         * @returns {Task} Returns the created {Task}.\n         */\n        static once(taskPath: string, args: any): Task;\n\n        /**\n         * Creates a task. You should probably use {.once}\n         * @param {string} The {String} path to the CoffeeScript/JavaScript file that exports a single {Function} to execute.\n         */\n        constructor(taskPath: string);\n        /**\n         * Starts the task.\n         *\n         * Throws an error if this task has already been terminated or if sending a\n         * message to the child process fails.\n         * @param  The arguments to pass to the function exported by this task's script.\n         * @param {Function} A {Function} to call when the task completes.\n         */\n        start(args: any, callback?: Function): void;\n        /**\n         * Send message to the task.\n         *\n         * Throws an error if this task has already been terminated or if sending a\n         * message to the child process fails.\n         * @param  The message to send to the task.\n         */\n        send(message: any): void;\n        /**\n         * Call a function when an event is emitted by the child process\n         * @param {string} The {String} name of the event to handle.\n         * @param {Function} The {Function} to call when the event is emitted.\n         * @returns {Disposable} Returns a {Disposable} that can be used to stop listening for the event.\n         */\n        on(eventName: string, callback: Function): Disposable;\n        /**\n         * A helper method to easily launch and run a task once.\n         * @param {string} The {String} path to the CoffeeScript/JavaScript file which exports a single {Function} to execute.\n         * @param  The arguments to pass to the exported function.\n         * @returns {Task} Returns the created {Task}.\n         */\n        once(taskPath: string, args: any): Task;\n        /**\n         * Forcefully stop the running task.\n         *\n         * No more events are emitted once this method is called.\n         */\n        terminate(): void;\n    }\n\n    /**\n     * A mutable text container with undo/redo support and the ability to\n     * annotate logical regions in the text.\n     *\n     * file: src/text-buffer.coffee\n     * srcUrl: https://github.com/atom/text-buffer/blob/v10.3.12/src/text-buffer.coffee#L23\n     */\n    class TextBuffer {\n        /**\n         * Create a new buffer with the given params.\n         * @param {Object} {Object} or {String} of text\n         */\n        constructor(params: Object);\n        /**\n         * Invoke the given callback synchronously _before_ the content of the\n         * buffer changes.\n         *\n         * Because observers are invoked synchronously, it's important not to perform\n         * any expensive operations via this method.\n         * @param {Function} {Function} to be called when the buffer changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillChange(callback: Function): Disposable;\n        /**\n         * Invoke the given callback synchronously when the content of the\n         * buffer changes.\n         *\n         * Because observers are invoked synchronously, it's important not to perform\n         * any expensive operations via this method. Consider {::onDidStopChanging} to\n         * delay expensive operations until after changes stop occurring.\n         * @param {Function} {Function} to be called when the buffer changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChange(callback: Function): Disposable;\n        /**\n         * Invoke the given callback asynchronously following one or more\n         * changes after {::getStoppedChangingDelay} milliseconds elapse without an\n         * additional change.\n         *\n         * This method can be used to perform potentially expensive operations that\n         * don't need to be performed synchronously. If you need to run your callback\n         * synchronously, use {::onDidChange} instead.\n         * @param {Function} {Function} to be called when the buffer stops changing.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidStopChanging(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the in-memory contents of the\n         * buffer become in conflict with the contents of the file on disk.\n         * @param {Function} {Function} to be called when the buffer enters conflict.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidConflict(callback: Function): Disposable;\n        /**\n         * Invoke the given callback if the value of {::isModified} changes.\n         * @param {Function} {Function} to be called when {::isModified} changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeModified(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when all marker `::onDidChange`\n         * observers have been notified following a change to the buffer.\n         *\n         * The order of events following a buffer change is as follows:\n         *\n         * * The text of the buffer is changed\n         * * All markers are updated accordingly, but their `::onDidChange` observers\n         *   are not notified.\n         * * `TextBuffer::onDidChange` observers are notified.\n         * * `Marker::onDidChange` observers are notified.\n         * * `TextBuffer::onDidUpdateMarkers` observers are notified.\n         *\n         * Basically, this method gives you a way to take action after both a buffer\n         * change and all associated marker changes.\n         * @param {Function} {Function} to be called after markers are updated.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidUpdateMarkers(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a marker is created.\n         * @param {Function} {Function} to be called when a marker is created.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidCreateMarker(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the value of {::getPath} changes.\n         * @param {Function} {Function} to be called when the path changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangePath(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the value of {::getEncoding} changes.\n         * @param {Function} {Function} to be called when the encoding changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeEncoding(callback: Function): Disposable;\n        /**\n         * Invoke the given callback before the buffer is saved to disk.\n         * @param {Function} {Function} to be called before the buffer is saved.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillSave(callback: Function): Disposable;\n        /**\n         * Invoke the given callback after the buffer is saved to disk.\n         * @param {Function} {Function} to be called after the buffer is saved.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidSave(callback: Function): Disposable;\n        /**\n         * Invoke the given callback after the file backing the buffer is\n         * deleted.\n         * @param {Function} {Function} to be called after the buffer is deleted.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDelete(callback: Function): Disposable;\n        /**\n         * Invoke the given callback before the buffer is reloaded from the\n         * contents of its file on disk.\n         * @param {Function} {Function} to be called before the buffer is reloaded.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillReload(callback: Function): Disposable;\n        /**\n         * Invoke the given callback after the buffer is reloaded from the\n         * contents of its file on disk.\n         * @param {Function} {Function} to be called after the buffer is reloaded.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidReload(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the buffer is destroyed.\n         * @param {Function} {Function} to be called when the buffer is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when there is an error in watching the\n         * file.\n         * @param {Function} {Function} callback\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillThrowWatchError(callback: Function): Disposable;\n        /**\n         * Get the number of milliseconds that will elapse without a change\n         * before {::onDidStopChanging} observers are invoked following a change.\n         * @returns {number} Returns a {Number}.\n         */\n        getStoppedChangingDelay(): number;\n        /**\n         * Determine if the in-memory contents of the buffer differ from its\n         * contents on disk.\n         *\n         * If the buffer is unsaved, always returns `true` unless the buffer is empty.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isModified(): boolean;\n        /**\n         * Determine if the in-memory contents of the buffer conflict with the\n         * on-disk contents of its associated file.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isInConflict(): boolean;\n        /**\n         * Get the path of the associated file.\n         * @returns {string} Returns a {String}.\n         */\n        getPath(): string;\n        /**\n         * Set the path for the buffer's associated file.\n         * @param {string} A {String} representing the new file path\n         */\n        setPath(filePath: string): void;\n        /**\n         * Sets the character set encoding for this buffer.\n         * @param {string} The {String} encoding to use (default: 'utf8').\n         */\n        setEncoding(encoding: string): void;\n        /**\n         * @returns {string} Returns the {String} encoding of this buffer.\n         */\n        getEncoding(): string;\n        /**\n         * Get the path of the associated file.\n         * @returns {string} Returns a {String}.\n         */\n        getUri(): string;\n        /**\n         * Determine whether the buffer is empty.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isEmpty(): boolean;\n        /**\n         * Get the entire text of the buffer.\n         * @returns {string} Returns a {String}.\n         */\n        getText(): string;\n        /**\n         * Get the text in a range.\n         * @param {Range} A {Range}\n         * @returns {string} Returns a {String}\n         */\n        getTextInRange(range: Range): string;\n        /**\n         * Get the text of all lines in the buffer, without their line endings.\n         * @returns {any[]} Returns an {Array} of {String}s.\n         */\n        getLines(): string[];\n        /**\n         * Get the text of the last line of the buffer, without its line\n         * ending.\n         * @returns {string} Returns a {String}.\n         */\n        getLastLine(): string;\n        /**\n         * Get the text of the line at the given row, without its line ending.\n         * @param {number} A {Number} representing a 0-indexed row.\n         * @returns {string} Returns a {String}.\n         */\n        lineForRow(row: number): string;\n        /**\n         * Get the line ending for the given 0-indexed row.\n         * @param {number} A {Number} indicating the row.\n         * @returns {string} Returns a {String}. The returned newline is represented as a literal string:\n        `'\\n'`, `'\\r'`, `'\\r\\n'`, or `''` for the last line of the buffer, which\n        doesn't end in a newline.\n         */\n        lineEndingForRow(row: number): string;\n        /**\n         * Get the length of the line for the given 0-indexed row, without its\n         * line ending.\n         * @param {number} A {Number} indicating the row.\n         * @returns {number} Returns a {Number}.\n         */\n        lineLengthForRow(row: number): number;\n        /**\n         * Determine if the given row contains only whitespace.\n         * @param {number} A {Number} representing a 0-indexed row.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isRowBlank(row: number): boolean;\n        /**\n         * Given a row, find the first preceding row that's not blank.\n         * @param {number} A {Number} identifying the row to start checking at.\n         * @returns {number} Returns a {Number} or `null` if there's no preceding non-blank row.\n         */\n        previousNonBlankRow(startRow: number): number;\n        /**\n         * Given a row, find the next row that's not blank.\n         * @param {number} A {Number} identifying the row to start checking at.\n         * @returns {number} Returns a {Number} or `null` if there's no next non-blank row.\n         */\n        nextNonBlankRow(startRow: number): number;\n        /**\n         * Replace the entire contents of the buffer with the given text.\n         * @param {string} A {String}\n         * @returns {Range} Returns a {Range} spanning the new buffer contents.\n         */\n        setText(text: string): Range;\n        /**\n         * Replace the current buffer contents by applying a diff based on the\n         * given text.\n         * @param {string} A {String} containing the new buffer contents.\n         */\n        setTextViaDiff(text: string): void;\n        /**\n         * Set the text in the given range.\n         * @param {Range} A {Range}\n         * @param {string} A {String}\n         * @param {Object} {Object}\n         * @returns {Range} Returns the {Range} of the inserted text.\n         */\n        setTextInRange(range: Range, text: string, options?: Object): Range;\n        /**\n         * Insert text at the given position.\n         * @param {Point} A {Point} representing the insertion location. The position is clipped before insertion.\n         * @param {string} A {String} representing the text to insert.\n         * @param {Object} {Object}\n         * @returns {Range} Returns the {Range} of the inserted text.\n         */\n        insert(position: Point, text: string, options?: Object): Range;\n        /**\n         * Append text to the end of the buffer.\n         * @param {string} A {String} representing the text text to append.\n         * @param {Object} {Object}\n         * @returns {Range} Returns the {Range} of the inserted text\n         */\n        append(text: string, options?: Object): Range;\n        /**\n         * Delete the text in the given range.\n         * @param {Range} A {Range} in which to delete. The range is clipped before deleting.\n         * @returns {Range} Returns an empty {Range} starting at the start of deleted range.\n         */\n        delete(range: Range): Range;\n        /**\n         * Delete the line associated with a specified row.\n         * @param {number} A {Number} representing the 0-indexed row to delete.\n         * @returns {Range} Returns the {Range} of the deleted text.\n         */\n        deleteRow(row: number): Range;\n        /**\n         * Delete the lines associated with the specified row range.\n         *\n         * If the row range is out of bounds, it will be clipped. If the startRow is\n         * greater than the end row, they will be reordered.\n         * @param {number} A {Number} representing the first row to delete.\n         * @param {number} A {Number} representing the last row to delete, inclusive.\n         * @returns {Range} Returns the {Range} of the deleted text.\n         */\n        deleteRows(startRow: number, endRow: number): Range;\n        /**\n         * Create a layer to contain a set of related markers.\n         * @param  An object contaning the following keys:\n         * @returns {MarkerLayer} Returns a {MarkerLayer}.\n         */\n        addMarkerLayer(options: any): MarkerLayer;\n        /**\n         * Get a {MarkerLayer} by id.\n         * @param  The id of the marker layer to retrieve.\n         * @returns {MarkerLayer} Returns a {MarkerLayer} or `` if no layer exists with the given\n        id.\n         */\n        getMarkerLayer(id: any): MarkerLayer;\n        /**\n         * Get the default {MarkerLayer}.\n         *\n         * All marker APIs not tied to an explicit layer interact with this default\n         * layer.\n         * @returns {MarkerLayer} Returns a {MarkerLayer}.\n         */\n        getDefaultMarkerLayer(): MarkerLayer;\n        /**\n         * Create a marker with the given range in the default marker layer.\n         * This marker will maintain its logical location as the buffer is changed, so\n         * if you mark a particular word, the marker will remain over that word even if\n         * the word's location in the buffer changes.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.\n         * @returns {Marker} Returns a {Marker}.\n         */\n        markRange(range: Range, properties: any): Marker;\n        /**\n         * Create a marker at the given position with no tail in the default\n         * marker layer.\n         * @param {Point} {Point} or point-compatible {Array}\n         * @param {Object} An {Object} with the following keys:\n         * @returns {Marker} Returns a {Marker}.\n         */\n        markPosition(position: Point, options?: Object): Marker;\n        /**\n         * Get all existing markers on the default marker layer.\n         * @returns {any[]} Returns an {Array} of {Marker}s.\n         */\n        getMarkers(): any[];\n        /**\n         * Get an existing marker by its id from the default marker layer.\n         * @param {number} {Number} id of the marker to retrieve\n         * @returns {Marker} Returns a {Marker}.\n         */\n        getMarker(id: number): Marker;\n        /**\n         * Find markers conforming to the given parameters in the default\n         * marker layer.\n         *\n         * Markers are sorted based on their position in the buffer. If two markers\n         * start at the same position, the larger marker comes first.\n         * @param  A hash of key-value pairs constraining the set of returned markers. You can query against custom marker properties by listing the desired key-value pairs here. In addition, the following keys are reserved and have special semantics:\n         * @returns {any[]} Returns an {Array} of {Marker}s.\n         */\n        findMarkers(params: any): any[];\n        /**\n         * Get the number of markers in the default marker layer.\n         * @returns {number} Returns a {Number}.\n         */\n        getMarkerCount(): number;\n        /**\n         * Undo the last operation. If a transaction is in progress, aborts it.\n         */\n        undo(): void;\n        /**\n         * Redo the last operation\n         */\n        redo(): void;\n        /**\n         * Batch multiple operations as a single undo/redo step.\n         *\n         * Any group of operations that are logically grouped from the perspective of\n         * undoing and redoing should be performed in a transaction. If you want to\n         * abort the transaction, call {::abortTransaction} to terminate the function's\n         * execution and revert any changes performed up to the abortion.\n         * @param {number} The {Number} of milliseconds for which this transaction should be considered 'open for grouping' after it begins. If a transaction with a positive `groupingInterval` is committed while the previous transaction is still open for grouping, the two transactions are merged with respect to undo and redo.\n         * @param {Function} A {Function} to call inside the transaction.\n         */\n        transact(groupingInterval?: number, fn?: Function): void;\n        /**\n         * Clear the undo stack. When calling this method within a transaction,\n         * the {::onDidChangeText} event will not be triggered because the information\n         * describing the changes is lost.\n         */\n        clearUndoStack(): void;\n        /**\n         * Create a pointer to the current state of the buffer for use\n         * with {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.\n         * @returns  Returns a checkpoint value.\n         */\n        createCheckpoint(): any;\n        /**\n         * Revert the buffer to the state it was in when the given\n         * checkpoint was created.\n         *\n         * The redo stack will be empty following this operation, so changes since the\n         * checkpoint will be lost. If the given checkpoint is no longer present in the\n         * undo history, no changes will be made to the buffer and this method will\n         * return `false`.\n         * @returns {boolean} Returns a {Boolean} indicating whether the operation succeeded.\n         */\n        revertToCheckpoint(): boolean;\n        /**\n         * Group all changes since the given checkpoint into a single\n         * transaction for purposes of undo/redo.\n         *\n         * If the given checkpoint is no longer present in the undo history, no\n         * grouping will be performed and this method will return `false`.\n         * @returns {boolean} Returns a {Boolean} indicating whether the operation succeeded.\n         */\n        groupChangesSinceCheckpoint(): boolean;\n        /**\n         *\n         *\n         * If the given checkpoint is no longer present in the undo history, this\n         * method will return an empty {Array}.\n         * @returns  Returns a list of changes since the given checkpoint.\n         * @returns {any[]} Returns an {Array} containing the following change {Object}s:\n\n        * `start` A {Point} representing where the change started.\n        * `oldExtent` A {Point} representing the replaced extent.\n        * `newExtent`: A {Point} representing the replacement extent.\n        * `newText`: A {String} representing the replacement text.\n         */\n        getChangesSinceCheckpoint(): any[];\n        /**\n         * Scan regular expression matches in the entire buffer, calling the\n         * given iterator function on each match.\n         *\n         * If you're programmatically modifying the results, you may want to try\n         * {::backwardsScan} to avoid tripping over your own changes.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Function} A {Function} that's called on each match with an {Object} containing the following keys:\n         */\n        scan(regex: RegExp, iterator: Function): void;\n        /**\n         * Scan regular expression matches in the entire buffer in reverse\n         * order, calling the given iterator function on each match.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Function} A {Function} that's called on each match with an {Object} containing the following keys:\n         */\n        backwardsScan(regex: RegExp, iterator: Function): void;\n        /**\n         * Scan regular expression matches in a given range , calling the given\n         * iterator function on each match.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Range} A {Range} in which to search.\n         * @param {Function} A {Function} that's called on each match with an {Object} containing the following keys:\n         */\n        scanInRange(regex: RegExp, range: Range, callback: Function): void;\n        /**\n         * Scan regular expression matches in a given range in reverse order,\n         * calling the given iterator function on each match.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Range} A {Range} in which to search.\n         * @param {Function} A {Function} that's called on each match with an {Object} containing the following keys:\n         */\n        backwardsScanInRange(regex: RegExp, range: Range, iterator: Function): void;\n        /**\n         * Replace all regular expression matches in the entire buffer.\n         * @param {RegExp} A {RegExp} representing the matches to be replaced.\n         * @param {string} A {String} representing the text to replace each match.\n         * @returns {number} Returns a {Number} representing the number of replacements made.\n         */\n        replace(regex: RegExp, replacementText: string): number;\n        /**\n         * Get the range spanning from `[0, 0]` to {::getEndPosition}.\n         * @returns {Range} Returns a {Range}.\n         */\n        getRange(): Range;\n        /**\n         * Get the number of lines in the buffer.\n         * @returns {number} Returns a {Number}.\n         */\n        getLineCount(): number;\n        /**\n         * Get the last 0-indexed row in the buffer.\n         * @returns {number} Returns a {Number}.\n         */\n        getLastRow(): number;\n        /**\n         * Get the first position in the buffer, which is always `[0, 0]`.\n         * @returns {Point} Returns a {Point}.\n         */\n        getFirstPosition(): Point;\n        /**\n         * Get the maximal position in the buffer, where new text would be\n         * appended.\n         * @returns {Point} Returns a {Point}.\n         */\n        getEndPosition(): Point;\n        /**\n         * Get the length of the buffer in characters.\n         * @returns {number} Returns a {Number}.\n         */\n        getMaxCharacterIndex(): number;\n        /**\n         * Get the range for the given row\n         * @param {number} A {Number} representing a 0-indexed row.\n         * @param {boolean} A {Boolean} indicating whether or not to include the newline, which results in a range that extends to the start of the next line.\n         * @returns {Range} Returns a {Range}.\n         */\n        rangeForRow(row: number, includeNewline: boolean): Range;\n        /**\n         * Convert a position in the buffer in row/column coordinates to an\n         * absolute character offset, inclusive of line ending characters.\n         *\n         * The position is clipped prior to translating.\n         * @param {Point} A {Point}.\n         * @returns {number} Returns a {Number}.\n         */\n        characterIndexForPosition(position: Point): number;\n        /**\n         * Convert an absolute character offset, inclusive of newlines, to a\n         * position in the buffer in row/column coordinates.\n         *\n         * The offset is clipped prior to translating.\n         * @param {number} A {Number}.\n         * @returns {Point} Returns a {Point}.\n         */\n        positionForCharacterIndex(offset: number): Point;\n        /**\n         * Clip the given range so it starts and ends at valid positions.\n         *\n         * For example, the position `[1, 100]` is out of bounds if the line at row 1 is\n         * only 10 characters long, and it would be clipped to `(1, 10)`.\n         * @param {Range} A {Range} or range-compatible {Array} to clip.\n         * @returns {Range} Returns the given {Range} if it is already in bounds, or a new clipped\n        {Range} if the given range is out-of-bounds.\n         */\n        clipRange(range: Range): Range;\n        /**\n         * Clip the given point so it is at a valid position in the buffer.\n         *\n         * For example, the position (1, 100) is out of bounds if the line at row 1 is\n         * only 10 characters long, and it would be clipped to (1, 10)\n         * @param {Point} A {Point} or point-compatible {Array}.\n         * @returns {Point} Returns a new {Point} if the given position is invalid, otherwise returns\n        the given position.\n         */\n        clipPosition(position: Point): Point;\n        /**\n         * Save the buffer.\n         */\n        save(): void;\n        /**\n         * Save the buffer at a specific path.\n         * @param  The path to save at.\n         */\n        saveAs(filePath: any): void;\n        /**\n         * Reload the buffer's contents from disk.\n         *\n         * Sets the buffer's content to the cached disk contents\n         */\n        reload(): void;\n    }\n\n    /**\n     * This class represents all essential editing state for a single\n     * {TextBuffer}, including cursor and selection positions, folds, and soft wraps.\n     * If you're manipulating the state of an editor, use this class.\n     *\n     * A single {TextBuffer} can belong to multiple editors. For example, if the\n     * same file is open in two different panes, Atom creates a separate editor for\n     * each pane. If the buffer is manipulated the changes are reflected in both\n     * editors, but each maintains its own cursor position, folded lines, etc.\n     *\n     * ## Accessing TextEditor Instances\n     *\n     * The easiest way to get hold of `TextEditor` objects is by registering a callback\n     * with `::observeTextEditors` on the `atom.workspace` global. Your callback will\n     * then be called with all current editor instances and also when any editor is\n     * created in the future.\n     *\n     * ```coffee\n     * atom.workspace.observeTextEditors (editor) ->\n     *   editor.insertText('Hello World')\n     * ```\n     *\n     * ## Buffer vs. Screen Coordinates\n     *\n     * Because editors support folds and soft-wrapping, the lines on screen don't\n     * always match the lines in the buffer. For example, a long line that soft wraps\n     * twice renders as three lines on screen, but only represents one line in the\n     * buffer. Similarly, if rows 5-10 are folded, then row 6 on screen corresponds\n     * to row 11 in the buffer.\n     *\n     * Your choice of coordinates systems will depend on what you're trying to\n     * achieve. For example, if you're writing a command that jumps the cursor up or\n     * down by 10 lines, you'll want to use screen coordinates because the user\n     * probably wants to skip lines *on screen*. However, if you're writing a package\n     * that jumps between method definitions, you'll want to work in buffer\n     * coordinates.\n     *\n     * **When in doubt, just default to buffer coordinates**, then experiment with\n     * soft wraps and folds to ensure your code interacts with them correctly.\n     *\n     * file: src/text-editor.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/text-editor.coffee#L60\n     */\n    class TextEditor {\n        constructor(params: Object)\n        element: HTMLElement\n        /**\n         * Calls your `callback` when the buffer's title has changed.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeTitle(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the buffer's path, and therefore title, has changed.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangePath(callback: Function): Disposable;\n        /**\n         * Invoke the given callback synchronously when the content of the\n         * buffer changes.\n         *\n         * Because observers are invoked synchronously, it's important not to perform\n         * any expensive operations via this method. Consider {::onDidStopChanging} to\n         * delay expensive operations until after changes stop occurring.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChange(callback: Function): Disposable;\n        /**\n         * Invoke `callback` when the buffer's contents change. It is\n         * emit asynchronously 300ms after the last buffer change. This is a good place\n         * to handle changes to the buffer without compromising typing performance.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidStopChanging(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Cursor} is moved. If there are\n         * multiple cursors, your callback will be called for each cursor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeCursorPosition(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a selection's screen range changes.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeSelectionRange(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when soft wrap was enabled or disabled.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeSoftWrapped(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the buffer's encoding has changed.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeEncoding(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the grammar that interprets and\n         * colorizes the text has been changed. Immediately calls your callback with\n         * the current grammar.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeGrammar(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the grammar that interprets and\n         * colorizes the text has been changed.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeGrammar(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the result of {::isModified} changes.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeModified(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the buffer's underlying file changes on\n         * disk at a moment when the result of {::isModified} is true.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidConflict(callback: Function): Disposable;\n        /**\n         * Calls your `callback` before text has been inserted.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillInsertText(callback: Function): Disposable;\n        /**\n         * Calls your `callback` after text has been inserted.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidInsertText(callback: Function): Disposable;\n        /**\n         * Invoke the given callback after the buffer is saved to disk.\n         * @param {Function} {Function} to be called after the buffer is saved.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidSave(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the editor is destroyed.\n         * @param {Function} {Function} to be called when the editor is destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroy(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Cursor} is added to the editor.\n         * Immediately calls your callback for each existing cursor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeCursors(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Cursor} is added to the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddCursor(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Cursor} is removed from the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidRemoveCursor(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Selection} is added to the editor.\n         * Immediately calls your callback for each existing selection.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeSelections(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Selection} is added to the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddSelection(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Selection} is removed from the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidRemoveSelection(callback: Function): Disposable;\n        /**\n         * Calls your `callback` with each {Decoration} added to the editor.\n         * Calls your `callback` immediately for any existing decorations.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeDecorations(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Decoration} is added to the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddDecoration(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Decoration} is removed from the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidRemoveDecoration(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when the placeholder text is changed.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangePlaceholderText(callback: Function): Disposable;\n        /**\n         * Retrieves the current {TextBuffer}.\n         */\n        getBuffer(): TextBuffer;\n        /**\n         * Calls your `callback` when a {Gutter} is added to the editor.\n         * Immediately calls your callback for each existing gutter.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeGutters(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Gutter} is added to the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddGutter(callback: Function): Disposable;\n        /**\n         * Calls your `callback` when a {Gutter} is removed from the editor.\n         * @param {Function} {Function}\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidRemoveGutter(callback: Function): Disposable;\n        /**\n         * Get the editor's title for display in other parts of the\n         * UI such as the tabs.\n         *\n         * If the editor's buffer is saved, its title is the file name. If it is\n         * unsaved, its title is \"untitled\".\n         * @returns {string} Returns a {String}.\n         */\n        getTitle(): string;\n        /**\n         * Get unique title for display in other parts of the UI, such as\n         * the window title.\n         *\n         * If the editor's buffer is unsaved, its title is \"untitled\"\n         * If the editor's buffer is saved, its unique title is formatted as one\n         * of the following,\n         *\n         * * \"<filename>\" when it is the only editing buffer with this file name.\n         * * \"<filename> — <unique-dir-prefix>\" when other buffers have this file name.\n         * @returns {string} Returns a {String}\n         */\n        getLongTitle(): string;\n        /**\n         * @returns {string} Returns the {String} path of this editor's text buffer.\n         */\n        getPath(): string;\n        /**\n         * @returns {string} Returns the {String} character set encoding of this editor's text\n        buffer.\n         */\n        getEncoding(): string;\n        /**\n         * Set the character set encoding to use in this editor's text\n         * buffer.\n         * @param {string} The {String} character set encoding name such as 'utf8'\n         */\n        setEncoding(encoding: string): void;\n        /**\n         * @returns {boolean} Returns {Boolean} `true` if this editor has been modified.\n         */\n        isModified(): boolean;\n        /**\n         * @returns {boolean} Returns {Boolean} `true` if this editor has no content.\n         */\n        isEmpty(): boolean;\n        /**\n         * Saves the editor's text buffer.\n         *\n         * See {TextBuffer::save} for more details.\n         */\n        save(): void;\n        /**\n         * Saves the editor's text buffer as the given path.\n         *\n         * See {TextBuffer::saveAs} for more details.\n         * @param {string} A {String} path.\n         */\n        saveAs(filePath: string): void;\n        /**\n         * @returns {string} Returns a {String} representing the entire contents of the editor.\n         */\n        getText(): string;\n        /**\n         * Get the text in the given {Range} in buffer coordinates.\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @returns {string} Returns a {String}.\n         */\n        getTextInBufferRange(range: Range): string;\n        /**\n         * @returns {number} Returns a {Number} representing the number of lines in the buffer.\n         */\n        getLineCount(): number;\n        /**\n         * @returns {number} Returns a {Number} representing the number of screen lines in the\n        editor. This accounts for folds.\n         */\n        getScreenLineCount(): number;\n        /**\n         * @returns {number} Returns a {Number} representing the last zero-indexed buffer row\n        number of the editor.\n         */\n        getLastBufferRow(): number;\n        /**\n         * @returns {number} Returns a {Number} representing the last zero-indexed screen row\n        number of the editor.\n         */\n        getLastScreenRow(): number;\n        /**\n         * @param {number} A {Number} representing a zero-indexed buffer row.\n         * @returns {string} Returns a {String} representing the contents of the line at the\n        given buffer row.\n         */\n        lineTextForBufferRow(bufferRow: number): string;\n        /**\n         * @param {number} A {Number} representing a zero-indexed screen row.\n         * @returns {string} Returns a {String} representing the contents of the line at the\n        given screen row.\n         */\n        lineTextForScreenRow(screenRow: number): string;\n        /**\n         * Get the {Range} of the paragraph surrounding the most recently added\n         * cursor.\n         * @returns {Range} Returns a {Range}.\n         */\n        getCurrentParagraphBufferRange(): Range;\n        /**\n         * Replaces the entire contents of the buffer with the given {String}.\n         * @param {string} A {String} to replace with\n         */\n        setText(text: string): void;\n        /**\n         * Set the text in the given {Range} in buffer coordinates.\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @param {string} A {String}\n         * @param {Object} {Object}\n         * @returns {Range} Returns the {Range} of the newly-inserted text.\n         */\n        setTextInBufferRange(range: Range, text: string, options?: Object): Range;\n        /**\n         * For each selection, replace the selected text with the given text.\n         * @param {string} A {String} representing the text to insert.\n         * @param  See {Selection::insertText}.\n         * @returns {Range} Returns a {Range} when the text has been inserted\n         * @returns {boolean} Returns a {Boolean} false when the text has not been inserted\n         */\n        insertText(text: string, options?: any): Range | boolean;\n        /**\n         * For each selection, replace the selected text with a newline.\n         */\n        insertNewline(): void;\n        /**\n         * For each selection, if the selection is empty, delete the character\n         * following the cursor. Otherwise delete the selected text.\n         */\n        delete(): void;\n        /**\n         * For each selection, if the selection is empty, delete the character\n         * preceding the cursor. Otherwise delete the selected text.\n         */\n        backspace(): void;\n        /**\n         * Mutate the text of all the selections in a single transaction.\n         *\n         * All the changes made inside the given {Function} can be reverted with a\n         * single call to {::undo}.\n         * @param {Function} A {Function} that will be called once for each {Selection}. The first    argument will be a {Selection} and the second argument will be the    {Number} index of that selection.\n         */\n        mutateSelectedText(fn: Function): void;\n        /**\n         * For each selection, transpose the selected text.\n         *\n         * If the selection is empty, the characters preceding and following the cursor\n         * are swapped. Otherwise, the selected characters are reversed.\n         */\n        transpose(): void;\n        /**\n         * Convert the selected text to upper case.\n         *\n         * For each selection, if the selection is empty, converts the containing word\n         * to upper case. Otherwise convert the selected text to upper case.\n         */\n        upperCase(): void;\n        /**\n         * Convert the selected text to lower case.\n         *\n         * For each selection, if the selection is empty, converts the containing word\n         * to upper case. Otherwise convert the selected text to upper case.\n         */\n        lowerCase(): void;\n        /**\n         * Toggle line comments for rows intersecting selections.\n         *\n         * If the current grammar doesn't support comments, does nothing.\n         */\n        toggleLineCommentsInSelection(): void;\n        /**\n         * For each cursor, insert a newline at beginning the following line.\n         */\n        insertNewlineBelow(): void;\n        /**\n         * For each cursor, insert a newline at the end of the preceding line.\n         */\n        insertNewlineAbove(): void;\n        /**\n         * For each selection, if the selection is empty, delete all characters\n         * of the containing word that precede the cursor. Otherwise delete the\n         * selected text.\n         */\n        deleteToBeginningOfWord(): void;\n        /**\n         * Similar to {::deleteToBeginningOfWord}, but deletes only back to the\n         * previous word boundary.\n         */\n        deleteToPreviousWordBoundary(): void;\n        /**\n         * Similar to {::deleteToEndOfWord}, but deletes only up to the\n         * next word boundary.\n         */\n        deleteToNextWordBoundary(): void;\n        /**\n         * For each selection, if the selection is empty, delete all characters\n         * of the containing subword following the cursor. Otherwise delete the selected\n         * text.\n         */\n        deleteToBeginningOfSubword(): void;\n        /**\n         * For each selection, if the selection is empty, delete all characters\n         * of the containing subword following the cursor. Otherwise delete the selected\n         * text.\n         */\n        deleteToEndOfSubword(): void;\n        /**\n         * For each selection, if the selection is empty, delete all characters\n         * of the containing line that precede the cursor. Otherwise delete the\n         * selected text.\n         */\n        deleteToBeginningOfLine(): void;\n        /**\n         * For each selection, if the selection is not empty, deletes the\n         * selection; otherwise, deletes all characters of the containing line\n         * following the cursor. If the cursor is already at the end of the line,\n         * deletes the following newline.\n         */\n        deleteToEndOfLine(): void;\n        /**\n         * For each selection, if the selection is empty, delete all characters\n         * of the containing word following the cursor. Otherwise delete the selected\n         * text.\n         */\n        deleteToEndOfWord(): void;\n        /**\n         * Delete all lines intersecting selections.\n         */\n        deleteLine(): void;\n        /**\n         * Undo the last change.\n         */\n        undo(): void;\n        /**\n         * Redo the last change.\n         */\n        redo(): void;\n        /**\n         * Batch multiple operations as a single undo/redo step.\n         *\n         * Any group of operations that are logically grouped from the perspective of\n         * undoing and redoing should be performed in a transaction. If you want to\n         * abort the transaction, call {::abortTransaction} to terminate the function's\n         * execution and revert any changes performed up to the abortion.\n         * @param {number} The {Number} of milliseconds for which this transaction should be considered 'groupable' after it begins. If a transaction with a positive `groupingInterval` is committed while the previous transaction is still 'groupable', the two transactions are merged with respect to undo and redo.\n         * @param {Function} A {Function} to call inside the transaction.\n         */\n        transact(groupingInterval?: number, fn?: Function): void;\n        /**\n         * Abort an open transaction, undoing any operations performed so far\n         * within the transaction.\n         */\n        abortTransaction(): void;\n        /**\n         * Create a pointer to the current state of the buffer for use\n         * with {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.\n         * @returns  Returns a checkpoint value.\n         */\n        createCheckpoint(): any;\n        /**\n         * Revert the buffer to the state it was in when the given\n         * checkpoint was created.\n         *\n         * The redo stack will be empty following this operation, so changes since the\n         * checkpoint will be lost. If the given checkpoint is no longer present in the\n         * undo history, no changes will be made to the buffer and this method will\n         * return `false`.\n         * @returns {boolean} Returns a {Boolean} indicating whether the operation succeeded.\n         */\n        revertToCheckpoint(): boolean;\n        /**\n         * Group all changes since the given checkpoint into a single\n         * transaction for purposes of undo/redo.\n         *\n         * If the given checkpoint is no longer present in the undo history, no\n         * grouping will be performed and this method will return `false`.\n         * @returns {boolean} Returns a {Boolean} indicating whether the operation succeeded.\n         */\n        groupChangesSinceCheckpoint(): boolean;\n        /**\n         * Convert a position in buffer-coordinates to screen-coordinates.\n         *\n         * The position is clipped via {::clipBufferPosition} prior to the conversion.\n         * The position is also clipped via {::clipScreenPosition} following the\n         * conversion, which only makes a difference when `options` are supplied.\n         * @param {Point} A {Point} or {Array} of [row, column].\n         * @param  An options hash for {::clipScreenPosition}.\n         * @returns {Point} Returns a {Point}.\n         */\n        screenPositionForBufferPosition(bufferPosition: Point, options?: any): Point;\n        /**\n         * Convert a position in screen-coordinates to buffer-coordinates.\n         *\n         * The position is clipped via {::clipScreenPosition} prior to the conversion.\n         * @param {Point} A {Point} or {Array} of [row, column].\n         * @param  An options hash for {::clipScreenPosition}.\n         * @returns {Point} Returns a {Point}.\n         */\n        bufferPositionForScreenPosition(bufferPosition: Point, options?: any): Point;\n        /**\n         * Convert a range in buffer-coordinates to screen-coordinates.\n         * @param {Range} {Range} in buffer coordinates to translate into screen coordinates.\n         * @returns {Range} Returns a {Range}.\n         */\n        screenRangeForBufferRange(bufferRange: Range): Range;\n        /**\n         * Convert a range in screen-coordinates to buffer-coordinates.\n         * @param {Range} {Range} in screen coordinates to translate into buffer coordinates.\n         * @returns {Range} Returns a {Range}.\n         */\n        bufferRangeForScreenRange(screenRange: Range): Range;\n        /**\n         * Clip the given {Point} to a valid position in the buffer.\n         *\n         * If the given {Point} describes a position that is actually reachable by the\n         * cursor based on the current contents of the buffer, it is returned\n         * unchanged. If the {Point} does not describe a valid position, the closest\n         * valid position is returned instead.\n         * @param {Point} The {Point} representing the position to clip.\n         * @returns {Point} Returns a {Point}.\n         */\n        clipBufferPosition(bufferPosition: Point): Point;\n        /**\n         * Clip the start and end of the given range to valid positions in the\n         * buffer. See {::clipBufferPosition} for more information.\n         * @param {Range} The {Range} to clip.\n         * @returns {Range} Returns a {Range}.\n         */\n        clipBufferRange(range: Range): Range;\n        /**\n         * Clip the given {Point} to a valid position on screen.\n         *\n         * If the given {Point} describes a position that is actually reachable by the\n         * cursor based on the current contents of the screen, it is returned\n         * unchanged. If the {Point} does not describe a valid position, the closest\n         * valid position is returned instead.\n         * @param {Point} The {Point} representing the position to clip.\n         * @param {Object} {Object}\n         * @returns {Point} Returns a {Point}.\n         */\n        clipScreenPosition(screenPosition: Point, options?: Object): Point;\n        /**\n         * Clip the start and end of the given range to valid positions on screen.\n         * See {::clipScreenPosition} for more information.\n         * @param {Range} The {Range} to clip.\n         * @param  See {::clipScreenPosition} `options`.\n         * @returns {Range} Returns a {Range}.\n         */\n        clipScreenRange(range: Range, options?: any): Range;\n        /**\n         * Add a decoration that tracks a {DisplayMarker}. When the\n         * marker moves, is invalidated, or is destroyed, the decoration will be\n         * updated to reflect the marker's state.\n         *\n         * The following are the supported decorations types:\n         *\n         * * __line__: Adds your CSS `class` to the line nodes within the range\n         *     marked by the marker\n         * * __line-number__: Adds your CSS `class` to the line number nodes within the\n         *     range marked by the marker\n         * * __highlight__: Adds a new highlight div to the editor surrounding the\n         *     range marked by the marker. When the user selects text, the selection is\n         *     visualized with a highlight decoration internally. The structure of this\n         *     highlight will be\n         *   ```html\n         *     <div class=\"highlight <your-class>\">\n         *       <!-- Will be one region for each row in the range. Spans 2 lines? There will be 2 regions. -->\n         *       <div class=\"region\"></div>\n         *     </div>\n         *   ```\n         * * __overlay__: Positions the view associated with the given item at the head\n         *     or tail of the given `DisplayMarker`.\n         * * __gutter__: A decoration that tracks a {DisplayMarker} in a {Gutter}. Gutter\n         *     decorations are created by calling {Gutter::decorateMarker} on the\n         *     desired `Gutter` instance.\n         * * __block__: Positions the view associated with the given item before or\n         *     after the row of the given `TextEditorMarker`.\n         * @param {DisplayMarker} A {DisplayMarker} you want this decoration to follow.\n         * @param {Object} An {Object} representing the decoration e.g. `{type: 'line-number', class: 'linter-error'}`\n         * @returns {Decoration} Returns a {Decoration} object\n         */\n        decorateMarker(marker: DisplayMarker, decorationParams: Object): Decoration;\n        /**\n         * Add a decoration to every marker in the given marker layer. Can\n         * be used to decorate a large number of markers without having to create and\n         * manage many individual decorations.\n         * @param {DisplayMarkerLayer} A {DisplayMarkerLayer} or {MarkerLayer} to decorate.\n         * @param  The same parameters that are passed to {TextEditor::decorateMarker}, except the `type` cannot be `overlay` or `gutter`.\n         * @returns {LayerDecoration} Returns a {LayerDecoration}.\n         */\n        decorateMarkerLayer(markerLayer: DisplayMarkerLayer, decorationParams: any): LayerDecoration;\n        /**\n         * Get all decorations.\n         * @param {Object} An {Object} containing key value pairs that the returned decorations' properties must match.\n         * @returns {any[]} Returns an {Array} of {Decoration}s.\n         */\n        getDecorations(propertyFilter?: Object): any[];\n        /**\n         * Get all decorations of type 'line'.\n         * @param {Object} An {Object} containing key value pairs that the returned decorations' properties must match.\n         * @returns {any[]} Returns an {Array} of {Decoration}s.\n         */\n        getLineDecorations(propertyFilter?: Object): any[];\n        /**\n         * Get all decorations of type 'line-number'.\n         * @param {Object} An {Object} containing key value pairs that the returned decorations' properties must match.\n         * @returns {any[]} Returns an {Array} of {Decoration}s.\n         */\n        getLineNumberDecorations(propertyFilter?: Object): any[];\n        /**\n         * Get all decorations of type 'highlight'.\n         * @param {Object} An {Object} containing key value pairs that the returned decorations' properties must match.\n         * @returns {any[]} Returns an {Array} of {Decoration}s.\n         */\n        getHighlightDecorations(propertyFilter?: Object): any[];\n        /**\n         * Get all decorations of type 'overlay'.\n         * @param {Object} An {Object} containing key value pairs that the returned decorations' properties must match.\n         * @returns {any[]} Returns an {Array} of {Decoration}s.\n         */\n        getOverlayDecorations(propertyFilter?: Object): any[];\n        /**\n         * Create a marker on the default marker layer with the given range\n         * in buffer coordinates. This marker will maintain its logical location as the\n         * buffer is changed, so if you mark a particular word, the marker will remain\n         * over that word even if the word's location in the buffer changes.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markBufferRange(range: Range, properties: any): DisplayMarker;\n        /**\n         * Create a marker on the default marker layer with the given range\n         * in screen coordinates. This marker will maintain its logical location as the\n         * buffer is changed, so if you mark a particular word, the marker will remain\n         * over that word even if the word's location in the buffer changes.\n         * @param {Range} A {Range} or range-compatible {Array}\n         * @param  A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markScreenRange(range: Range, properties: any): DisplayMarker;\n        /**\n         * Create a marker on the default marker layer with the given buffer\n         * position and no tail. To group multiple markers together in their own\n         * private layer, see {::addMarkerLayer}.\n         * @param {Point} A {Point} or point-compatible {Array}\n         * @param {Object} An {Object} with the following keys:\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markBufferPosition(bufferPosition: Point, options?: Object): DisplayMarker;\n        /**\n         * Create a marker on the default marker layer with the given screen\n         * position and no tail. To group multiple markers together in their own\n         * private layer, see {::addMarkerLayer}.\n         * @param {Point} A {Point} or point-compatible {Array}\n         * @param {Object} An {Object} with the following keys:\n         * @returns {DisplayMarker} Returns a {DisplayMarker}.\n         */\n        markScreenPosition(screenPosition: Point, options?: Object): DisplayMarker;\n        /**\n         * Find all {DisplayMarker}s on the default marker layer that\n         * match the given properties.\n         *\n         * This method finds markers based on the given properties. Markers can be\n         * associated with custom properties that will be compared with basic equality.\n         * In addition, there are several special properties that will be compared\n         * with the range of the markers rather than their properties.\n         * @param {Object} An {Object} containing properties that each returned marker must satisfy. Markers can be associated with custom properties, which are compared with basic equality. In addition, several reserved properties can be used to filter markers based on their current range:\n         * @returns {any[]} Returns an {Array} of {DisplayMarker}s\n         */\n        findMarkers(properties: Object): any[];\n        /**\n         * Get the {DisplayMarker} on the default layer for the given\n         * marker id.\n         * @param {number} {Number} id of the marker\n         */\n        getMarker(id: number): void;\n        /**\n         * Get all {DisplayMarker}s on the default marker layer. Consider\n         * using {::findMarkers}\n         */\n        getMarkers(): void;\n        /**\n         * Get the number of markers in the default marker layer.\n         * @returns {number} Returns a {Number}.\n         */\n        getMarkerCount(): number;\n        /**\n         * Create a marker layer to group related markers.\n         * @param {Object} An {Object} containing the following keys:\n         * @returns {DisplayMarkerLayer} Returns a {DisplayMarkerLayer}.\n         */\n        addMarkerLayer(options: Object): DisplayMarkerLayer;\n        /**\n         * Get a {DisplayMarkerLayer} by id.\n         * @param  The id of the marker layer to retrieve.\n         * @returns {DisplayMarkerLayer} Returns a {DisplayMarkerLayer} or `` if no layer exists with the\n        given id.\n         */\n        getMarkerLayer(id: any): DisplayMarkerLayer;\n        /**\n         * Get the default {DisplayMarkerLayer}.\n         *\n         * All marker APIs not tied to an explicit layer interact with this default\n         * layer.\n         * @returns {DisplayMarkerLayer} Returns a {DisplayMarkerLayer}.\n         */\n        getDefaultMarkerLayer(): DisplayMarkerLayer;\n        /**\n         * Get the position of the most recently added cursor in buffer\n         * coordinates.\n         * @returns {Point} Returns a {Point}\n         */\n        getCursorBufferPosition(): Point;\n        /**\n         * Get the position of all the cursor positions in buffer coordinates.\n         * @returns {any[]} Returns {Array} of {Point}s in the order they were added\n         */\n        getCursorBufferPositions(): any[];\n        /**\n         * Move the cursor to the given position in buffer coordinates.\n         *\n         * If there are multiple cursors, they will be consolidated to a single cursor.\n         * @param {Point} A {Point} or {Array} of `[row, column]`\n         * @param {Object} An {Object} containing the following keys:\n         */\n        setCursorBufferPosition(position: Point, options?: Object): void;\n        /**\n         * Get a {Cursor} at given screen coordinates {Point}\n         * @param {Point} A {Point} or {Array} of `[row, column]`\n         * @returns {Cursor} Returns the first matched {Cursor} or\n         */\n        getCursorAtScreenPosition(position: Point): Cursor;\n        /**\n         * Get the position of the most recently added cursor in screen\n         * coordinates.\n         * @returns {Point} Returns a {Point}.\n         */\n        getCursorScreenPosition(): Point;\n        /**\n         * Get the position of all the cursor positions in screen coordinates.\n         * @returns {any[]} Returns {Array} of {Point}s in the order the cursors were added\n         */\n        getCursorScreenPositions(): any[];\n        /**\n         * Move the cursor to the given position in screen coordinates.\n         *\n         * If there are multiple cursors, they will be consolidated to a single cursor.\n         * @param {Point} A {Point} or {Array} of `[row, column]`\n         * @param {Object} An {Object} combining options for {::clipScreenPosition} with:\n         */\n        setCursorScreenPosition(position: Point, options?: Object): void;\n        /**\n         * Add a cursor at the given position in buffer coordinates.\n         * @param {Point} A {Point} or {Array} of `[row, column]`\n         * @returns {Cursor} Returns a {Cursor}.\n         */\n        addCursorAtBufferPosition(bufferPosition: Point): Cursor;\n        /**\n         * Add a cursor at the position in screen coordinates.\n         * @param {Point} A {Point} or {Array} of `[row, column]`\n         * @returns {Cursor} Returns a {Cursor}.\n         */\n        addCursorAtScreenPosition(screenPosition: Point): Cursor;\n        /**\n         * @returns {boolean} Returns {Boolean} indicating whether or not there are multiple cursors.\n         */\n        hasMultipleCursors(): boolean;\n        /**\n         * Move every cursor up one row in screen coordinates.\n         * @param {number} {Number} number of lines to move\n         */\n        moveUp(lineCount?: number): void;\n        /**\n         * Move every cursor down one row in screen coordinates.\n         * @param {number} {Number} number of lines to move\n         */\n        moveDown(lineCount?: number): void;\n        /**\n         * Move every cursor left one column.\n         * @param {number} {Number} number of columns to move (default: 1)\n         */\n        moveLeft(columnCount?: number): void;\n        /**\n         * Move every cursor right one column.\n         * @param {number} {Number} number of columns to move (default: 1)\n         */\n        moveRight(columnCount?: number): void;\n        /**\n         * Move every cursor to the beginning of its line in buffer coordinates.\n         */\n        moveToBeginningOfLine(): void;\n        /**\n         * Move every cursor to the beginning of its line in screen coordinates.\n         */\n        moveToBeginningOfScreenLine(): void;\n        /**\n         * Move every cursor to the first non-whitespace character of its line.\n         */\n        moveToFirstCharacterOfLine(): void;\n        /**\n         * Move every cursor to the end of its line in buffer coordinates.\n         */\n        moveToEndOfLine(): void;\n        /**\n         * Move every cursor to the end of its line in screen coordinates.\n         */\n        moveToEndOfScreenLine(): void;\n        /**\n         * Move every cursor to the beginning of its surrounding word.\n         */\n        moveToBeginningOfWord(): void;\n        /**\n         * Move every cursor to the end of its surrounding word.\n         */\n        moveToEndOfWord(): void;\n        /**\n         * Move every cursor to the top of the buffer.\n         *\n         * If there are multiple cursors, they will be merged into a single cursor.\n         */\n        moveToTop(): void;\n        /**\n         * Move every cursor to the bottom of the buffer.\n         *\n         * If there are multiple cursors, they will be merged into a single cursor.\n         */\n        moveToBottom(): void;\n        /**\n         * Move every cursor to the beginning of the next word.\n         */\n        moveToBeginningOfNextWord(): void;\n        /**\n         * Move every cursor to the previous word boundary.\n         */\n        moveToPreviousWordBoundary(): void;\n        /**\n         * Move every cursor to the next word boundary.\n         */\n        moveToNextWordBoundary(): void;\n        /**\n         * Move every cursor to the previous subword boundary.\n         */\n        moveToPreviousSubwordBoundary(): void;\n        /**\n         * Move every cursor to the next subword boundary.\n         */\n        moveToNextSubwordBoundary(): void;\n        /**\n         * Move every cursor to the beginning of the next paragraph.\n         */\n        moveToBeginningOfNextParagraph(): void;\n        /**\n         * Move every cursor to the beginning of the previous paragraph.\n         */\n        moveToBeginningOfPreviousParagraph(): void;\n        /**\n         * @returns {Cursor} Returns the most recently added {Cursor}\n         */\n        getLastCursor(): Cursor;\n        /**\n         * @param  See {Cursor::getBeginningOfCurrentWordBufferPosition}.\n         * @returns  Returns the word surrounding the most recently added cursor.\n         */\n        getWordUnderCursor(options?: any): any;\n        /**\n         * Get an Array of all {Cursor}s.\n         */\n        getCursors(): void;\n        /**\n         * Get all {Cursors}s, ordered by their position in the buffer\n         * instead of the order in which they were added.\n         * @returns {any[]} Returns an {Array} of {Selection}s.\n         */\n        getCursorsOrderedByBufferPosition(): any[];\n        /**\n         * Get the selected text of the most recently added selection.\n         * @returns {string} Returns a {String}.\n         */\n        getSelectedText(): string;\n        /**\n         * Get the {Range} of the most recently added selection in buffer\n         * coordinates.\n         * @returns {Range} Returns a {Range}.\n         */\n        getSelectedBufferRange(): Range;\n        /**\n         * Get the {Range}s of all selections in buffer coordinates.\n         *\n         * The ranges are sorted by when the selections were added. Most recent at the end.\n         * @returns {any[]} Returns an {Array} of {Range}s.\n         */\n        getSelectedBufferRanges(): any[];\n        /**\n         * Set the selected range in buffer coordinates. If there are multiple\n         * selections, they are reduced to a single selection with the given range.\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @param {Object} An options {Object}:\n         */\n        setSelectedBufferRange(bufferRange: Range, options?: Object): void;\n        /**\n         * Set the selected ranges in buffer coordinates. If there are multiple\n         * selections, they are replaced by new selections with the given ranges.\n         * @param {any[]} An {Array} of {Range}s or range-compatible {Array}s.\n         * @param {Object} An options {Object}:\n         */\n        setSelectedBufferRanges(bufferRanges: any[], options?: Object): void;\n        /**\n         * Get the {Range} of the most recently added selection in screen\n         * coordinates.\n         * @returns {Range} Returns a {Range}.\n         */\n        getSelectedScreenRange(): Range;\n        /**\n         * Get the {Range}s of all selections in screen coordinates.\n         *\n         * The ranges are sorted by when the selections were added. Most recent at the end.\n         * @returns {any[]} Returns an {Array} of {Range}s.\n         */\n        getSelectedScreenRanges(): any[];\n        /**\n         * Set the selected range in screen coordinates. If there are multiple\n         * selections, they are reduced to a single selection with the given range.\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @param {Object} An options {Object}:\n         */\n        setSelectedScreenRange(screenRange: Range, options?: Object): void;\n        /**\n         * Set the selected ranges in screen coordinates. If there are multiple\n         * selections, they are replaced by new selections with the given ranges.\n         * @param {any[]} An {Array} of {Range}s or range-compatible {Array}s.\n         * @param {Object} An options {Object}:\n         */\n        setSelectedScreenRanges(screenRanges: any[], options?: Object): void;\n        /**\n         * Add a selection for the given range in buffer coordinates.\n         * @param {Range} A {Range}\n         * @param {Object} An options {Object}:\n         * @returns {Selection} Returns the added {Selection}.\n         */\n        addSelectionForBufferRange(bufferRange: Range, options?: Object): Selection;\n        /**\n         * Add a selection for the given range in screen coordinates.\n         * @param {Range} A {Range}\n         * @param {Object} An options {Object}:\n         */\n        addSelectionForScreenRange(screenRange: Range, options?: Object): void;\n        /**\n         * Select from the current cursor position to the given position in\n         * buffer coordinates.\n         *\n         * This method may merge selections that end up intesecting.\n         * @param {Point} An instance of {Point}, with a given `row` and `column`.\n         */\n        selectToBufferPosition(position: Point): void;\n        /**\n         * Select from the current cursor position to the given position in\n         * screen coordinates.\n         *\n         * This method may merge selections that end up intesecting.\n         * @param {Point} An instance of {Point}, with a given `row` and `column`.\n         */\n        selectToScreenPosition(position: Point): void;\n        /**\n         * Move the cursor of each selection one character upward while\n         * preserving the selection's tail position.\n         *\n         * This method may merge selections that end up intesecting.\n         * @param {number} {Number} number of rows to select (default: 1)\n         */\n        selectUp(rowCount?: number): void;\n        /**\n         * Move the cursor of each selection one character downward while\n         * preserving the selection's tail position.\n         *\n         * This method may merge selections that end up intesecting.\n         * @param {number} {Number} number of rows to select (default: 1)\n         */\n        selectDown(rowCount?: number): void;\n        /**\n         * Move the cursor of each selection one character leftward while\n         * preserving the selection's tail position.\n         *\n         * This method may merge selections that end up intesecting.\n         * @param {number} {Number} number of columns to select (default: 1)\n         */\n        selectLeft(columnCount?: number): void;\n        /**\n         * Move the cursor of each selection one character rightward while\n         * preserving the selection's tail position.\n         *\n         * This method may merge selections that end up intesecting.\n         * @param {number} {Number} number of columns to select (default: 1)\n         */\n        selectRight(columnCount?: number): void;\n        /**\n         * Select from the top of the buffer to the end of the last selection\n         * in the buffer.\n         *\n         * This method merges multiple selections into a single selection.\n         */\n        selectToTop(): void;\n        /**\n         * Selects from the top of the first selection in the buffer to the end\n         * of the buffer.\n         *\n         * This method merges multiple selections into a single selection.\n         */\n        selectToBottom(): void;\n        /**\n         * Select all text in the buffer.\n         *\n         * This method merges multiple selections into a single selection.\n         */\n        selectAll(): void;\n        /**\n         * Move the cursor of each selection to the beginning of its line\n         * while preserving the selection's tail position.\n         *\n         * This method may merge selections that end up intesecting.\n         */\n        selectToBeginningOfLine(): void;\n        /**\n         * Move the cursor of each selection to the first non-whitespace\n         * character of its line while preserving the selection's tail position. If the\n         * cursor is already on the first character of the line, move it to the\n         * beginning of the line.\n         *\n         * This method may merge selections that end up intersecting.\n         */\n        selectToFirstCharacterOfLine(): void;\n        /**\n         * Move the cursor of each selection to the end of its line while\n         * preserving the selection's tail position.\n         *\n         * This method may merge selections that end up intersecting.\n         */\n        selectToEndOfLine(): void;\n        /**\n         * Expand selections to the beginning of their containing word.\n         *\n         * Operates on all selections. Moves the cursor to the beginning of the\n         * containing word while preserving the selection's tail position.\n         */\n        selectToBeginningOfWord(): void;\n        /**\n         * Expand selections to the end of their containing word.\n         *\n         * Operates on all selections. Moves the cursor to the end of the containing\n         * word while preserving the selection's tail position.\n         */\n        selectToEndOfWord(): void;\n        /**\n         * For each selection, move its cursor to the preceding subword\n         * boundary while maintaining the selection's tail position.\n         *\n         * This method may merge selections that end up intersecting.\n         */\n        selectToPreviousSubwordBoundary(): void;\n        /**\n         * For each selection, move its cursor to the next subword boundary\n         * while maintaining the selection's tail position.\n         *\n         * This method may merge selections that end up intersecting.\n         */\n        selectToNextSubwordBoundary(): void;\n        /**\n         * For each cursor, select the containing line.\n         *\n         * This method merges selections on successive lines.\n         */\n        selectLinesContainingCursors(): void;\n        /**\n         * Select the word surrounding each cursor.\n         */\n        selectWordsContainingCursors(): void;\n        /**\n         * For each selection, move its cursor to the preceding word boundary\n         * while maintaining the selection's tail position.\n         *\n         * This method may merge selections that end up intersecting.\n         */\n        selectToPreviousWordBoundary(): void;\n        /**\n         * For each selection, move its cursor to the next word boundary while\n         * maintaining the selection's tail position.\n         *\n         * This method may merge selections that end up intersecting.\n         */\n        selectToNextWordBoundary(): void;\n        /**\n         * Expand selections to the beginning of the next word.\n         *\n         * Operates on all selections. Moves the cursor to the beginning of the next\n         * word while preserving the selection's tail position.\n         */\n        selectToBeginningOfNextWord(): void;\n        /**\n         * Expand selections to the beginning of the next paragraph.\n         *\n         * Operates on all selections. Moves the cursor to the beginning of the next\n         * paragraph while preserving the selection's tail position.\n         */\n        selectToBeginningOfNextParagraph(): void;\n        /**\n         * Expand selections to the beginning of the next paragraph.\n         *\n         * Operates on all selections. Moves the cursor to the beginning of the next\n         * paragraph while preserving the selection's tail position.\n         */\n        selectToBeginningOfPreviousParagraph(): void;\n        /**\n         * Select the range of the given marker if it is valid.\n         * @param {DisplayMarker} A {DisplayMarker}\n         * @returns {Range} Returns the selected {Range} or `` if the marker is invalid.\n         */\n        selectMarker(marker: DisplayMarker): Range;\n        /**\n         * Get the most recently added {Selection}.\n         * @returns {Selection} Returns a {Selection}.\n         */\n        getLastSelection(): Selection;\n        /**\n         * Get current {Selection}s.\n         * @returns {any[]} Returns: An {Array} of {Selection}s.\n         */\n        getSelections(): any[];\n        /**\n         * Get all {Selection}s, ordered by their position in the buffer\n         * instead of the order in which they were added.\n         * @returns {any[]} Returns an {Array} of {Selection}s.\n         */\n        getSelectionsOrderedByBufferPosition(): any[];\n        /**\n         * Determine if a given range in buffer coordinates intersects a\n         * selection.\n         * @param {Range} A {Range} or range-compatible {Array}.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        selectionIntersectsBufferRange(bufferRange: Range): boolean;\n        /**\n         * Scan regular expression matches in the entire buffer, calling the\n         * given iterator function on each match.\n         *\n         * `::scan` functions as the replace method as well via the `replace`\n         *\n         * If you're programmatically modifying the results, you may want to try\n         * {::backwardsScanInBufferRange} to avoid tripping over your own changes.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Function} A {Function} that's called on each match\n         */\n        scan(regex: RegExp, iterator: Function): void;\n        /**\n         * Scan regular expression matches in a given range, calling the given\n         * iterator function on each match.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Range} A {Range} in which to search.\n         * @param {Function} A {Function} that's called on each match with an {Object} containing the following keys:\n         */\n        scanInBufferRange(regex: RegExp, range: Range, iterator: Function): void;\n        /**\n         * Scan regular expression matches in a given range in reverse order,\n         * calling the given iterator function on each match.\n         * @param {RegExp} A {RegExp} to search for.\n         * @param {Range} A {Range} in which to search.\n         * @param {Function} A {Function} that's called on each match with an {Object} containing the following keys:\n         */\n        backwardsScanInBufferRange(regex: RegExp, range: Range, iterator: Function): void;\n        /**\n         * @returns {boolean} Returns a {Boolean} indicating whether softTabs are enabled for this\n        editor.\n         */\n        getSoftTabs(): boolean;\n        /**\n         * Enable or disable soft tabs for this editor.\n         * @param {boolean} A {Boolean}\n         */\n        setSoftTabs(softTabs: boolean): void;\n        /**\n         * Toggle soft tabs for this editor\n         */\n        toggleSoftTabs(): void;\n        /**\n         * Get the on-screen length of tab characters.\n         * @returns {number} Returns a {Number}.\n         */\n        getTabLength(): number;\n        /**\n         * Set the on-screen length of tab characters. Setting this to a\n         * {Number} This will override the `editor.tabLength` setting.\n         * @param {number} {Number} length of a single tab. Setting to `null` will fallback to using the `editor.tabLength` config setting\n         */\n        setTabLength(tabLength: number): void;\n        /**\n         * Determine if the buffer uses hard or soft tabs.\n         * @returns  Returns `true` if the first non-comment line with leading whitespace starts\n        with a space character.\n         * @returns  Returns `false` if it starts with a hard tab (`\\t`).\n         * @returns {boolean} Returns a {Boolean} or  if no non-comment lines had leading\n        whitespace.\n         */\n        usesSoftTabs(): boolean;\n        /**\n         * Get the text representing a single level of indent.\n         *\n         * If soft tabs are enabled, the text is composed of N spaces, where N is the\n         * tab length. Otherwise the text is a tab character (`\\t`).\n         * @returns {string} Returns a {String}.\n         */\n        getTabText(): string;\n        /**\n         * Determine whether lines in this editor are soft-wrapped.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isSoftWrapped(): boolean;\n        /**\n         * Enable or disable soft wrapping for this editor.\n         * @param {boolean} A {Boolean}\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        setSoftWrapped(softWrapped: boolean): boolean;\n        /**\n         * Toggle soft wrapping for this editor\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        toggleSoftWrapped(): boolean;\n        /**\n         * Gets the column at which column will soft wrap\n         */\n        getSoftWrapColumn(): void;\n        /**\n         * Get the indentation level of the given buffer row.\n         *\n         * Determines how deeply the given row is indented based on the soft tabs and\n         * tab length settings of this editor. Note that if soft tabs are enabled and\n         * the tab length is 2, a row with 4 leading spaces would have an indentation\n         * level of 2.\n         * @param {number} A {Number} indicating the buffer row.\n         * @returns {number} Returns a {Number}.\n         */\n        indentationForBufferRow(bufferRow: number): number;\n        /**\n         * Set the indentation level for the given buffer row.\n         *\n         * Inserts or removes hard tabs or spaces based on the soft tabs and tab length\n         * settings of this editor in order to bring it to the given indentation level.\n         * Note that if soft tabs are enabled and the tab length is 2, a row with 4\n         * leading spaces would have an indentation level of 2.\n         * @param {number} A {Number} indicating the buffer row.\n         * @param {number} A {Number} indicating the new indentation level.\n         * @param {Object} An {Object} with the following keys:\n         */\n        setIndentationForBufferRow(bufferRow: number, newLevel: number, options?: Object): void;\n        /**\n         * Indent rows intersecting selections by one level.\n         */\n        indentSelectedRows(): void;\n        /**\n         * Outdent rows intersecting selections by one level.\n         */\n        outdentSelectedRows(): void;\n        /**\n         * Get the indentation level of the given line of text.\n         *\n         * Determines how deeply the given line is indented based on the soft tabs and\n         * tab length settings of this editor. Note that if soft tabs are enabled and\n         * the tab length is 2, a row with 4 leading spaces would have an indentation\n         * level of 2.\n         * @param {string} A {String} representing a line of text.\n         * @returns {number} Returns a {Number}.\n         */\n        indentLevelForLine(line: string): number;\n        /**\n         * Indent rows intersecting selections based on the grammar's suggested\n         * indent level.\n         */\n        autoIndentSelectedRows(): void;\n        /**\n         * Get the current {Grammar} of this editor.\n         */\n        getGrammar(): void;\n        /**\n         * Set the current {Grammar} of this editor.\n         *\n         * Assigning a grammar will cause the editor to re-tokenize based on the new\n         * grammar.\n         * @param {Grammar} {Grammar}\n         */\n        setGrammar(grammar: Grammar): void;\n        /**\n         * @returns {ScopeDescriptor} Returns a {ScopeDescriptor} that includes this editor's language.\n        e.g. `['.source.ruby']`, or `['.source.coffee']`. You can use this with\n        {Config::get} to get language specific config values.\n         */\n        getRootScopeDescriptor(): ScopeDescriptor;\n        /**\n         * Get the syntactic scopeDescriptor for the given position in buffer\n         * coordinates. Useful with {Config::get}.\n         *\n         * For example, if called with a position inside the parameter list of an\n         * anonymous CoffeeScript function, the method returns the following array:\n         * `[\"source.coffee\", \"meta.inline.function.coffee\", \"variable.parameter.function.coffee\"]`\n         * @param {Point} A {Point} or {Array} of [row, column].\n         * @returns {ScopeDescriptor} Returns a {ScopeDescriptor}.\n         */\n        scopeDescriptorForBufferPosition(bufferPosition: Point): ScopeDescriptor;\n        /**\n         * Get the range in buffer coordinates of all tokens surrounding the\n         * cursor that match the given scope selector.\n         *\n         * For example, if you wanted to find the string surrounding the cursor, you\n         * could call `editor.bufferRangeForScopeAtCursor(\".string.quoted\")`.\n         * @param {string} {String} selector. e.g. `'.source.ruby'`\n         * @returns {Range} Returns a {Range}.\n         */\n        bufferRangeForScopeAtCursor(scopeSelector: string): Range;\n        /**\n         * Determine if the given row is entirely a comment\n         */\n        isBufferRowCommented(): void;\n        /**\n         * For each selection, copy the selected text.\n         */\n        copySelectedText(): void;\n        /**\n         * For each selection, cut the selected text.\n         */\n        cutSelectedText(): void;\n        /**\n         * For each selection, replace the selected text with the contents of\n         * the clipboard.\n         *\n         * If the clipboard contains the same number of selections as the current\n         * editor, each selection will be replaced with the content of the\n         * corresponding clipboard selection text.\n         * @param  See {Selection::insertText}.\n         */\n        pasteText(options?: any): void;\n        /**\n         * For each selection, if the selection is empty, cut all characters\n         * of the containing screen line following the cursor. Otherwise cut the selected\n         * text.\n         */\n        cutToEndOfLine(): void;\n        /**\n         * For each selection, if the selection is empty, cut all characters\n         * of the containing buffer line following the cursor. Otherwise cut the\n         * selected text.\n         */\n        cutToEndOfBufferLine(): void;\n        /**\n         * Fold the most recent cursor's row based on its indentation level.\n         *\n         * The fold will extend from the nearest preceding line with a lower\n         * indentation level up to the nearest following row with a lower indentation\n         * level.\n         */\n        foldCurrentRow(): void;\n        /**\n         * Unfold the most recent cursor's row by one level.\n         */\n        unfoldCurrentRow(): void;\n        /**\n         * Fold the given row in buffer coordinates based on its indentation\n         * level.\n         *\n         * If the given row is foldable, the fold will begin there. Otherwise, it will\n         * begin at the first foldable row preceding the given row.\n         * @param {number} A {Number}.\n         */\n        foldBufferRow(bufferRow: number): void;\n        /**\n         * Unfold all folds containing the given row in buffer coordinates.\n         * @param {number} A {Number}\n         */\n        unfoldBufferRow(bufferRow: number): void;\n        /**\n         * For each selection, fold the rows it intersects.\n         */\n        foldSelectedLines(): void;\n        /**\n         * Fold all foldable lines.\n         */\n        foldAll(): void;\n        /**\n         * Unfold all existing folds.\n         */\n        unfoldAll(): void;\n        /**\n         * Fold all foldable lines at the given indent level.\n         * @param {number} A {Number}.\n         */\n        foldAllAtIndentLevel(level: number): void;\n        /**\n         * Determine whether the given row in buffer coordinates is foldable.\n         *\n         * A *foldable* row is a row that *starts* a row range that can be folded.\n         * @param {number} A {Number}\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isFoldableAtBufferRow(bufferRow: number): boolean;\n        /**\n         * Determine whether the given row in screen coordinates is foldable.\n         *\n         * A *foldable* row is a row that *starts* a row range that can be folded.\n         * @param {number} A {Number}\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isFoldableAtScreenRow(bufferRow: number): boolean;\n        /**\n         * Fold the given buffer row if it isn't currently folded, and unfold\n         * it otherwise.\n         */\n        toggleFoldAtBufferRow(): void;\n        /**\n         * Determine whether the most recently added cursor's row is folded.\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isFoldedAtCursorRow(): boolean;\n        /**\n         * Determine whether the given row in buffer coordinates is folded.\n         * @param {number} A {Number}\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isFoldedAtBufferRow(bufferRow: number): boolean;\n        /**\n         * Determine whether the given row in screen coordinates is folded.\n         * @param {number} A {Number}\n         * @returns {boolean} Returns a {Boolean}.\n         */\n        isFoldedAtScreenRow(screenRow: number): boolean;\n        /**\n         * Add a custom {Gutter}.\n         * @param {Object} An {Object} with the following fields:\n         * @returns {Gutter} Returns the newly-created {Gutter}.\n         */\n        addGutter(options: Object): Gutter;\n        /**\n         * Get this editor's gutters.\n         * @returns {any[]} Returns an {Array} of {Gutter}s.\n         */\n        getGutters(): any[];\n        /**\n         * Get the gutter with the given name.\n         * @returns {Gutter} Returns a {Gutter}, or `null` if no gutter exists for the given name.\n         */\n        gutterWithName(): Gutter;\n        /**\n         * Scroll the editor to reveal the most recently added cursor if it is\n         * off-screen.\n         * @param {Object} {Object}\n         */\n        scrollToCursorPosition(options?: Object): void;\n        /**\n         * Scrolls the editor to the given buffer position.\n         * @param {Object} An object that represents a buffer position. It can be either an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\n         * @param {Object} {Object}\n         */\n        scrollToBufferPosition(bufferPosition: Object, options?: Object): void;\n        /**\n         * Scrolls the editor to the given screen position.\n         * @param {Object} An object that represents a screen position. It can be either  an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\n         * @param {Object} {Object}\n         */\n        scrollToScreenPosition(screenPosition: Object, options?: Object): void;\n        /**\n         * Retrieves the greyed out placeholder of a mini editor.\n         * @returns {string} Returns a {String}.\n         */\n        getPlaceholderText(): string;\n        /**\n         * Set the greyed out placeholder of a mini editor. Placeholder text\n         * will be displayed when the editor has no content.\n         * @param {string} {String} text that is displayed when the editor has no content.\n         */\n        setPlaceholderText(placeholderText: string): void;\n    }\n\n    /**\n     * Handles loading and activating available themes.\n     *\n     * An instance of this class is always available as the `atom.themes` global.\n     *\n     * file: src/theme-manager.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/theme-manager.coffee#L11\n     */\n    class ThemeManager {\n        /**\n         * Invoke `callback` when style sheet changes associated with\n         * updating the list of active themes have completed.\n         * @param {Function} {Function}\n         */\n        onDidChangeActiveThemes(callback: Function): void;\n        /**\n         * @returns {any[]} Returns an {Array} of {String}s of all the loaded theme names.\n         */\n        getLoadedThemeNames(): any[];\n        /**\n         * @returns {any[]} Returns an {Array} of all the loaded themes.\n         */\n        getLoadedThemes(): any[];\n        /**\n         * @returns {any[]} Returns an {Array} of {String}s all the active theme names.\n         */\n        getActiveThemeNames(): any[];\n        /**\n         * @returns {any[]} Returns an {Array} of all the active themes.\n         */\n        getActiveThemes(): any[];\n        /**\n         * Get the enabled theme names from the config.\n         * @returns  Returns an array of theme names in the order that they should be activated.\n         */\n        getEnabledThemeNames(): any;\n    }\n\n    /**\n     * Associates tooltips with HTML elements.\n     *\n     * You can get the `TooltipManager` via `atom.tooltips`.\n     *\n     * file: src/tooltip-manager.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/tooltip-manager.coffee#L47\n     */\n    class TooltipManager {\n        /**\n         * Add a tooltip to the given element.\n         * @param  An `HTMLElement`\n         * @param  An object with one or more of the following options:\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        tooltip.\n         */\n        add(target: any, options: any): Disposable;\n        /**\n         * Find the tooltips that have been applied to the given element.\n         * @param  The `HTMLElement` to find tooltips on.\n         * @returns {any[]} Returns an {Array} of `Tooltip` objects that match the `target`.\n         */\n        findTooltips(target: any): any[];\n    }\n\n    class JQuery implements JQuery {}\n\n    /**\n     * View class that extends the jQuery prototype.\n     *\n     * Extending classes must implement a `@content` method.\n     *\n     * file: src/space-pen.coffee\n     * srcUrl: https://github.com/atom/space-pen/blob/v5.1.2/src/space-pen.coffee#L75\n     */\n    class View extends JQuery {\n        /**\n         * Add the given subview wired to an outlet with the given name\n         * @param {string} {String} name of the subview\n         * @param  DOM element or jQuery node subview\n         */\n        static subview(name: string, view: any): void;\n        /**\n         * Add a text node with the given text content\n         * @param {string} {String} text contents of the node\n         */\n        static text(string: string): void;\n        /**\n         * Add a new tag with the given name\n         * @param {string} {String} name of the tag like 'li', etc\n         * @param  other arguments\n         */\n        static tag(tagName: string, ...args: any[]): void;\n        /**\n         * Add new child DOM nodes from the given raw HTML string.\n         * @param {string} {String} HTML content\n         */\n        static raw(string: string): void;\n\n        /**\n         * Preempt events registered with jQuery's `::on`.\n         * @param {string} A event name {String}.\n         * @param {Function} A {Function} to execute when the eventName is triggered.\n         */\n        preempt(eventName: string, handler: Function): void;\n    }\n\n    /**\n     * `ViewRegistry` handles the association between model and view\n     * types in Atom. We call this association a View Provider. As in, for a given\n     * model, this class can provide a view via {::getView}, as long as the\n     * model/view association was registered via {::addViewProvider}\n     *\n     * If you're adding your own kind of pane item, a good strategy for all but the\n     * simplest items is to separate the model and the view. The model handles\n     * application logic and is the primary point of API interaction. The view\n     * just handles presentation.\n     *\n     * Note: Models can be any object, but must implement a `getTitle()` function\n     * if they are to be displayed in a {Pane}\n     *\n     * View providers inform the workspace how your model objects should be\n     * presented in the DOM. A view provider must always return a DOM node, which\n     * makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)\n     * an ideal tool for implementing views in Atom.\n     *\n     * You can access the `ViewRegistry` object via `atom.views`.\n     *\n     * file: src/view-registry.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/view-registry.coffee#L49\n     */\n    class ViewRegistry {\n        /**\n         * Add a provider that will be used to construct views in the\n         * workspace's view layer based on model objects in its model layer.\n         * @param {Function} Constructor {Function} for your model. If a constructor is given, the `createView` function will only be used for model objects inheriting from that constructor. Otherwise, it will will be called for any object.\n         * @param {Function} Factory {Function} that is passed an instance of your model and must return a subclass of `HTMLElement` or `undefined`. If it returns `undefined`, then the registry will continue to search for other view providers.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        added provider.\n         */\n        addViewProvider(modelConstructor?: Function, createView?: Function): Disposable;\n        /**\n         * Get the view associated with an object in the workspace.\n         *\n         * If you're just *using* the workspace, you shouldn't need to access the view\n         * layer, but view layer access may be necessary if you want to perform DOM\n         * manipulation that isn't supported via the model API.\n         *\n         * ## View Resolution Algorithm\n         *\n         * The view associated with the object is resolved using the following\n         * sequence\n         *\n         * 1. Is the object an instance of `HTMLElement`? If true, return the object.\n         * 1. Does the object have a property named `element` with a value which is\n         *   an instance of `HTMLElement`? If true, return the property value.\n         * 1. Is the object a jQuery object, indicated by the presence of a `jquery`\n         *   property? If true, return the root DOM element (i.e. `object[0]`).\n         * 1. Has a view provider been registered for the object? If true, use the\n         *   provider to create a view associated with the object, and return the\n         *   view.\n         *\n         * If no associated view is returned by the sequence an error is thrown.\n         * @param  The object for which you want to retrieve a view. This can be a pane item, a pane, or the workspace itself.\n         * @returns  Returns a DOM element.\n         */\n        getView(object: any): any;\n    }\n\n    /**\n     * Represents the state of the user interface for the entire window.\n     * An instance of this class is available via the `atom.workspace` global.\n     *\n     * Interact with this object to open files, be notified of current and future\n     * editors, and manipulate panes. To add panels, use {Workspace::addTopPanel}\n     * and friends.\n     *\n     * file: src/workspace.coffee\n     * srcUrl: https://github.com/atom/atom/blob/v1.15.0/src/workspace.coffee#L25\n     */\n    class Workspace {\n        /**\n         * Invoke the given callback with all current and future text\n         * editors in the workspace.\n         * @param {Function} {Function} to be called with current and future text editors.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeTextEditors(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with all current and future panes items\n         * in the workspace.\n         * @param {Function} {Function} to be called with current and future pane items.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observePaneItems(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the active pane item changes.\n         *\n         * Because observers are invoked synchronously, it's important not to perform\n         * any expensive operations via this method. Consider\n         * {::onDidStopChangingActivePaneItem} to delay operations until after changes\n         * stop occurring.\n         * @param {Function} {Function} to be called when the active pane item changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeActivePaneItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the active pane item stops\n         * changing.\n         *\n         * Observers are called asynchronously 100ms after the last active pane item\n         * change. Handling changes here rather than in the synchronous\n         * {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly\n         * changing or closing tabs and ensures critical UI feedback, like changing the\n         * highlighted tab, gets priority over work that can be done asynchronously.\n         * @param {Function} {Function} to be called when the active pane item stopts changing.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidStopChangingActivePaneItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with the current active pane item and\n         * with all future active pane items in the workspace.\n         * @param {Function} {Function} to be called when the active pane item changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeActivePaneItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback whenever an item is opened. Unlike\n         * {::onDidAddPaneItem}, observers will be notified for items that are already\n         * present in the workspace when they are reopened.\n         * @param {Function} {Function} to be called whenever an item is opened.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidOpen(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a pane is added to the workspace.\n         * @param {Function} {Function} to be called panes are added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddPane(callback: Function): Disposable;\n        /**\n         * Invoke the given callback before a pane is destroyed in the\n         * workspace.\n         * @param {Function} {Function} to be called before panes are destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onWillDestroyPane(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a pane is destroyed in the\n         * workspace.\n         * @param {Function} {Function} to be called panes are destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidDestroyPane(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with all current and future panes in the\n         * workspace.\n         * @param {Function} {Function} to be called with current and future panes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observePanes(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when the active pane changes.\n         * @param {Function} {Function} to be called when the active pane changes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidChangeActivePane(callback: Function): Disposable;\n        /**\n         * Invoke the given callback with the current active pane and when\n         * the active pane changes.\n         * @param {Function} {Function} to be called with the current and future active# panes.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        observeActivePane(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a pane item is added to the\n         * workspace.\n         * @param {Function} {Function} to be called when pane items are added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddPaneItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a pane item is about to be\n         * destroyed, before the user is prompted to save it.\n         * @param {Function} {Function} to be called before pane items are destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose` can be called to unsubscribe.\n         */\n        onWillDestroyPaneItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a pane item is destroyed.\n         * @param {Function} {Function} to be called when pane items are destroyed.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose` can be called to unsubscribe.\n         */\n        onDidDestroyPaneItem(callback: Function): Disposable;\n        /**\n         * Invoke the given callback when a text editor is added to the\n         * workspace.\n         * @param {Function} {Function} to be called panes are added.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.\n         */\n        onDidAddTextEditor(callback: Function): Disposable;\n        /**\n         * Opens the given URI in Atom asynchronously.\n         * If the URI is already open, the existing item for that URI will be\n         * activated. If no URI is given, or no registered opener can open\n         * the URI, a new empty {TextEditor} will be created.\n         * @param {string} A {String} containing a URI.\n         * @param {Object} {Object}\n         * @returns {Promise<any>} Returns a {Promise} that resolves to the {TextEditor} for the file URI.\n         */\n        open(uri?: string, options?: Object): Promise<any>;\n        /**\n         * @param {Object} An {Object} you want to perform the check against.\n         * @returns {boolean} Returns a {Boolean} that is `true` if `object` is a `TextEditor`.\n         */\n        isTextEditor(object: Object): boolean;\n        /**\n         * Create a new text editor.\n         * @returns {TextEditor} Returns a {TextEditor}.\n         */\n        buildTextEditor(): TextEditor;\n        /**\n         * Asynchronously reopens the last-closed item's URI if it hasn't already been\n         * reopened.\n         * @returns {Promise<any>} Returns a {Promise} that is resolved when the item is opened\n         */\n        reopenItem(): Promise<any>;\n        /**\n         * Register an opener for a uri.\n         *\n         * When a URI is opened via {Workspace::open}, Atom loops through its registered\n         * opener functions until one returns a value for the given uri.\n         * Openers are expected to return an object that inherits from HTMLElement or\n         * a model which has an associated view in the {ViewRegistry}.\n         * A {TextEditor} will be used if no opener returns a value.\n         * @param {Function} A {Function} to be called when a path is being opened.\n         * @returns {Disposable} Returns a {Disposable} on which `.dispose()` can be called to remove the\n        opener.\n\n        Note that the opener will be called if and only if the URI is not already open\n        in the current pane. The searchAllPanes flag expands the search from the\n        current pane to all panes. If you wish to open a view of a different type for\n        a file that is already open, consider changing the protocol of the URI. For\n        example, perhaps you wish to preview a rendered version of the file `/foo/bar/baz.quux`\n        that is already open in a text editor view. You could signal this by calling\n        {Workspace::open} on the URI `quux-preview://foo/bar/baz.quux`. Then your opener\n        can check the protocol for quux-preview and only handle those URIs that match.\n         */\n        addOpener(opener: Function): Disposable;\n        /**\n         * Get all pane items in the workspace.\n         * @returns {any[]} Returns an {Array} of items.\n         */\n        getPaneItems(): any[];\n        /**\n         * Get the active {Pane}'s active item.\n         * @returns {Object} Returns an pane item {Object}.\n         */\n        getActivePaneItem(): Object;\n        /**\n         * Get all text editors in the workspace.\n         * @returns {any[]} Returns an {Array} of {TextEditor}s.\n         */\n        getTextEditors(): any[];\n        /**\n         * Get the active item if it is an {TextEditor}.\n         * @returns {TextEditor} Returns an {TextEditor} or `` if the current active item is not an\n        {TextEditor}.\n         */\n        getActiveTextEditor(): TextEditor;\n        /**\n         * Get all panes in the workspace.\n         * @returns {any[]} Returns an {Array} of {Pane}s.\n         */\n        getPanes(): any[];\n        /**\n         * Get the active {Pane}.\n         * @returns {Pane} Returns a {Pane}.\n         */\n        getActivePane(): Pane;\n        /**\n         * Make the next pane active.\n         */\n        activateNextPane(): void;\n        /**\n         * Make the previous pane active.\n         */\n        activatePreviousPane(): void;\n        /**\n         * Get the first {Pane} with an item for the given URI.\n         * @param {string} {String} uri\n         * @returns {Pane} Returns a {Pane} or `` if no pane exists for the given URI.\n         */\n        paneForURI(uri: string): Pane;\n        /**\n         * Get the {Pane} containing the given item.\n         * @param  Item the returned pane contains.\n         * @returns {Pane} Returns a {Pane} or `` if no pane exists for the given item.\n         */\n        paneForItem(item: any): Pane;\n        /**\n         * Get an {Array} of all the panel items at the bottom of the editor window.\n         */\n        getBottomPanels(): void;\n        /**\n         * Adds a panel item to the bottom of the editor window.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addBottomPanel(options: Object): Panel;\n        /**\n         * Get an {Array} of all the panel items to the left of the editor window.\n         */\n        getLeftPanels(): void;\n        /**\n         * Adds a panel item to the left of the editor window.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addLeftPanel(options: Object): Panel;\n        /**\n         * Get an {Array} of all the panel items to the right of the editor window.\n         */\n        getRightPanels(): void;\n        /**\n         * Adds a panel item to the right of the editor window.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addRightPanel(options: Object): Panel;\n        /**\n         * Get an {Array} of all the panel items at the top of the editor window.\n         */\n        getTopPanels(): void;\n        /**\n         * Adds a panel item to the top of the editor window above the tabs.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addTopPanel(options: Object): Panel;\n        /**\n         * Get an {Array} of all the panel items in the header.\n         */\n        getHeaderPanels(): void;\n        /**\n         * Adds a panel item to the header.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addHeaderPanel(options: Object): Panel;\n        /**\n         * Get an {Array} of all the panel items in the footer.\n         */\n        getFooterPanels(): void;\n        /**\n         * Adds a panel item to the footer.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addFooterPanel(options: Object): Panel;\n        /**\n         * Get an {Array} of all the modal panel items\n         */\n        getModalPanels(): void;\n        /**\n         * Adds a panel item as a modal dialog.\n         * @param {Object} {Object}\n         * @returns {Panel} Returns a {Panel}\n         */\n        addModalPanel(options: Object): Panel;\n        /**\n         * @param  Item the panel contains\n         * @returns {Panel} Returns the {Panel} associated with the given item.\n         * @returns  Returns\n        `null` when the item has no panel.\n         */\n        panelForItem(item: any): Panel;\n        /**\n         * Performs a search across all files in the workspace.\n         * @param {RegExp} {RegExp} to search with.\n         * @param {Object} {Object}\n         * @param {Function} {Function} callback on each file found.\n         * @returns {Promise<any>} Returns a {Promise} with a `cancel()` method that will cancel all\n        of the underlying searches that were started as part of this scan.\n         */\n        scan(regex: RegExp, options?: Object, iterator?: Function): Promise<any>;\n        /**\n         * Performs a replace across all the specified files in the project.\n         * @param {RegExp} A {RegExp} to search with.\n         * @param {string} {String} to replace all matches of regex with.\n         * @param {any[]} An {Array} of file path strings to run the replace on.\n         * @param {Function} A {Function} callback on each file with replacements:\n         * @returns {Promise<any>} Returns a {Promise}.\n         */\n        replace(regex: RegExp, replacementText: string, filePaths: any[], iterator: Function): Promise<any>;\n    }\n\n}\n"]}