"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const highlightSync = require("atom-highlight");
const etch = require("etch");
const ide_haskell_repl_base_1 = require("../ide-haskell-repl-base");
const button_1 = require("./button");
const editor_1 = require("./editor");
const termEscapeRx = /\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g;
class IdeHaskellReplView extends ide_haskell_repl_base_1.IdeHaskellReplBase {
    constructor(props) {
        super(props.upiPromise, props.state, `view:${props.state.uri}`);
        this.props = props;
        this.destroyed = false;
        this.initialized = false;
        this.focus = () => {
            this.refs && this.refs.editor && this.refs.editor.element.focus();
        };
        this.disposables = new atom_1.CompositeDisposable();
        this.editor = atom.workspace.buildTextEditor({
            lineNumberGutterVisible: false,
            softWrapped: true,
        });
        atom.grammars.assignLanguageMode(this.editor.getBuffer(), 'source.haskell');
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            if (editor.getPath() === this.uri) {
                this.disposables.add(editor.onDidSave(() => {
                    if (this.autoReloadRepeat) {
                        this.ghciReloadRepeat();
                    }
                }));
            }
        }), atom.config.observe('editor.fontSize', (fontSize) => {
            this.outputFontSize = `${fontSize}px`;
        }), atom.config.observe('editor.fontFamily', (fontFamily) => {
            this.outputFontFamily = fontFamily;
        }));
        etch.initialize(this);
        if (this.props.state.focus)
            setImmediate(() => this.focus());
        this.registerEditor().catch((e) => {
            atom.notifications.addError(e.toString(), {
                detail: e.stack,
                dismissable: true,
            });
        });
    }
    async execCommand() {
        if (!this.initialized)
            return undefined;
        const inp = this.editor.getBuffer().getText();
        this.editor.setText('');
        if (this.ghci && this.ghci.isBusy()) {
            this.messages.push({
                text: inp,
                hl: false,
                cls: 'ide-haskell-repl-input-stdin',
            });
            this.ghci.writeRaw(inp);
            await this.update();
            return undefined;
        }
        else {
            this.history.save(inp);
            return this.runCommand(inp);
        }
    }
    copyText(command) {
        this.editor.setText(command);
        atom.views.getView(this.editor).focus();
    }
    historyBack() {
        const current = this.editor.getText();
        this.editor.setText(this.history.goBack(current));
    }
    historyForward() {
        this.editor.setText(this.history.goForward());
    }
    clear() {
        this.messages = [];
        this.clearErrors();
        this.update();
    }
    getURI() {
        return `ide-haskell://repl/${this.uri}`;
    }
    getTitle() {
        return `REPL: ${this.uri}`;
    }
    async destroy() {
        await etch.destroy(this);
        this.destroyed = true;
        this.disposables.dispose();
        return super.destroy();
    }
    serialize() {
        return {
            deserializer: 'IdeHaskellReplView',
            uri: this.uri,
            content: this.messages,
            history: this.history.serialize(),
            autoReloadRepeat: this.autoReloadRepeat,
            focus: this.isFocused(),
        };
    }
    async update() {
        const atEnd = !!this.refs &&
            this.refs.output.scrollTop + this.refs.output.clientHeight >=
                this.refs.output.scrollHeight;
        const focused = this.isFocused();
        await etch.update(this);
        if (atEnd) {
            this.refs.output.scrollTop =
                this.refs.output.scrollHeight - this.refs.output.clientHeight;
        }
        if (focused) {
            this.focus();
        }
    }
    render() {
        return (etch.dom("div", { className: "ide-haskell-repl", tabIndex: "-1", on: { focus: this.focus } },
            etch.dom("div", { ref: "output", className: "ide-haskell-repl-output native-key-bindings", tabIndex: "-1", style: {
                    fontSize: this.outputFontSize,
                    fontFamily: this.outputFontFamily,
                } }, this.renderOutput()),
            this.renderErrDiv(),
            etch.dom("div", { className: "button-container" },
                this.renderPrompt(),
                etch.dom(button_1.Button, { cls: "reload-repeat", tooltip: "Reload file and repeat last command", command: "ide-haskell-repl:reload-repeat", parent: this }),
                etch.dom(button_1.Button, { cls: "auto-reload-repeat", tooltip: "Toggle reload-repeat on file save", command: "ide-haskell-repl:toggle-auto-reload-repeat", state: this.autoReloadRepeat, parent: this }),
                etch.dom(button_1.Button, { cls: "interrupt", tooltip: "Interrupt current computation", command: "ide-haskell-repl:ghci-interrupt", parent: this }),
                etch.dom(button_1.Button, { cls: "clear", tooltip: "Clear output", command: "ide-haskell-repl:clear-output", parent: this })),
            etch.dom("div", { className: "ide-haskell-repl-editor" },
                etch.dom("div", { className: "editor-container" },
                    etch.dom(editor_1.Editor, { ref: "editor", element: atom.views.getView(this.editor) })))));
    }
    async onInitialLoad() {
        if (!this.ghci) {
            throw new Error('No GHCI instance!');
        }
        await super.onInitialLoad();
        const res = await this.ghci.load(this.uri);
        this.prompt = res.prompt[1];
        this.errorsFromStderr(res.stderr);
        this.initialized = true;
    }
    renderErrDiv() {
        if (!this.upi) {
            return etch.dom("div", { className: "ide-haskell-repl-error" }, this.renderErrors());
        }
        else {
            return null;
        }
    }
    renderErrors() {
        return this.errors.map((err) => this.renderError(err));
    }
    renderError(error) {
        const pos = error.position ? atom_1.Point.fromObject(error.position) : undefined;
        const uri = error.uri || '<interactive>';
        const positionText = pos ? `${uri}: ${pos.row + 1}, ${pos.column + 1}` : uri;
        const context = error.context || '';
        return (etch.dom("div", null,
            positionText,
            ": ",
            error.severity,
            ": ",
            context,
            error.message));
    }
    renderPrompt() {
        const busyClass = this.ghci && this.ghci.isBusy() ? ' ide-haskell-repl-busy' : '';
        return (etch.dom("div", { class: `repl-prompt${busyClass}` },
            this.prompt || '',
            ">"));
    }
    renderOutput() {
        const maxMsg = atom.config.get('ide-haskell-repl.maxMessages');
        if (maxMsg > 0) {
            this.messages = this.messages.slice(-maxMsg);
        }
        return this.messages.map((msg) => {
            const { text, cls, hl } = msg;
            let { hlcache } = msg;
            const cleanText = text.replace(termEscapeRx, '');
            if (hl) {
                if (!hlcache) {
                    hlcache = msg.hlcache = highlightSync({
                        fileContents: cleanText,
                        scopeName: 'source.haskell',
                        nbsp: false,
                    });
                }
                return (etch.dom("pre", { className: cls, innerHTML: hlcache }));
            }
            else {
                return etch.dom("pre", { className: cls }, cleanText);
            }
        });
    }
    isFocused() {
        return (!!this.refs &&
            !!document.activeElement &&
            this.refs.editor.element.contains(document.activeElement));
    }
    async registerEditor() {
        const we = await this.props.watchEditorPromise;
        if (this.destroyed)
            return;
        this.disposables.add(we(this.editor, ['ide-haskell-repl']));
    }
}
exports.IdeHaskellReplView = IdeHaskellReplView;
//# sourceMappingURL=data:application/json;base64,