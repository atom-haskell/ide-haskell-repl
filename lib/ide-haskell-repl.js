"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const ide_haskell_repl_view_1 = require("./views/ide-haskell-repl-view");
const upiConsumer_1 = require("./upiConsumer");
tslib_1.__exportStar(require("./config"), exports);
let disposables;
const editorMap = new WeakMap();
let resolveUPIPromise;
let upiPromise;
let resolveWatchEditorPromise;
const watchEditorPromise = new Promise((resolve) => {
    resolveWatchEditorPromise = resolve;
});
function activate() {
    disposables = new atom_1.CompositeDisposable();
    initUpiPromise();
    disposables.add(atom.workspace.addOpener((uriToOpen) => {
        const m = uriToOpen.match(/^ide-haskell:\/\/repl\/(.*)$/);
        if (!(m && m[1])) {
            return undefined;
        }
        return createReplView({ uri: m[1], focus: true });
    }));
    disposables.add(atom.commands.add('atom-text-editor', {
        'ide-haskell-repl:toggle': async ({ currentTarget }) => open(currentTarget.getModel()),
    }));
    const commandFunction = (func) => ({ currentTarget, }) => {
        const view = editorMap.get(currentTarget.getModel());
        if (view) {
            ;
            view[func]();
        }
    };
    disposables.add(atom.commands.add('atom-text-editor.ide-haskell-repl', {
        'ide-haskell-repl:exec-command': commandFunction('execCommand'),
        'ide-haskell-repl:history-back': commandFunction('historyBack'),
        'ide-haskell-repl:history-forward': commandFunction('historyForward'),
        'ide-haskell-repl:ghci-reload': commandFunction('ghciReload'),
        'ide-haskell-repl:reload-repeat': commandFunction('ghciReloadRepeat'),
        'ide-haskell-repl:toggle-auto-reload-repeat': commandFunction('toggleAutoReloadRepeat'),
        'ide-haskell-repl:ghci-interrupt': commandFunction('interrupt'),
        'ide-haskell-repl:clear-output': commandFunction('clear'),
    }));
    const externalCommandFunction = (func) => ({ currentTarget, }) => {
        open(currentTarget.getModel(), false).then((model) => model[func]());
    };
    disposables.add(atom.commands.add('atom-text-editor:not(.ide-haskell-repl)', {
        'ide-haskell-repl:copy-selection-to-repl-input': ({ currentTarget }) => {
            const ed = currentTarget.getModel();
            const cmd = ed.getLastSelection().getText();
            open(ed).then((model) => model.copyText(cmd));
        },
        'ide-haskell-repl:run-selection-in-repl': ({ currentTarget }) => {
            const ed = currentTarget.getModel();
            const cmd = ed.getLastSelection().getText();
            open(ed, false).then(async (model) => model.runCommand(cmd));
        },
        'ide-haskell-repl:ghci-reload': externalCommandFunction('ghciReload'),
        'ide-haskell-repl:reload-repeat': externalCommandFunction('ghciReloadRepeat'),
        'ide-haskell-repl:toggle-auto-reload-repeat': externalCommandFunction('toggleAutoReloadRepeat'),
    }));
    disposables.add(atom.menu.add([
        {
            label: 'Haskell IDE',
            submenu: [
                {
                    label: 'Open REPL',
                    command: 'ide-haskell-repl:toggle',
                },
            ],
        },
    ]));
    setTimeout(() => {
        resolveUPIPromise();
    }, 5000);
}
exports.activate = activate;
function createReplView(state) {
    const upiPromise = initUpiPromise();
    const view = new ide_haskell_repl_view_1.IdeHaskellReplView({ upiPromise, state, watchEditorPromise });
    editorMap.set(view.editor, view);
    return view;
}
exports.createReplView = createReplView;
async function open(editor, activate = true) {
    const grammar = editor && editor.getGrammar();
    const scope = grammar && grammar.scopeName;
    let uri;
    if (scope && scope.endsWith('haskell')) {
        uri = editor.getPath();
    }
    else {
        uri = '';
    }
    return atom.workspace.open(`ide-haskell://repl/${uri}`, {
        split: 'right',
        searchAllPanes: true,
        activatePane: activate,
    });
}
function deactivate() {
    upiPromise = undefined;
    disposables.dispose();
}
exports.deactivate = deactivate;
function consumeUPI(register) {
    const consumer = new upiConsumer_1.UPIConsumer(register);
    disposables.add(consumer);
    resolveUPIPromise(consumer);
    return consumer;
}
exports.consumeUPI = consumeUPI;
function autocompleteProvider_3_0_0() {
    return {
        scopeSelector: '.source.haskell',
        disableForScopeSelector: '.source.haskell .comment',
        inclusionPriority: 0,
        labels: ['ide-haskell-repl'],
        getSuggestions: async ({ editor, prefix, }) => {
            const view = editorMap.get(editor);
            if (!view) {
                return [];
            }
            return view.getCompletions(prefix);
        },
    };
}
exports.autocompleteProvider_3_0_0 = autocompleteProvider_3_0_0;
function consumeWatchEditor(watchEditor) {
    resolveWatchEditorPromise(watchEditor);
}
exports.consumeWatchEditor = consumeWatchEditor;
async function initUpiPromise() {
    if (!upiPromise) {
        upiPromise = new Promise((resolve) => {
            resolveUPIPromise = resolve;
        });
    }
    return upiPromise;
}
//# sourceMappingURL=data:application/json;base64,