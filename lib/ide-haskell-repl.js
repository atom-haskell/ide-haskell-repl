"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const ide_haskell_repl_view_1 = require("./views/ide-haskell-repl-view");
const upiConsumer_1 = require("./upiConsumer");
const util_1 = require("./util");
const crypto_1 = require("crypto");
tslib_1.__exportStar(require("./config"), exports);
let disposables;
const editorMap = new WeakMap();
let resolveUPIPromise;
let upiPromise;
let resolveWatchEditorPromise;
const watchEditorPromise = new Promise((resolve) => {
    resolveWatchEditorPromise = resolve;
});
function activate() {
    disposables = new atom_1.CompositeDisposable();
    switch (atom.config.get('ide-haskell-repl').defaultRepl) {
        case 'cabal':
            atom.config.set('ide-haskell-repl.defaultRepl', 'cabal-v1');
            break;
        case 'cabal-nix':
        case 'cabal-new':
            atom.config.set('ide-haskell-repl.defaultRepl', 'cabal-v2');
            break;
    }
    initUpiPromise();
    disposables.add(atom.workspace.addOpener((uriToOpen) => {
        const m = uriToOpen.match(/^ide-haskell:\/\/repl\/(.*)$/);
        if (m && m[1] !== undefined) {
            return createReplView({ uri: m[1], focus: true });
        }
        return undefined;
    }));
    disposables.add(atom.commands.add('atom-text-editor', 'ide-haskell-repl:toggle', async ({ currentTarget }) => {
        util_1.handlePromise(open(currentTarget.getModel()));
    }));
    if (process.platform === 'win32') {
        disposables.add(atom.commands.add('atom-workspace', 'ide-haskell-repl:setup-ghci-wrapper', async () => {
            const downloadUrl = 'https://github.com/atom-haskell/win-ghci-wrapper/releases/download/v0.0.2/ghci-wrapper.exe';
            const expectedDigest = '4663295d71a5057dee41945a52d39ed61fcd8830';
            try {
                atom.notifications.addInfo('GHCi Wrapper setup started...');
                const result = await window.fetch(downloadUrl, {
                    redirect: 'follow',
                });
                if (!result.ok) {
                    atom.notifications.addError('Getting ghci-wrapper.exe failed', {
                        detail: result.statusText,
                        dismissable: true,
                    });
                    return;
                }
                const configDir = new atom_1.Directory(atom.getConfigDirPath());
                const subdir = configDir.getSubdirectory('ide-haskell-repl');
                if (!(await subdir.exists()))
                    subdir.create();
                const file = subdir.getFile('ghci-wrapper.exe');
                const stream = file.createWriteStream();
                const buf = Buffer.from(await result.arrayBuffer());
                const hash = crypto_1.createHash('sha1');
                hash.update(buf);
                const digest = hash.digest('hex');
                if (digest !== expectedDigest) {
                    atom.notifications.addError('Got ghci-wrapper.exe, but hash check failed!', {
                        detail: `Expected ${expectedDigest} but got ${digest}`,
                        dismissable: true,
                    });
                    return;
                }
                stream.write(buf);
                stream.close();
                atom.config.set('ide-haskell-repl.ghciWrapperPath', file.getPath());
                atom.notifications.addSuccess('GHCi Wrapper setup finished!');
            }
            catch (e) {
                atom.notifications.addFatalError('GHCi wrapper setup failed', {
                    stack: e.stack,
                    detail: e.message,
                });
            }
        }));
    }
    const commandFunction = (func) => ({ currentTarget, }) => {
        const view = editorMap.get(currentTarget.getModel());
        if (view) {
            ;
            view[func]();
        }
    };
    disposables.add(atom.commands.add('atom-text-editor.ide-haskell-repl', {
        'ide-haskell-repl:exec-command': commandFunction('execCommand'),
        'ide-haskell-repl:history-back': commandFunction('historyBack'),
        'ide-haskell-repl:history-forward': commandFunction('historyForward'),
        'ide-haskell-repl:ghci-reload': commandFunction('ghciReload'),
        'ide-haskell-repl:reload-repeat': commandFunction('ghciReloadRepeat'),
        'ide-haskell-repl:toggle-auto-reload-repeat': commandFunction('toggleAutoReloadRepeat'),
        'ide-haskell-repl:ghci-interrupt': commandFunction('interrupt'),
        'ide-haskell-repl:clear-output': commandFunction('clear'),
    }));
    const externalCommandFunction = (func) => ({ currentTarget, }) => {
        open(currentTarget.getModel(), false).then((model) => model[func]());
    };
    disposables.add(atom.commands.add('atom-text-editor:not(.ide-haskell-repl)', {
        'ide-haskell-repl:copy-selection-to-repl-input': ({ currentTarget }) => {
            const ed = currentTarget.getModel();
            const cmd = ed.getLastSelection().getText();
            open(ed).then((model) => model.copyText(cmd));
        },
        'ide-haskell-repl:run-selection-in-repl': ({ currentTarget }) => {
            const ed = currentTarget.getModel();
            const cmd = ed.getLastSelection().getText();
            open(ed, false).then(async (model) => model.runCommand(cmd));
        },
        'ide-haskell-repl:ghci-reload': externalCommandFunction('ghciReload'),
        'ide-haskell-repl:reload-repeat': externalCommandFunction('ghciReloadRepeat'),
        'ide-haskell-repl:toggle-auto-reload-repeat': externalCommandFunction('toggleAutoReloadRepeat'),
    }));
    disposables.add(atom.menu.add([
        {
            label: 'Haskell IDE',
            submenu: [
                {
                    label: 'Open REPL',
                    command: 'ide-haskell-repl:toggle',
                },
            ],
        },
    ]));
    setTimeout(() => {
        resolveUPIPromise();
    }, 5000);
}
exports.activate = activate;
function createReplView(state) {
    const upiPromise = initUpiPromise();
    const view = new ide_haskell_repl_view_1.IdeHaskellReplView({ upiPromise, state, watchEditorPromise });
    editorMap.set(view.editor, view);
    return view;
}
exports.createReplView = createReplView;
async function open(editor, activate = true) {
    const grammar = editor && editor.getGrammar();
    const scope = grammar && grammar.scopeName;
    let uri;
    if (scope && scope.endsWith('haskell')) {
        uri = editor.getPath();
    }
    else {
        uri = '';
    }
    return atom.workspace.open(`ide-haskell://repl/${uri}`, {
        split: 'right',
        searchAllPanes: true,
        activatePane: activate,
    });
}
function deactivate() {
    upiPromise = undefined;
    disposables.dispose();
}
exports.deactivate = deactivate;
function consumeUPI(register) {
    const consumer = new upiConsumer_1.UPIConsumer(register);
    disposables.add(consumer);
    resolveUPIPromise(consumer);
    return consumer;
}
exports.consumeUPI = consumeUPI;
function autocompleteProvider_3_0_0() {
    return {
        scopeSelector: '.source.haskell',
        disableForScopeSelector: '.source.haskell .comment',
        inclusionPriority: 0,
        labels: ['ide-haskell-repl'],
        getSuggestions: async ({ editor, prefix, }) => {
            const view = editorMap.get(editor);
            if (!view) {
                return [];
            }
            return view.getCompletions(prefix);
        },
    };
}
exports.autocompleteProvider_3_0_0 = autocompleteProvider_3_0_0;
function consumeWatchEditor(watchEditor) {
    resolveWatchEditorPromise(watchEditor);
}
exports.consumeWatchEditor = consumeWatchEditor;
async function initUpiPromise() {
    if (!upiPromise) {
        upiPromise = new Promise((resolve) => {
            resolveUPIPromise = resolve;
        });
    }
    return upiPromise;
}
//# sourceMappingURL=data:application/json;base64,