"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const atom_1 = require("atom");
const ide_haskell_repl_base_1 = require("./ide-haskell-repl-base");
const ide_haskell_repl_bg_1 = require("./ide-haskell-repl-bg");
const ide_haskell_repl_view_1 = require("./views/ide-haskell-repl-view");
tslib_1.__exportStar(require("./config"), exports);
let disposables;
const editorMap = new WeakMap();
const bgEditorMap = new Map();
let resolveUPIPromise;
const upiPromise = new Promise((resolve) => { resolveUPIPromise = resolve; });
let upi;
function activate() {
    disposables = new atom_1.CompositeDisposable();
    disposables.add(atom.workspace.addOpener((uriToOpen) => {
        const m = uriToOpen.match(/^ide-haskell:\/\/repl\/(.*)$/);
        if (!(m && m[1])) {
            return undefined;
        }
        return createReplView({ uri: m[1], focus: true });
    }));
    disposables.add(atom.commands.add('atom-text-editor', {
        'ide-haskell-repl:toggle': async ({ currentTarget }) => open(currentTarget.getModel()),
    }));
    const commandFunction = (func) => ({ currentTarget }) => {
        const view = editorMap.get(currentTarget.getModel());
        if (view) {
            view[func]();
        }
    };
    disposables.add(atom.commands.add('atom-text-editor.ide-haskell-repl', {
        'ide-haskell-repl:exec-command': commandFunction('execCommand'),
        'ide-haskell-repl:history-back': commandFunction('historyBack'),
        'ide-haskell-repl:history-forward': commandFunction('historyForward'),
        'ide-haskell-repl:ghci-reload': commandFunction('ghciReload'),
        'ide-haskell-repl:reload-repeat': commandFunction('ghciReloadRepeat'),
        'ide-haskell-repl:toggle-auto-reload-repeat': commandFunction('toggleAutoReloadRepeat'),
        'ide-haskell-repl:ghci-interrupt': commandFunction('interrupt'),
        'ide-haskell-repl:clear-output': commandFunction('clear'),
    }));
    const externalCommandFunction = (func) => ({ currentTarget }) => {
        open(currentTarget.getModel(), false)
            .then((model) => model[func]());
    };
    disposables.add(atom.commands.add('atom-text-editor:not(.ide-haskell-repl)', {
        'ide-haskell-repl:copy-selection-to-repl-input': ({ currentTarget }) => {
            const ed = currentTarget.getModel();
            const cmd = ed.getLastSelection().getText();
            open(ed).then((model) => model.copyText(cmd));
        },
        'ide-haskell-repl:run-selection-in-repl': ({ currentTarget }) => {
            const ed = currentTarget.getModel();
            const cmd = ed.getLastSelection().getText();
            open(ed, false).then(async (model) => model.runCommand(cmd));
        },
        'ide-haskell-repl:ghci-reload': externalCommandFunction('ghciReload'),
        'ide-haskell-repl:reload-repeat': externalCommandFunction('ghciReloadRepeat'),
        'ide-haskell-repl:toggle-auto-reload-repeat': externalCommandFunction('toggleAutoReloadRepeat'),
    }));
    disposables.add(atom.menu.add([{
            label: 'Haskell IDE',
            submenu: [{
                    label: 'Open REPL',
                    command: 'ide-haskell-repl:toggle',
                }],
        }]));
    setTimeout(() => {
        if (resolveUPIPromise && !upi) {
            resolveUPIPromise();
        }
    }, 5000);
}
exports.activate = activate;
function createReplView(state) {
    const view = new ide_haskell_repl_view_1.IdeHaskellReplView({ upiPromise, state });
    editorMap.set(view.editor, view);
    return view;
}
exports.createReplView = createReplView;
async function open(editor, activate = true) {
    const grammar = editor && editor.getGrammar();
    const scope = grammar && grammar.scopeName;
    let uri;
    if (scope && scope.endsWith('haskell')) {
        uri = editor.getPath();
    }
    else {
        uri = '';
    }
    return atom.workspace.open(`ide-haskell://repl/${uri}`, {
        split: 'right',
        searchAllPanes: true,
        activatePane: activate,
    });
}
function deactivate() {
    disposables.dispose();
}
exports.deactivate = deactivate;
function consumeUPI(register) {
    upi = register({
        name: 'ide-haskell-repl',
        messageTypes: {
            repl: {
                uriFilter: false,
                autoScroll: true,
            },
        },
        tooltip: {
            priority: 200,
            handler: shouldShowTooltip,
        },
        events: {
            onDidSaveBuffer: didSaveBuffer,
        },
    });
    resolveUPIPromise(upi);
    disposables.add(upi);
    return upi;
}
exports.consumeUPI = consumeUPI;
async function shouldShowTooltip(editor, crange, _type) {
    if (!atom.config.get('ide-haskell-repl.showTypes')) {
        return undefined;
    }
    const path = editor.getPath();
    if (!path)
        return undefined;
    const { cwd, cabal, comp } = await ide_haskell_repl_base_1.IdeHaskellReplBase.componentFromURI(path);
    const hash = `${cwd.getPath()}::${cabal && cabal.name}::${comp && comp[0]}`;
    let bg = bgEditorMap.get(hash);
    if (!bg) {
        if (!editor.getPath()) {
            return undefined;
        }
        await upiPromise;
        bg = new ide_haskell_repl_bg_1.IdeHaskellReplBg(upiPromise, { uri: editor.getPath() });
        bgEditorMap.set(hash, bg);
    }
    return bg.showTypeAt(path, crange);
}
async function didSaveBuffer(buffer) {
    if (!atom.config.get('ide-haskell-repl.checkOnSave')) {
        return;
    }
    const path = buffer.getPath();
    if (!path)
        return;
    const { cwd, cabal, comp } = await ide_haskell_repl_base_1.IdeHaskellReplBase.componentFromURI(path);
    const hash = `${cwd.getPath()}::${cabal && cabal.name}::${comp && comp[0]}`;
    const bgt = bgEditorMap.get(hash);
    if (bgt) {
        bgt.ghciReload();
    }
    else {
        if (!buffer.getPath()) {
            return;
        }
        await upiPromise;
        const bg = new ide_haskell_repl_bg_1.IdeHaskellReplBg(upiPromise, { uri: buffer.getPath() });
        bgEditorMap.set(hash, bg);
    }
}
function autocompleteProvider_3_0_0() {
    return {
        scopeSelector: '.source.haskell',
        disableForScopeSelector: '.source.haskell .comment',
        getTextEditorSelector: () => 'atom-text-editor.ide-haskell-repl',
        inclusionPriority: 0,
        getSuggestions: async ({ editor, prefix }) => {
            const view = editorMap.get(editor);
            if (!view) {
                return [];
            }
            return view.getCompletions(prefix);
        },
    };
}
exports.autocompleteProvider_3_0_0 = autocompleteProvider_3_0_0;
//# sourceMappingURL=data:application/json;base64,