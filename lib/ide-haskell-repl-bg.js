"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const ide_haskell_repl_base_1 = require("./ide-haskell-repl-base");
const path = require("path");
class IdeHaskellReplBg extends ide_haskell_repl_base_1.IdeHaskellReplBase {
    constructor(consumer, state) {
        super(Promise.resolve(consumer), state, `bg:${state.uri}`);
        this.types = [];
        this.gotTypes = this.readyPromise;
    }
    async showTypeAt(uri, inrange) {
        await this.gotTypes;
        if (this.types.length === 0) {
            await this.ghciReload();
        }
        const typeRec = this.types.find((tr) => tr !== undefined &&
            tr.uri === uri &&
            atom_1.Range.fromObject(tr.span).containsRange(inrange));
        if (!typeRec) {
            return undefined;
        }
        const { span: range, type: text } = typeRec;
        const highlighter = 'hint.type.haskell';
        return { range, text: { text, highlighter } };
    }
    async destroy() {
        this.types = [];
        return super.destroy();
    }
    async update() {
    }
    async onInitialLoad() {
        await super.onInitialLoad();
    }
    async onLoad() {
        await super.onLoad();
        await (this.gotTypes = this.getAllTypes());
    }
    async getAllTypes() {
        if (!this.ghci) {
            throw new Error('No GHCI instance!');
        }
        if (!atom.config.get('ide-haskell-repl.showTypes'))
            return;
        const { stdout } = await this.ghci.writeLines([':all-types']);
        const cwd = this.cwd
            ? this.cwd
            : await ide_haskell_repl_base_1.IdeHaskellReplBase.getRootDir(this.uri);
        const rx = /^(.*):\((\d+),(\d+)\)-\((\d+),(\d+)\):\s*(.*)$/;
        this.types = stdout.map((line) => {
            const match = line.match(rx);
            if (!match)
                return undefined;
            return {
                uri: path.isAbsolute(match[1])
                    ? match[1]
                    : cwd.getFile(match[1]).getPath(),
                type: match[6],
                span: [
                    [parseInt(match[2], 10) - 1, parseInt(match[3], 10) - 1],
                    [parseInt(match[4], 10) - 1, parseInt(match[5], 10) - 1],
                ],
            };
        });
    }
}
exports.IdeHaskellReplBg = IdeHaskellReplBg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtcmVwbC1iZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZGUtaGFza2VsbC1yZXBsLWJnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTRCO0FBQzVCLG1FQUlnQztBQUNoQyw2QkFBNEI7QUFXNUIsTUFBYSxnQkFBaUIsU0FBUSwwQ0FBa0I7SUFHdEQsWUFBWSxRQUFxQixFQUFFLEtBQWlCO1FBQ2xELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBSHBELFVBQUssR0FBbUMsRUFBRSxDQUFBO1FBSWhELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUNuQyxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFXLEVBQUUsT0FBYztRQUNqRCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUE7UUFDbkIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7U0FDeEI7UUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDN0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUNMLEVBQUUsS0FBSyxTQUFTO1lBQ2hCLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRztZQUNkLFlBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FDbkQsQ0FBQTtRQUNELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLFNBQVMsQ0FBQTtTQUNqQjtRQUNELE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUE7UUFDM0MsTUFBTSxXQUFXLEdBQUcsbUJBQW1CLENBQUE7UUFDdkMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQTtJQUMvQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDZixPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU07SUFFbkIsQ0FBQztJQUVTLEtBQUssQ0FBQyxhQUFhO1FBQzNCLE1BQU0sS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQzdCLENBQUM7SUFFUyxLQUFLLENBQUMsTUFBTTtRQUNwQixNQUFNLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRVMsS0FBSyxDQUFDLFdBQVc7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDckM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUM7WUFBRSxPQUFNO1FBQzFELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtRQUM3RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRztZQUNsQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFDVixDQUFDLENBQUMsTUFBTSwwQ0FBa0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2pELE1BQU0sRUFBRSxHQUFHLGdEQUFnRCxDQUFBO1FBQzNELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQy9CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDNUIsSUFBSSxDQUFDLEtBQUs7Z0JBQUUsT0FBTyxTQUFTLENBQUE7WUFDNUIsT0FBTztnQkFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNWLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDbkMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxFQUFFO29CQUNKLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3hELENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3pEO2FBQ2EsQ0FBQTtRQUNsQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQXZFRCw0Q0F1RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYW5nZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQge1xuICBJQ29udGVudEl0ZW0sXG4gIElkZUhhc2tlbGxSZXBsQmFzZSxcbiAgSVZpZXdTdGF0ZSxcbn0gZnJvbSAnLi9pZGUtaGFza2VsbC1yZXBsLWJhc2UnXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBVUElDb25zdW1lciB9IGZyb20gJy4vdXBpQ29uc3VtZXInXG5cbmV4cG9ydCB7IElWaWV3U3RhdGUsIElDb250ZW50SXRlbSB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVR5cGVSZWNvcmQge1xuICB1cmk6IHN0cmluZ1xuICB0eXBlOiBzdHJpbmdcbiAgc3BhbjogW1tudW1iZXIsIG51bWJlcl0sIFtudW1iZXIsIG51bWJlcl1dXG59XG5cbmV4cG9ydCBjbGFzcyBJZGVIYXNrZWxsUmVwbEJnIGV4dGVuZHMgSWRlSGFza2VsbFJlcGxCYXNlIHtcbiAgcHJpdmF0ZSB0eXBlczogQXJyYXk8SVR5cGVSZWNvcmQgfCB1bmRlZmluZWQ+ID0gW11cbiAgcHJpdmF0ZSBnb3RUeXBlczogUHJvbWlzZTx2b2lkPlxuICBjb25zdHJ1Y3Rvcihjb25zdW1lcjogVVBJQ29uc3VtZXIsIHN0YXRlOiBJVmlld1N0YXRlKSB7XG4gICAgc3VwZXIoUHJvbWlzZS5yZXNvbHZlKGNvbnN1bWVyKSwgc3RhdGUsIGBiZzoke3N0YXRlLnVyaX1gKVxuICAgIHRoaXMuZ290VHlwZXMgPSB0aGlzLnJlYWR5UHJvbWlzZVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNob3dUeXBlQXQodXJpOiBzdHJpbmcsIGlucmFuZ2U6IFJhbmdlKSB7XG4gICAgYXdhaXQgdGhpcy5nb3RUeXBlc1xuICAgIGlmICh0aGlzLnR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYXdhaXQgdGhpcy5naGNpUmVsb2FkKClcbiAgICB9XG4gICAgY29uc3QgdHlwZVJlYyA9IHRoaXMudHlwZXMuZmluZChcbiAgICAgICh0cikgPT5cbiAgICAgICAgdHIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICB0ci51cmkgPT09IHVyaSAmJlxuICAgICAgICBSYW5nZS5mcm9tT2JqZWN0KHRyLnNwYW4pLmNvbnRhaW5zUmFuZ2UoaW5yYW5nZSksXG4gICAgKVxuICAgIGlmICghdHlwZVJlYykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICBjb25zdCB7IHNwYW46IHJhbmdlLCB0eXBlOiB0ZXh0IH0gPSB0eXBlUmVjXG4gICAgY29uc3QgaGlnaGxpZ2h0ZXIgPSAnaGludC50eXBlLmhhc2tlbGwnXG4gICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQ6IHsgdGV4dCwgaGlnaGxpZ2h0ZXIgfSB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSgpIHtcbiAgICB0aGlzLnR5cGVzID0gW11cbiAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlKCkge1xuICAgIC8vIG5vb3BcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBvbkluaXRpYWxMb2FkKCkge1xuICAgIGF3YWl0IHN1cGVyLm9uSW5pdGlhbExvYWQoKVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIG9uTG9hZCgpIHtcbiAgICBhd2FpdCBzdXBlci5vbkxvYWQoKVxuICAgIGF3YWl0ICh0aGlzLmdvdFR5cGVzID0gdGhpcy5nZXRBbGxUeXBlcygpKVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGdldEFsbFR5cGVzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5naGNpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIEdIQ0kgaW5zdGFuY2UhJylcbiAgICB9XG4gICAgLy8gZG9uJ3Qgd2FzdGUgdGltZSBpZiBkb24ndCBuZWVkIHRvXG4gICAgaWYgKCFhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXJlcGwuc2hvd1R5cGVzJykpIHJldHVyblxuICAgIGNvbnN0IHsgc3Rkb3V0IH0gPSBhd2FpdCB0aGlzLmdoY2kud3JpdGVMaW5lcyhbJzphbGwtdHlwZXMnXSlcbiAgICBjb25zdCBjd2QgPSB0aGlzLmN3ZFxuICAgICAgPyB0aGlzLmN3ZFxuICAgICAgOiBhd2FpdCBJZGVIYXNrZWxsUmVwbEJhc2UuZ2V0Um9vdERpcih0aGlzLnVyaSlcbiAgICBjb25zdCByeCA9IC9eKC4qKTpcXCgoXFxkKyksKFxcZCspXFwpLVxcKChcXGQrKSwoXFxkKylcXCk6XFxzKiguKikkL1xuICAgIHRoaXMudHlwZXMgPSBzdGRvdXQubWFwKChsaW5lKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2gocngpXG4gICAgICBpZiAoIW1hdGNoKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmk6IHBhdGguaXNBYnNvbHV0ZShtYXRjaFsxXSlcbiAgICAgICAgICA/IG1hdGNoWzFdXG4gICAgICAgICAgOiBjd2QuZ2V0RmlsZShtYXRjaFsxXSkuZ2V0UGF0aCgpLFxuICAgICAgICB0eXBlOiBtYXRjaFs2XSxcbiAgICAgICAgc3BhbjogW1xuICAgICAgICAgIFtwYXJzZUludChtYXRjaFsyXSwgMTApIC0gMSwgcGFyc2VJbnQobWF0Y2hbM10sIDEwKSAtIDFdLFxuICAgICAgICAgIFtwYXJzZUludChtYXRjaFs0XSwgMTApIC0gMSwgcGFyc2VJbnQobWF0Y2hbNV0sIDEwKSAtIDFdLFxuICAgICAgICBdLFxuICAgICAgfSBhcyBJVHlwZVJlY29yZFxuICAgIH0pXG4gIH1cbn1cbiJdfQ==