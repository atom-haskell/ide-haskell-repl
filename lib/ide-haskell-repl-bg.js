"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const ide_haskell_repl_base_1 = require("./ide-haskell-repl-base");
const path = require("path");
class IdeHaskellReplBg extends ide_haskell_repl_base_1.IdeHaskellReplBase {
    constructor(consumer, state) {
        super(Promise.resolve(consumer), state, `bg:${state.uri}`);
        this.types = [];
        this.gotTypes = this.readyPromise;
    }
    async showTypeAt(uri, inrange) {
        await this.gotTypes;
        const typeRec = this.types.find((tr) => tr !== undefined &&
            tr.uri === uri &&
            atom_1.Range.fromObject(tr.span).containsRange(inrange));
        if (!typeRec) {
            return undefined;
        }
        const { span: range, type: text } = typeRec;
        const highlighter = 'hint.type.haskell';
        return { range, text: { text, highlighter } };
    }
    async destroy() {
        this.types = [];
        return super.destroy();
    }
    async update() {
    }
    async onInitialLoad() {
        await this.ghciReload();
        await super.onInitialLoad();
    }
    async onReload() {
        await (this.gotTypes = this.getAllTypes());
        await super.onReload();
    }
    async getAllTypes() {
        if (!this.ghci) {
            throw new Error('No GHCI instance!');
        }
        if (!atom.config.get('ide-haskell-repl.showTypes'))
            return;
        const { stdout } = await this.ghci.writeLines([':all-types']);
        const cwd = this.cwd
            ? this.cwd
            : await ide_haskell_repl_base_1.IdeHaskellReplBase.getRootDir(this.uri);
        const rx = /^(.*):\((\d+),(\d+)\)-\((\d+),(\d+)\):\s*(.*)$/;
        this.types = stdout.map((line) => {
            const match = line.match(rx);
            if (!match)
                return undefined;
            return {
                uri: path.isAbsolute(match[1])
                    ? match[1]
                    : cwd.getFile(match[1]).getPath(),
                type: match[6],
                span: [
                    [parseInt(match[2], 10) - 1, parseInt(match[3], 10) - 1],
                    [parseInt(match[4], 10) - 1, parseInt(match[5], 10) - 1],
                ],
            };
        });
    }
}
exports.IdeHaskellReplBg = IdeHaskellReplBg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtcmVwbC1iZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZGUtaGFza2VsbC1yZXBsLWJnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTRCO0FBQzVCLG1FQUlnQztBQUNoQyw2QkFBNEI7QUFXNUIsTUFBYSxnQkFBaUIsU0FBUSwwQ0FBa0I7SUFHdEQsWUFBWSxRQUFxQixFQUFFLEtBQWlCO1FBQ2xELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBSHBELFVBQUssR0FBbUMsRUFBRSxDQUFBO1FBSWhELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUNuQyxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFXLEVBQUUsT0FBYztRQUNqRCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUE7UUFDbkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzdCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FDTCxFQUFFLEtBQUssU0FBUztZQUNoQixFQUFFLENBQUMsR0FBRyxLQUFLLEdBQUc7WUFDZCxZQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQ25ELENBQUE7UUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxTQUFTLENBQUE7U0FDakI7UUFDRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBQzNDLE1BQU0sV0FBVyxHQUFHLG1CQUFtQixDQUFBO1FBQ3ZDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUE7SUFDL0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO1FBQ2YsT0FBTyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNO0lBRW5CLENBQUM7SUFFUyxLQUFLLENBQUMsYUFBYTtRQUMzQixNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUN2QixNQUFNLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUM3QixDQUFDO0lBRVMsS0FBSyxDQUFDLFFBQVE7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7UUFDMUMsTUFBTSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVTLEtBQUssQ0FBQyxXQUFXO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDO1lBQUUsT0FBTTtRQUMxRCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDN0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUc7WUFDbEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ1YsQ0FBQyxDQUFDLE1BQU0sMENBQWtCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNqRCxNQUFNLEVBQUUsR0FBRyxnREFBZ0QsQ0FBQTtRQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzVCLElBQUksQ0FBQyxLQUFLO2dCQUFFLE9BQU8sU0FBUyxDQUFBO1lBQzVCLE9BQU87Z0JBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDVixDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQ25DLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNkLElBQUksRUFBRTtvQkFDSixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN4RCxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN6RDthQUNhLENBQUE7UUFDbEIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUFyRUQsNENBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtcbiAgSUNvbnRlbnRJdGVtLFxuICBJZGVIYXNrZWxsUmVwbEJhc2UsXG4gIElWaWV3U3RhdGUsXG59IGZyb20gJy4vaWRlLWhhc2tlbGwtcmVwbC1iYXNlJ1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgVVBJQ29uc3VtZXIgfSBmcm9tICcuL3VwaUNvbnN1bWVyJ1xuXG5leHBvcnQgeyBJVmlld1N0YXRlLCBJQ29udGVudEl0ZW0gfVxuXG5leHBvcnQgaW50ZXJmYWNlIElUeXBlUmVjb3JkIHtcbiAgdXJpOiBzdHJpbmdcbiAgdHlwZTogc3RyaW5nXG4gIHNwYW46IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXVxufVxuXG5leHBvcnQgY2xhc3MgSWRlSGFza2VsbFJlcGxCZyBleHRlbmRzIElkZUhhc2tlbGxSZXBsQmFzZSB7XG4gIHByaXZhdGUgdHlwZXM6IEFycmF5PElUeXBlUmVjb3JkIHwgdW5kZWZpbmVkPiA9IFtdXG4gIHByaXZhdGUgZ290VHlwZXM6IFByb21pc2U8dm9pZD5cbiAgY29uc3RydWN0b3IoY29uc3VtZXI6IFVQSUNvbnN1bWVyLCBzdGF0ZTogSVZpZXdTdGF0ZSkge1xuICAgIHN1cGVyKFByb21pc2UucmVzb2x2ZShjb25zdW1lciksIHN0YXRlLCBgYmc6JHtzdGF0ZS51cml9YClcbiAgICB0aGlzLmdvdFR5cGVzID0gdGhpcy5yZWFkeVByb21pc2VcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93VHlwZUF0KHVyaTogc3RyaW5nLCBpbnJhbmdlOiBSYW5nZSkge1xuICAgIGF3YWl0IHRoaXMuZ290VHlwZXNcbiAgICBjb25zdCB0eXBlUmVjID0gdGhpcy50eXBlcy5maW5kKFxuICAgICAgKHRyKSA9PlxuICAgICAgICB0ciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHRyLnVyaSA9PT0gdXJpICYmXG4gICAgICAgIFJhbmdlLmZyb21PYmplY3QodHIuc3BhbikuY29udGFpbnNSYW5nZShpbnJhbmdlKSxcbiAgICApXG4gICAgaWYgKCF0eXBlUmVjKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGNvbnN0IHsgc3BhbjogcmFuZ2UsIHR5cGU6IHRleHQgfSA9IHR5cGVSZWNcbiAgICBjb25zdCBoaWdobGlnaHRlciA9ICdoaW50LnR5cGUuaGFza2VsbCdcbiAgICByZXR1cm4geyByYW5nZSwgdGV4dDogeyB0ZXh0LCBoaWdobGlnaHRlciB9IH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZXN0cm95KCkge1xuICAgIHRoaXMudHlwZXMgPSBbXVxuICAgIHJldHVybiBzdXBlci5kZXN0cm95KClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoKSB7XG4gICAgLy8gbm9vcFxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIG9uSW5pdGlhbExvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5naGNpUmVsb2FkKCkgLy8gcmVxdWlyZWQgdG8gY29sbGVjdCB0eXBlc1xuICAgIGF3YWl0IHN1cGVyLm9uSW5pdGlhbExvYWQoKVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIG9uUmVsb2FkKCkge1xuICAgIGF3YWl0ICh0aGlzLmdvdFR5cGVzID0gdGhpcy5nZXRBbGxUeXBlcygpKVxuICAgIGF3YWl0IHN1cGVyLm9uUmVsb2FkKClcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBnZXRBbGxUeXBlcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuZ2hjaSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBHSENJIGluc3RhbmNlIScpXG4gICAgfVxuICAgIC8vIGRvbid0IHdhc3RlIHRpbWUgaWYgZG9uJ3QgbmVlZCB0b1xuICAgIGlmICghYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1yZXBsLnNob3dUeXBlcycpKSByZXR1cm5cbiAgICBjb25zdCB7IHN0ZG91dCB9ID0gYXdhaXQgdGhpcy5naGNpLndyaXRlTGluZXMoWyc6YWxsLXR5cGVzJ10pXG4gICAgY29uc3QgY3dkID0gdGhpcy5jd2RcbiAgICAgID8gdGhpcy5jd2RcbiAgICAgIDogYXdhaXQgSWRlSGFza2VsbFJlcGxCYXNlLmdldFJvb3REaXIodGhpcy51cmkpXG4gICAgY29uc3QgcnggPSAvXiguKik6XFwoKFxcZCspLChcXGQrKVxcKS1cXCgoXFxkKyksKFxcZCspXFwpOlxccyooLiopJC9cbiAgICB0aGlzLnR5cGVzID0gc3Rkb3V0Lm1hcCgobGluZSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKHJ4KVxuICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXJpOiBwYXRoLmlzQWJzb2x1dGUobWF0Y2hbMV0pXG4gICAgICAgICAgPyBtYXRjaFsxXVxuICAgICAgICAgIDogY3dkLmdldEZpbGUobWF0Y2hbMV0pLmdldFBhdGgoKSxcbiAgICAgICAgdHlwZTogbWF0Y2hbNl0sXG4gICAgICAgIHNwYW46IFtcbiAgICAgICAgICBbcGFyc2VJbnQobWF0Y2hbMl0sIDEwKSAtIDEsIHBhcnNlSW50KG1hdGNoWzNdLCAxMCkgLSAxXSxcbiAgICAgICAgICBbcGFyc2VJbnQobWF0Y2hbNF0sIDEwKSAtIDEsIHBhcnNlSW50KG1hdGNoWzVdLCAxMCkgLSAxXSxcbiAgICAgICAgXSxcbiAgICAgIH0gYXMgSVR5cGVSZWNvcmRcbiAgICB9KVxuICB9XG59XG4iXX0=