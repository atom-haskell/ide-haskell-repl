"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const atom_1 = require("atom");
async function setupGhciWrapper() {
    const downloadUrl = 'https://github.com/atom-haskell/win-ghci-wrapper/releases/download/v0.0.2/ghci-wrapper.exe';
    const expectedDigest = '4663295d71a5057dee41945a52d39ed61fcd8830';
    try {
        atom.notifications.addInfo('GHCi Wrapper setup started...');
        const buf = await downloadFile(downloadUrl);
        checkHash(buf, expectedDigest);
        const filePath = await writeFile(buf);
        atom.config.set('ide-haskell-repl.ghciWrapperPath', filePath);
        atom.notifications.addSuccess('GHCi Wrapper setup finished!');
    }
    catch (e) {
        if (e !== null) {
            atom.notifications.addFatalError('GHCi wrapper setup failed', {
                stack: e.stack,
                detail: e.message,
                dismissable: true,
            });
        }
    }
}
exports.setupGhciWrapper = setupGhciWrapper;
async function downloadFile(url) {
    const result = await window.fetch(url, {
        redirect: 'follow',
    });
    if (!result.ok) {
        atom.notifications.addError('Getting ghci-wrapper.exe failed', {
            detail: result.statusText,
            dismissable: true,
        });
        throw null;
    }
    return Buffer.from(await result.arrayBuffer());
}
function checkHash(buf, expected) {
    const hash = crypto_1.createHash('sha1');
    hash.update(buf);
    const digest = hash.digest('hex');
    if (digest !== expected) {
        atom.notifications.addError('Got ghci-wrapper.exe, but hash check failed!', {
            detail: `Expected ${expected} but got ${digest}`,
            dismissable: true,
        });
        throw null;
    }
}
async function writeFile(buf) {
    const configDir = new atom_1.Directory(atom.getConfigDirPath());
    const subdir = configDir.getSubdirectory('ide-haskell-repl');
    if (!(await subdir.exists())) {
        if (!(await subdir.create())) {
            atom.notifications.addError('Failed to create directory for ghci-wrapper', {
                detail: subdir.getPath(),
                dismissable: true,
            });
            throw null;
        }
    }
    const file = subdir.getFile('ghci-wrapper.exe');
    const stream = file.createWriteStream();
    try {
        await new Promise((resolve, reject) => {
            stream.on('error', reject);
            stream.write(buf, (error) => {
                stream.off('error', reject);
                if (error != null)
                    reject(error);
                else
                    resolve();
            });
        });
    }
    finally {
        stream.close();
    }
    return file.getPath();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtZ2hjaS13cmFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NldHVwLWdoY2ktd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQywrQkFBZ0M7QUFHekIsS0FBSyxVQUFVLGdCQUFnQjtJQUNwQyxNQUFNLFdBQVcsR0FDZiw0RkFBNEYsQ0FBQTtJQUM5RixNQUFNLGNBQWMsR0FBRywwQ0FBMEMsQ0FBQTtJQUNqRSxJQUFJO1FBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQTtRQUMzRCxNQUFNLEdBQUcsR0FBRyxNQUFNLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMzQyxTQUFTLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQzdELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLENBQUE7S0FDOUQ7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLDJCQUEyQixFQUFFO2dCQUM1RCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Z0JBQ2QsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPO2dCQUNqQixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLENBQUE7U0FDSDtLQUNGO0FBQ0gsQ0FBQztBQXBCRCw0Q0FvQkM7QUFFRCxLQUFLLFVBQVUsWUFBWSxDQUFDLEdBQVc7SUFDckMsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNyQyxRQUFRLEVBQUUsUUFBUTtLQUNuQixDQUFDLENBQUE7SUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGlDQUFpQyxFQUFFO1lBQzdELE1BQU0sRUFBRSxNQUFNLENBQUMsVUFBVTtZQUN6QixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7UUFDRixNQUFNLElBQUksQ0FBQTtLQUNYO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFDaEQsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQVcsRUFBRSxRQUFnQjtJQUM5QyxNQUFNLElBQUksR0FBRyxtQkFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDaEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNqQyxJQUFJLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQ3pCLDhDQUE4QyxFQUM5QztZQUNFLE1BQU0sRUFBRSxZQUFZLFFBQVEsWUFBWSxNQUFNLEVBQUU7WUFDaEQsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FDRixDQUFBO1FBQ0QsTUFBTSxJQUFJLENBQUE7S0FDWDtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsU0FBUyxDQUFDLEdBQVc7SUFDbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxnQkFBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUE7SUFDeEQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQzVELElBQUksQ0FBQyxDQUFDLE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7UUFDNUIsSUFBSSxDQUFDLENBQUMsTUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FDekIsNkNBQTZDLEVBQzdDO2dCQUNFLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUN4QixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUNGLENBQUE7WUFDRCxNQUFNLElBQUksQ0FBQTtTQUNYO0tBQ0Y7SUFDRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFDL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFDdkMsSUFBSTtRQUNGLE1BQU0sSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDMUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7Z0JBQzNCLElBQUksS0FBSyxJQUFJLElBQUk7b0JBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBOztvQkFDM0IsT0FBTyxFQUFFLENBQUE7WUFDaEIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtLQUNIO1lBQVM7UUFDUixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7S0FDZjtJQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHsgRGlyZWN0b3J5IH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXR1cEdoY2lXcmFwcGVyKCkge1xuICBjb25zdCBkb3dubG9hZFVybCA9XG4gICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9hdG9tLWhhc2tlbGwvd2luLWdoY2ktd3JhcHBlci9yZWxlYXNlcy9kb3dubG9hZC92MC4wLjIvZ2hjaS13cmFwcGVyLmV4ZSdcbiAgY29uc3QgZXhwZWN0ZWREaWdlc3QgPSAnNDY2MzI5NWQ3MWE1MDU3ZGVlNDE5NDVhNTJkMzllZDYxZmNkODgzMCdcbiAgdHJ5IHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbygnR0hDaSBXcmFwcGVyIHNldHVwIHN0YXJ0ZWQuLi4nKVxuICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IGRvd25sb2FkRmlsZShkb3dubG9hZFVybClcbiAgICBjaGVja0hhc2goYnVmLCBleHBlY3RlZERpZ2VzdClcbiAgICBjb25zdCBmaWxlUGF0aCA9IGF3YWl0IHdyaXRlRmlsZShidWYpXG4gICAgYXRvbS5jb25maWcuc2V0KCdpZGUtaGFza2VsbC1yZXBsLmdoY2lXcmFwcGVyUGF0aCcsIGZpbGVQYXRoKVxuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRTdWNjZXNzKCdHSENpIFdyYXBwZXIgc2V0dXAgZmluaXNoZWQhJylcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlICE9PSBudWxsKSB7XG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRmF0YWxFcnJvcignR0hDaSB3cmFwcGVyIHNldHVwIGZhaWxlZCcsIHtcbiAgICAgICAgc3RhY2s6IGUuc3RhY2ssXG4gICAgICAgIGRldGFpbDogZS5tZXNzYWdlLFxuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkRmlsZSh1cmw6IHN0cmluZyk6IFByb21pc2U8QnVmZmVyPiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdpbmRvdy5mZXRjaCh1cmwsIHtcbiAgICByZWRpcmVjdDogJ2ZvbGxvdycsXG4gIH0pXG4gIGlmICghcmVzdWx0Lm9rKSB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKCdHZXR0aW5nIGdoY2ktd3JhcHBlci5leGUgZmFpbGVkJywge1xuICAgICAgZGV0YWlsOiByZXN1bHQuc3RhdHVzVGV4dCxcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgIH0pXG4gICAgdGhyb3cgbnVsbFxuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhd2FpdCByZXN1bHQuYXJyYXlCdWZmZXIoKSlcbn1cblxuZnVuY3Rpb24gY2hlY2tIYXNoKGJ1ZjogQnVmZmVyLCBleHBlY3RlZDogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJylcbiAgaGFzaC51cGRhdGUoYnVmKVxuICBjb25zdCBkaWdlc3QgPSBoYXNoLmRpZ2VzdCgnaGV4JylcbiAgaWYgKGRpZ2VzdCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoXG4gICAgICAnR290IGdoY2ktd3JhcHBlci5leGUsIGJ1dCBoYXNoIGNoZWNrIGZhaWxlZCEnLFxuICAgICAge1xuICAgICAgICBkZXRhaWw6IGBFeHBlY3RlZCAke2V4cGVjdGVkfSBidXQgZ290ICR7ZGlnZXN0fWAsXG4gICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICApXG4gICAgdGhyb3cgbnVsbFxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdyaXRlRmlsZShidWY6IEJ1ZmZlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGNvbmZpZ0RpciA9IG5ldyBEaXJlY3RvcnkoYXRvbS5nZXRDb25maWdEaXJQYXRoKCkpXG4gIGNvbnN0IHN1YmRpciA9IGNvbmZpZ0Rpci5nZXRTdWJkaXJlY3RvcnkoJ2lkZS1oYXNrZWxsLXJlcGwnKVxuICBpZiAoIShhd2FpdCBzdWJkaXIuZXhpc3RzKCkpKSB7XG4gICAgaWYgKCEoYXdhaXQgc3ViZGlyLmNyZWF0ZSgpKSkge1xuICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKFxuICAgICAgICAnRmFpbGVkIHRvIGNyZWF0ZSBkaXJlY3RvcnkgZm9yIGdoY2ktd3JhcHBlcicsXG4gICAgICAgIHtcbiAgICAgICAgICBkZXRhaWw6IHN1YmRpci5nZXRQYXRoKCksXG4gICAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgICB0aHJvdyBudWxsXG4gICAgfVxuICB9XG4gIGNvbnN0IGZpbGUgPSBzdWJkaXIuZ2V0RmlsZSgnZ2hjaS13cmFwcGVyLmV4ZScpXG4gIGNvbnN0IHN0cmVhbSA9IGZpbGUuY3JlYXRlV3JpdGVTdHJlYW0oKVxuICB0cnkge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHN0cmVhbS5vbignZXJyb3InLCByZWplY3QpXG4gICAgICBzdHJlYW0ud3JpdGUoYnVmLCAoZXJyb3IpID0+IHtcbiAgICAgICAgc3RyZWFtLm9mZignZXJyb3InLCByZWplY3QpXG4gICAgICAgIGlmIChlcnJvciAhPSBudWxsKSByZWplY3QoZXJyb3IpXG4gICAgICAgIGVsc2UgcmVzb2x2ZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0gZmluYWxseSB7XG4gICAgc3RyZWFtLmNsb3NlKClcbiAgfVxuICByZXR1cm4gZmlsZS5nZXRQYXRoKClcbn1cbiJdfQ==