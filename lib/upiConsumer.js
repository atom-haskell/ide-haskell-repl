"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const ide_haskell_repl_base_1 = require("./ide-haskell-repl-base");
const ide_haskell_repl_bg_1 = require("./ide-haskell-repl-bg");
class UPIConsumer {
    constructor(register) {
        this.messages = [];
        this.errors = new Map();
        this.disposables = new atom_1.CompositeDisposable();
        this.maxMessageTime = 10000;
        this.bgEditorMap = new Map();
        this.disposables.add((this.upiRepl = register({
            name: 'ide-haskell-repl',
            messageTypes: {
                repl: {
                    uriFilter: false,
                    autoScroll: true,
                },
            },
            tooltip: this.shouldShowTooltip.bind(this),
            events: {
                onDidSaveBuffer: this.didSaveBuffer.bind(this),
            },
        })), (this.upiErrors = register({
            name: 'ide-haskell-repl::errors',
        })));
    }
    dispose() {
        this.disposables.dispose();
    }
    async getBuilder() {
        const builder = await this.upiRepl.getOthersConfigParam('ide-haskell-cabal', 'builder');
        switch (builder && builder.name) {
            case 'cabal':
                builder.name = 'cabal-v1';
                break;
            case 'cabal-nix':
                builder.name = 'cabal-v2';
                break;
        }
        return builder;
    }
    setErrors(source, errors) {
        this.errors.set(source, this.convert(errors));
        this.sendAllErrors();
    }
    setMessages(messages) {
        const all = this.convert(messages);
        this.messages = this.messages.filter(({ _time }) => Date.now() - _time < this.maxMessageTime);
        this.messages.push(...all.filter(({ severity }) => severity === 'repl'));
        this.upiRepl.setMessages(this.messages);
    }
    convert(xs) {
        const _time = Date.now();
        return xs.map((x) => (Object.assign(Object.assign({}, x), { _time })));
    }
    sendAllErrors() {
        let errors = [];
        for (const [source, errorArr] of this.errors.entries()) {
            if (!atom.config.get('ide-haskell-repl.checkOnSave') &&
                source.startsWith('bg:')) {
                continue;
            }
            errors = errors.filter((x) => !errorArr.some((y) => x._time <= y._time &&
                x.context === y.context &&
                compareMessage(x.message, y.message) &&
                comparePosition(x.position, y.position) &&
                x.severity === y.severity));
            errors.push(...errorArr);
        }
        this.upiErrors.setMessages(errors);
    }
    async shouldShowTooltip(editor, crange, _type) {
        if (!atom.config.get('ide-haskell-repl.showTypes')) {
            return undefined;
        }
        const path = editor.getPath();
        if (!path)
            return undefined;
        const buffer = editor.getBuffer();
        const { bg } = await this.getBgRepl(buffer);
        if (!bg)
            return undefined;
        return bg.showTypeAt(path, crange);
    }
    async didSaveBuffer(buffer) {
        if (!atom.config.get('ide-haskell-repl.checkOnSave') &&
            !atom.config.get('ide-haskell-repl.showTypes')) {
            return;
        }
        const { bg, isNew } = await this.getBgRepl(buffer);
        if (bg) {
            if (isNew)
                await bg.readyPromise;
            else
                await bg.ghciReload();
        }
    }
    async getBgRepl(buffer) {
        const path = buffer.getPath();
        if (!path)
            return { bg: undefined, isNew: false };
        const { cwd, cabal, comp } = await ide_haskell_repl_base_1.IdeHaskellReplBase.componentFromURI(path);
        const hash = `${cwd.getPath()}::${cabal && cabal.name}::${comp && comp[0]}`;
        let bgrec = this.bgEditorMap.get(hash);
        let isNew = false;
        if (!bgrec) {
            bgrec = this.createNewBgRepl(hash, path);
            isNew = true;
        }
        subscribeToBuffer(bgrec, buffer);
        return { bg: bgrec.bg, isNew };
    }
    createNewBgRepl(hash, path) {
        const bg = new ide_haskell_repl_bg_1.IdeHaskellReplBg(this, { uri: path });
        const bgrec = {
            bg,
            references: 0,
            buffers: new WeakSet(),
            disposables: new atom_1.CompositeDisposable(),
            dispose: () => {
                this.disposables.delete(bgrec);
                this.bgEditorMap.delete(hash);
                bgrec.bg.destroy();
                bgrec.disposables.dispose();
            },
        };
        this.disposables.add(bgrec);
        this.bgEditorMap.set(hash, bgrec);
        bgrec.disposables.add(bg.onDidDestroy(() => {
            bgrec.dispose();
        }));
        return bgrec;
    }
}
exports.UPIConsumer = UPIConsumer;
function subscribeToBuffer(rec, buffer) {
    if (rec.buffers.has(buffer))
        return;
    rec.references++;
    rec.buffers.add(buffer);
    rec.disposables.add(buffer.onDidDestroy(() => {
        rec.buffers.delete(buffer);
        rec.references--;
        if (rec.references === 0) {
            rec.dispose();
        }
    }));
}
function comparePosition(x, y) {
    if (x && y) {
        return atom_1.Point.fromObject(x).isEqual(y);
    }
    else {
        return x === y;
    }
}
function compareMessage(x, y) {
    if (typeof x === 'string' && typeof y === 'string') {
        return x === y;
    }
    else if (isTextMessage(x) && isTextMessage(y)) {
        return x.text === y.text;
    }
    else if (isHTMLMessage(x) && isHTMLMessage(y)) {
        return x.html === y.html;
    }
    return false;
}
function isTextMessage(x) {
    return x.text !== undefined;
}
function isHTMLMessage(x) {
    return x.text !== undefined;
}
//# sourceMappingURL=data:application/json;base64,