"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_haskell_utils_1 = require("atom-haskell-utils");
const os_1 = require("os");
const interactive_process_1 = require("./interactive-process");
const Queue = require("promise-queue");
class GHCI {
    constructor(opts) {
        this.commandQueue = new Queue(1, 100);
        const endPattern = /^#~IDEHASKELLREPL~(.*)~#$/;
        const { cwd, atomPath, command, args, onExit } = opts;
        this.onDidExit = onExit;
        if (process.platform === 'win32') {
            const spawnArgs = [command, ...args];
            const cmdexe = atom.config.get('ide-haskell-repl.ghciWrapperPath');
            if (cmdexe) {
                spawnArgs.unshift('"' + cmdexe + '"');
            }
            this.process = new interactive_process_1.InteractiveProcess('chcp 65001 && ', spawnArgs, this.didExit.bind(this), { cwd, shell: true }, endPattern);
        }
        else {
            this.process = new interactive_process_1.InteractiveProcess(command, args, this.didExit.bind(this), { cwd }, endPattern);
        }
        this.readyPromise = this.request(`:set editor \"${atomPath}\"${os_1.EOL}` +
            `:set prompt2 \"\"${os_1.EOL}` +
            `:set prompt-cont \"\"${os_1.EOL}` +
            `:set prompt \"\\n#~IDEHASKELLREPL~%s~#\\n\"${os_1.EOL}`);
    }
    async waitReady() {
        return this.readyPromise;
    }
    isBusy() {
        return this.commandQueue.getPendingLength() > 0;
    }
    async load(uri, callback) {
        return this.request(`:load ${atom_haskell_utils_1.hsEscapeString(uri)}${os_1.EOL}`, callback);
    }
    async reload(callback) {
        return this.request(`:reload${os_1.EOL}`, callback);
    }
    async interrupt() {
        if (this.process) {
            if (atom.config.get('ide-haskell-repl.ghciWrapperPath') &&
                process.platform === 'win32') {
                await this.request('\x03');
            }
            else {
                this.process.interrupt();
            }
        }
    }
    async writeLines(lines, callback) {
        return this.request(`:{${os_1.EOL}${lines.join(os_1.EOL)}${os_1.EOL}:}${os_1.EOL}`, callback);
    }
    writeRaw(raw) {
        this.process.writeStdin(raw);
    }
    async sendCompletionRequest() {
        if (this.isBusy())
            return undefined;
        return this.process.request(`:complete repl \"\"${os_1.EOL}`);
    }
    destroy() {
        this.process.destroy();
    }
    didExit(code) {
        this.onDidExit(code);
        this.destroy();
    }
    async request(command, lineCallback) {
        return this.commandQueue.add(async () => this.process.request(command, lineCallback));
    }
}
exports.GHCI = GHCI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9naGNpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQW1EO0FBQ25ELDJCQUF3QjtBQUN4QiwrREFJOEI7QUFDOUIsdUNBQXVDO0FBWXZDO0lBS0UsWUFBWSxJQUFXO1FBRGYsaUJBQVksR0FBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFN0MsTUFBTSxVQUFVLEdBQUcsMkJBQTJCLENBQUE7UUFDOUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUE7UUFFdkIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7WUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtZQUNsRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNYLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQTtZQUN2QyxDQUFDO1lBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdDQUFrQixDQUNuQyxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN2QixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQ3BCLFVBQVUsQ0FDWCxDQUFBO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxJ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QUFBO0lBQ0gsQ0FBQztDQUNGO0FBbkdELG9CQW1HQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhzRXNjYXBlU3RyaW5nIH0gZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQge1xuICBJbnRlcmFjdGl2ZVByb2Nlc3MsXG4gIElSZXF1ZXN0UmVzdWx0LFxuICBUTGluZUNhbGxiYWNrLFxufSBmcm9tICcuL2ludGVyYWN0aXZlLXByb2Nlc3MnXG5pbXBvcnQgUXVldWUgPSByZXF1aXJlKCdwcm9taXNlLXF1ZXVlJylcblxuZXhwb3J0IHsgVExpbmVDYWxsYmFjaywgSVJlcXVlc3RSZXN1bHQgfVxuXG5leHBvcnQgaW50ZXJmYWNlIElPcHRzIHtcbiAgY3dkOiBzdHJpbmdcbiAgYXRvbVBhdGg6IHN0cmluZ1xuICBjb21tYW5kOiBzdHJpbmdcbiAgYXJnczogc3RyaW5nW11cbiAgb25FeGl0OiAoY29kZTogbnVtYmVyKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBjbGFzcyBHSENJIHtcbiAgcHJpdmF0ZSBwcm9jZXNzOiBJbnRlcmFjdGl2ZVByb2Nlc3NcbiAgcHJpdmF0ZSByZWFkeVByb21pc2U6IFByb21pc2U8SVJlcXVlc3RSZXN1bHQ+XG4gIHByaXZhdGUgb25EaWRFeGl0OiAoY29kZTogbnVtYmVyKSA9PiB2b2lkXG4gIHByaXZhdGUgY29tbWFuZFF1ZXVlOiBRdWV1ZSA9IG5ldyBRdWV1ZSgxLCAxMDApXG4gIGNvbnN0cnVjdG9yKG9wdHM6IElPcHRzKSB7XG4gICAgY29uc3QgZW5kUGF0dGVybiA9IC9eI35JREVIQVNLRUxMUkVQTH4oLiopfiMkL1xuICAgIGNvbnN0IHsgY3dkLCBhdG9tUGF0aCwgY29tbWFuZCwgYXJncywgb25FeGl0IH0gPSBvcHRzXG4gICAgdGhpcy5vbkRpZEV4aXQgPSBvbkV4aXRcblxuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICBjb25zdCBzcGF3bkFyZ3MgPSBbY29tbWFuZCwgLi4uYXJnc11cbiAgICAgIGNvbnN0IGNtZGV4ZSA9IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtcmVwbC5naGNpV3JhcHBlclBhdGgnKVxuICAgICAgaWYgKGNtZGV4ZSkge1xuICAgICAgICBzcGF3bkFyZ3MudW5zaGlmdCgnXCInICsgY21kZXhlICsgJ1wiJylcbiAgICAgIH1cbiAgICAgIHRoaXMucHJvY2VzcyA9IG5ldyBJbnRlcmFjdGl2ZVByb2Nlc3MoXG4gICAgICAgICdjaGNwIDY1MDAxICYmICcsXG4gICAgICAgIHNwYXduQXJncyxcbiAgICAgICAgdGhpcy5kaWRFeGl0LmJpbmQodGhpcyksXG4gICAgICAgIHsgY3dkLCBzaGVsbDogdHJ1ZSB9LFxuICAgICAgICBlbmRQYXR0ZXJuLFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb2Nlc3MgPSBuZXcgSW50ZXJhY3RpdmVQcm9jZXNzKFxuICAgICAgICBjb21tYW5kLFxuICAgICAgICBhcmdzLFxuICAgICAgICB0aGlzLmRpZEV4aXQuYmluZCh0aGlzKSxcbiAgICAgICAgeyBjd2QgfSxcbiAgICAgICAgZW5kUGF0dGVybixcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5UHJvbWlzZSA9IHRoaXMucmVxdWVzdChcbiAgICAgIGA6c2V0IGVkaXRvciBcXFwiJHthdG9tUGF0aH1cXFwiJHtFT0x9YCArXG4gICAgICAgIGA6c2V0IHByb21wdDIgXFxcIlxcXCIke0VPTH1gICtcbiAgICAgICAgYDpzZXQgcHJvbXB0LWNvbnQgXFxcIlxcXCIke0VPTH1gICtcbiAgICAgICAgYDpzZXQgcHJvbXB0IFxcXCJcXFxcbiN+SURFSEFTS0VMTFJFUEx+JXN+I1xcXFxuXFxcIiR7RU9MfWAsXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHdhaXRSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeVByb21pc2VcbiAgfVxuXG4gIHB1YmxpYyBpc0J1c3koKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tbWFuZFF1ZXVlLmdldFBlbmRpbmdMZW5ndGgoKSA+IDBcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2FkKHVyaTogc3RyaW5nLCBjYWxsYmFjaz86IFRMaW5lQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGA6bG9hZCAke2hzRXNjYXBlU3RyaW5nKHVyaSl9JHtFT0x9YCwgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVsb2FkKGNhbGxiYWNrPzogVExpbmVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYDpyZWxvYWQke0VPTH1gLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbnRlcnJ1cHQoKSB7XG4gICAgaWYgKHRoaXMucHJvY2Vzcykge1xuICAgICAgaWYgKFxuICAgICAgICBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXJlcGwuZ2hjaVdyYXBwZXJQYXRoJykgJiZcbiAgICAgICAgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJ1xuICAgICAgKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmVxdWVzdCgnXFx4MDMnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzLmludGVycnVwdCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHdyaXRlTGluZXMobGluZXM6IHN0cmluZ1tdLCBjYWxsYmFjaz86IFRMaW5lQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGA6eyR7RU9MfSR7bGluZXMuam9pbihFT0wpfSR7RU9MfTp9JHtFT0x9YCwgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgd3JpdGVSYXcocmF3OiBzdHJpbmcpIHtcbiAgICB0aGlzLnByb2Nlc3Mud3JpdGVTdGRpbihyYXcpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2VuZENvbXBsZXRpb25SZXF1ZXN0KCkge1xuICAgIGlmICh0aGlzLmlzQnVzeSgpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgLy8gTk9URTogdGhpcyAqaGFzKiB0byBnbyBhcm91bmQgY29tbWFuZFF1ZXVlLCBzaW5jZSBjb21wbGV0aW9uIHJlcXVlc3RzXG4gICAgLy8gc2hvdWxkbid0IGFmZmVjdCBidXN5IHN0YXR1c1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3MucmVxdWVzdChgOmNvbXBsZXRlIHJlcGwgXFxcIlxcXCIke0VPTH1gKVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5wcm9jZXNzLmRlc3Ryb3koKVxuICB9XG5cbiAgcHJpdmF0ZSBkaWRFeGl0KGNvZGU6IG51bWJlcikge1xuICAgIHRoaXMub25EaWRFeGl0KGNvZGUpXG4gICAgdGhpcy5kZXN0cm95KClcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVxdWVzdChjb21tYW5kOiBzdHJpbmcsIGxpbmVDYWxsYmFjaz86IFRMaW5lQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb21tYW5kUXVldWUuYWRkKGFzeW5jICgpID0+XG4gICAgICB0aGlzLnByb2Nlc3MucmVxdWVzdChjb21tYW5kLCBsaW5lQ2FsbGJhY2spLFxuICAgIClcbiAgfVxufVxuIl19