"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_haskell_utils_1 = require("atom-haskell-utils");
const os_1 = require("os");
const interactive_process_1 = require("./interactive-process");
const Queue = require("promise-queue");
class GHCI {
    constructor(opts) {
        this.commandQueue = new Queue(1, 100);
        const endPattern = /^#~IDEHASKELLREPL~(.*)~#$/;
        const { cwd, atomPath, command, args, onExit } = opts;
        this.onDidExit = onExit;
        if (process.platform === 'win32') {
            const spawnArgs = [command, ...args];
            const cmdexe = atom.config.get('ide-haskell-repl.ghciWrapperPath');
            if (cmdexe) {
                spawnArgs.unshift('"' + cmdexe + '"');
            }
            this.process = new interactive_process_1.InteractiveProcess('chcp 65001 && ', spawnArgs, this.didExit.bind(this), { cwd, shell: true }, endPattern);
        }
        else {
            this.process = new interactive_process_1.InteractiveProcess(command, args, this.didExit.bind(this), { cwd }, endPattern);
        }
        this.readyPromise = this.request(`:set editor \"${atomPath}\" --wait${os_1.EOL}` +
            `:set prompt2 \"\"${os_1.EOL}` +
            `:set prompt-cont \"\"${os_1.EOL}` +
            `:set +c${os_1.EOL}` +
            `:set prompt \"\\n#~IDEHASKELLREPL~%s~#\\n\"${os_1.EOL}`);
    }
    async waitReady() {
        return this.readyPromise;
    }
    isBusy() {
        return this.commandQueue.getPendingLength() > 0;
    }
    async load(uri, callback) {
        return this.request(`:load ${atom_haskell_utils_1.hsEscapeString(uri)}${os_1.EOL}`, callback);
    }
    async reload(callback) {
        return this.request(`:reload${os_1.EOL}`, callback);
    }
    async interrupt() {
        if (this.process) {
            if (atom.config.get('ide-haskell-repl.ghciWrapperPath') &&
                process.platform === 'win32') {
                await this.request('\x03');
            }
            else {
                this.process.interrupt();
            }
        }
    }
    async writeLines(lines, callback) {
        return this.request(`:{${os_1.EOL}${lines.join(os_1.EOL)}${os_1.EOL}:}${os_1.EOL}`, callback);
    }
    writeRaw(raw) {
        this.process.writeStdin(raw);
    }
    async sendCompletionRequest() {
        if (this.isBusy())
            return undefined;
        return this.process.request(`:complete repl \"\"${os_1.EOL}`);
    }
    destroy() {
        this.process.destroy();
    }
    didExit(code) {
        this.onDidExit(code);
        this.destroy();
    }
    async request(command, lineCallback) {
        return this.commandQueue.add(async () => this.process.request(command, lineCallback));
    }
}
exports.GHCI = GHCI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9naGNpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQW1EO0FBQ25ELDJCQUF3QjtBQUN4QiwrREFJOEI7QUFDOUIsdUNBQXVDO0FBWXZDLE1BQWEsSUFBSTtJQUtmLFlBQVksSUFBVztRQURmLGlCQUFZLEdBQVUsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRTdDLE1BQU0sVUFBVSxHQUFHLDJCQUEyQixDQUFBO1FBQzlDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ3JELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFBO1FBRXZCLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7WUFDaEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtZQUNwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFBO1lBQ2xFLElBQUksTUFBTSxFQUFFO2dCQUNWLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQTthQUN0QztZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3Q0FBa0IsQ0FDbkMsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDdkIsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUNwQixVQUFVLENBQ1gsQ0FBQTtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksd0NBQWtCLENBQ25DLE9BQU8sRUFDUCxJQUFJLEVBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3ZCLEVBQUUsR0FBRyxFQUFFLEVBQ1AsVUFBVSxDQUNYLENBQUE7U0FDRjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDOUIsaUJBQWlCLFFBQVEsWUFBWSxRQUFHLEVBQUU7WUFDeEMsb0JBQW9CLFFBQUcsRUFBRTtZQUN6Qix3QkFBd0IsUUFBRyxFQUFFO1lBQzdCLFVBQVUsUUFBRyxFQUFFO1lBQ2YsOENBQThDLFFBQUcsRUFBRSxDQUN0RCxDQUFBO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUMxQixDQUFDO0lBRU0sTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFXLEVBQUUsUUFBd0I7UUFDckQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsbUNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUF3QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVM7UUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUM7Z0JBQ25ELE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUM1QjtnQkFDQSxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDM0I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQTthQUN6QjtTQUNGO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBZSxFQUFFLFFBQXdCO1FBQy9ELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQUcsQ0FBQyxHQUFHLFFBQUcsS0FBSyxRQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUMzRSxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVc7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxxQkFBcUI7UUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsT0FBTyxTQUFTLENBQUE7UUFHbkMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsUUFBRyxFQUFFLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVPLE9BQU8sQ0FBQyxJQUFtQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBRU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFlLEVBQUUsWUFBNEI7UUFDakUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQzVDLENBQUE7SUFDSCxDQUFDO0NBQ0Y7QUFwR0Qsb0JBb0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaHNFc2NhcGVTdHJpbmcgfSBmcm9tICdhdG9tLWhhc2tlbGwtdXRpbHMnXG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcydcbmltcG9ydCB7XG4gIEludGVyYWN0aXZlUHJvY2VzcyxcbiAgSVJlcXVlc3RSZXN1bHQsXG4gIFRMaW5lQ2FsbGJhY2ssXG59IGZyb20gJy4vaW50ZXJhY3RpdmUtcHJvY2VzcydcbmltcG9ydCBRdWV1ZSA9IHJlcXVpcmUoJ3Byb21pc2UtcXVldWUnKVxuXG5leHBvcnQgeyBUTGluZUNhbGxiYWNrLCBJUmVxdWVzdFJlc3VsdCB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdHMge1xuICBjd2Q6IHN0cmluZ1xuICBhdG9tUGF0aDogc3RyaW5nXG4gIGNvbW1hbmQ6IHN0cmluZ1xuICBhcmdzOiBzdHJpbmdbXVxuICBvbkV4aXQ6IChjb2RlOiBudW1iZXIgfCBudWxsKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBjbGFzcyBHSENJIHtcbiAgcHJpdmF0ZSBwcm9jZXNzOiBJbnRlcmFjdGl2ZVByb2Nlc3NcbiAgcHJpdmF0ZSByZWFkeVByb21pc2U6IFByb21pc2U8SVJlcXVlc3RSZXN1bHQ+XG4gIHByaXZhdGUgb25EaWRFeGl0OiAoY29kZTogbnVtYmVyIHwgbnVsbCkgPT4gdm9pZFxuICBwcml2YXRlIGNvbW1hbmRRdWV1ZTogUXVldWUgPSBuZXcgUXVldWUoMSwgMTAwKVxuICBjb25zdHJ1Y3RvcihvcHRzOiBJT3B0cykge1xuICAgIGNvbnN0IGVuZFBhdHRlcm4gPSAvXiN+SURFSEFTS0VMTFJFUEx+KC4qKX4jJC9cbiAgICBjb25zdCB7IGN3ZCwgYXRvbVBhdGgsIGNvbW1hbmQsIGFyZ3MsIG9uRXhpdCB9ID0gb3B0c1xuICAgIHRoaXMub25EaWRFeGl0ID0gb25FeGl0XG5cbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgY29uc3Qgc3Bhd25BcmdzID0gW2NvbW1hbmQsIC4uLmFyZ3NdXG4gICAgICBjb25zdCBjbWRleGUgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXJlcGwuZ2hjaVdyYXBwZXJQYXRoJylcbiAgICAgIGlmIChjbWRleGUpIHtcbiAgICAgICAgc3Bhd25BcmdzLnVuc2hpZnQoJ1wiJyArIGNtZGV4ZSArICdcIicpXG4gICAgICB9XG4gICAgICB0aGlzLnByb2Nlc3MgPSBuZXcgSW50ZXJhY3RpdmVQcm9jZXNzKFxuICAgICAgICAnY2hjcCA2NTAwMSAmJiAnLFxuICAgICAgICBzcGF3bkFyZ3MsXG4gICAgICAgIHRoaXMuZGlkRXhpdC5iaW5kKHRoaXMpLFxuICAgICAgICB7IGN3ZCwgc2hlbGw6IHRydWUgfSxcbiAgICAgICAgZW5kUGF0dGVybixcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9jZXNzID0gbmV3IEludGVyYWN0aXZlUHJvY2VzcyhcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgYXJncyxcbiAgICAgICAgdGhpcy5kaWRFeGl0LmJpbmQodGhpcyksXG4gICAgICAgIHsgY3dkIH0sXG4gICAgICAgIGVuZFBhdHRlcm4sXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5yZWFkeVByb21pc2UgPSB0aGlzLnJlcXVlc3QoXG4gICAgICBgOnNldCBlZGl0b3IgXFxcIiR7YXRvbVBhdGh9XFxcIiAtLXdhaXQke0VPTH1gICtcbiAgICAgICAgYDpzZXQgcHJvbXB0MiBcXFwiXFxcIiR7RU9MfWAgK1xuICAgICAgICBgOnNldCBwcm9tcHQtY29udCBcXFwiXFxcIiR7RU9MfWAgK1xuICAgICAgICBgOnNldCArYyR7RU9MfWAgK1xuICAgICAgICBgOnNldCBwcm9tcHQgXFxcIlxcXFxuI35JREVIQVNLRUxMUkVQTH4lc34jXFxcXG5cXFwiJHtFT0x9YCxcbiAgICApXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgd2FpdFJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5UHJvbWlzZVxuICB9XG5cbiAgcHVibGljIGlzQnVzeSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21tYW5kUXVldWUuZ2V0UGVuZGluZ0xlbmd0aCgpID4gMFxuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvYWQodXJpOiBzdHJpbmcsIGNhbGxiYWNrPzogVExpbmVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYDpsb2FkICR7aHNFc2NhcGVTdHJpbmcodXJpKX0ke0VPTH1gLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWxvYWQoY2FsbGJhY2s/OiBUTGluZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgOnJlbG9hZCR7RU9MfWAsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGludGVycnVwdCgpIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtcmVwbC5naGNpV3JhcHBlclBhdGgnKSAmJlxuICAgICAgICBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInXG4gICAgICApIHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZXF1ZXN0KCdcXHgwMycpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb2Nlc3MuaW50ZXJydXB0KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgd3JpdGVMaW5lcyhsaW5lczogc3RyaW5nW10sIGNhbGxiYWNrPzogVExpbmVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYDp7JHtFT0x9JHtsaW5lcy5qb2luKEVPTCl9JHtFT0x9On0ke0VPTH1gLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVJhdyhyYXc6IHN0cmluZykge1xuICAgIHRoaXMucHJvY2Vzcy53cml0ZVN0ZGluKHJhdylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZW5kQ29tcGxldGlvblJlcXVlc3QoKSB7XG4gICAgaWYgKHRoaXMuaXNCdXN5KCkpIHJldHVybiB1bmRlZmluZWRcbiAgICAvLyBOT1RFOiB0aGlzICpoYXMqIHRvIGdvIGFyb3VuZCBjb21tYW5kUXVldWUsIHNpbmNlIGNvbXBsZXRpb24gcmVxdWVzdHNcbiAgICAvLyBzaG91bGRuJ3QgYWZmZWN0IGJ1c3kgc3RhdHVzXG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzcy5yZXF1ZXN0KGA6Y29tcGxldGUgcmVwbCBcXFwiXFxcIiR7RU9MfWApXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLnByb2Nlc3MuZGVzdHJveSgpXG4gIH1cblxuICBwcml2YXRlIGRpZEV4aXQoY29kZTogbnVtYmVyIHwgbnVsbCkge1xuICAgIHRoaXMub25EaWRFeGl0KGNvZGUpXG4gICAgdGhpcy5kZXN0cm95KClcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVxdWVzdChjb21tYW5kOiBzdHJpbmcsIGxpbmVDYWxsYmFjaz86IFRMaW5lQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jb21tYW5kUXVldWUuYWRkKGFzeW5jICgpID0+XG4gICAgICB0aGlzLnByb2Nlc3MucmVxdWVzdChjb21tYW5kLCBsaW5lQ2FsbGJhY2spLFxuICAgIClcbiAgfVxufVxuIl19