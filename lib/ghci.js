"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_haskell_utils_1 = require("atom-haskell-utils");
const os_1 = require("os");
const interactive_process_1 = require("./interactive-process");
class GHCI {
    constructor(opts) {
        this._isProcessingAutocompletionRequest = false;
        const endPattern = /^#~IDEHASKELLREPL~(.*)~#$/;
        const { cwd, atomPath, command, args, onExit } = opts;
        this.onDidExit = onExit;
        if (process.platform === 'win32') {
            const spawnArgs = [command, ...args];
            const cmdexe = atom.config.get('ide-haskell-repl.ghciWrapperPath');
            if (cmdexe) {
                spawnArgs.unshift('"' + cmdexe + '"');
            }
            this.process = new interactive_process_1.InteractiveProcess('chcp 65001 && ', spawnArgs, this.didExit.bind(this), { cwd, shell: true }, endPattern);
        }
        else {
            this.process = new interactive_process_1.InteractiveProcess(command, args, this.didExit.bind(this), { cwd }, endPattern);
        }
        this.readyPromise = this.process.request(`:set editor \"${atomPath}\"${os_1.EOL}` +
            `:set prompt2 \"\"${os_1.EOL}` +
            `:set prompt-cont \"\"${os_1.EOL}` +
            `:set prompt \"\\n#~IDEHASKELLREPL~%s~#\\n\"${os_1.EOL}`);
    }
    async waitReady() {
        return this.readyPromise;
    }
    isBusy() {
        return this.process.isBusy() && !this._isProcessingAutocompletionRequest;
    }
    async load(uri, callback) {
        return this.process.request(`:load ${atom_haskell_utils_1.hsEscapeString(uri)}${os_1.EOL}`, callback);
    }
    async reload(callback) {
        return this.process.request(`:reload${os_1.EOL}`, callback);
    }
    async interrupt() {
        if (this.process) {
            if (atom.config.get('ide-haskell-repl.ghciWrapperPath') &&
                process.platform === 'win32') {
                await this.process.request('\x03');
            }
            else {
                this.process.interrupt();
            }
        }
    }
    async writeLines(lines, callback) {
        return this.process.request(`:{${os_1.EOL}${lines.join(os_1.EOL)}${os_1.EOL}:}${os_1.EOL}`, callback);
    }
    writeRaw(raw) {
        this.process.writeStdin(raw);
    }
    async sendCompletionRequest(callback) {
        this._isProcessingAutocompletionRequest = true;
        try {
            return await this.process.request(`:complete repl \"\"${os_1.EOL}`, callback);
        }
        finally {
            this._isProcessingAutocompletionRequest = false;
        }
    }
    destroy() {
        this.process.destroy();
    }
    didExit(code) {
        this.onDidExit(code);
        this.destroy();
    }
}
exports.GHCI = GHCI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9naGNpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQW1EO0FBQ25ELDJCQUF3QjtBQUN4QiwrREFJOEI7QUFZOUI7SUFNRSxZQUFZLElBQVc7UUFEZix1Q0FBa0MsR0FBWSxLQUFLLENBQUE7UUFFekQsTUFBTSxVQUFVLEdBQUcsMkJBQTJCLENBQUE7UUFDOUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUE7UUFFdkIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7WUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtZQUNsRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNYLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQTtZQUN2QyxDQUFDO1lBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdDQUFrQixDQUNuQyxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN2QixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQ3BCLFVBQVUsQ0FDWCxDQUFBO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdDQUFrQixDQUNuQyxPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUks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ZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQge1xuICBJbnRlcmFjdGl2ZVByb2Nlc3MsXG4gIElSZXF1ZXN0UmVzdWx0LFxuICBUTGluZUNhbGxiYWNrLFxufSBmcm9tICcuL2ludGVyYWN0aXZlLXByb2Nlc3MnXG5cbmV4cG9ydCB7IFRMaW5lQ2FsbGJhY2ssIElSZXF1ZXN0UmVzdWx0IH1cblxuZXhwb3J0IGludGVyZmFjZSBJT3B0cyB7XG4gIGN3ZDogc3RyaW5nXG4gIGF0b21QYXRoOiBzdHJpbmdcbiAgY29tbWFuZDogc3RyaW5nXG4gIGFyZ3M6IHN0cmluZ1tdXG4gIG9uRXhpdDogKGNvZGU6IG51bWJlcikgPT4gdm9pZFxufVxuXG5leHBvcnQgY2xhc3MgR0hDSSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bmluaXRpYWxpemVkXG4gIHByaXZhdGUgcHJvY2VzczogSW50ZXJhY3RpdmVQcm9jZXNzXG4gIHByaXZhdGUgcmVhZHlQcm9taXNlOiBQcm9taXNlPElSZXF1ZXN0UmVzdWx0PlxuICBwcml2YXRlIG9uRGlkRXhpdDogKGNvZGU6IG51bWJlcikgPT4gdm9pZFxuICBwcml2YXRlIF9pc1Byb2Nlc3NpbmdBdXRvY29tcGxldGlvblJlcXVlc3Q6IGJvb2xlYW4gPSBmYWxzZVxuICBjb25zdHJ1Y3RvcihvcHRzOiBJT3B0cykge1xuICAgIGNvbnN0IGVuZFBhdHRlcm4gPSAvXiN+SURFSEFTS0VMTFJFUEx+KC4qKX4jJC9cbiAgICBjb25zdCB7IGN3ZCwgYXRvbVBhdGgsIGNvbW1hbmQsIGFyZ3MsIG9uRXhpdCB9ID0gb3B0c1xuICAgIHRoaXMub25EaWRFeGl0ID0gb25FeGl0XG5cbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgY29uc3Qgc3Bhd25BcmdzID0gW2NvbW1hbmQsIC4uLmFyZ3NdXG4gICAgICBjb25zdCBjbWRleGUgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXJlcGwuZ2hjaVdyYXBwZXJQYXRoJylcbiAgICAgIGlmIChjbWRleGUpIHtcbiAgICAgICAgc3Bhd25BcmdzLnVuc2hpZnQoJ1wiJyArIGNtZGV4ZSArICdcIicpXG4gICAgICB9XG4gICAgICB0aGlzLnByb2Nlc3MgPSBuZXcgSW50ZXJhY3RpdmVQcm9jZXNzKFxuICAgICAgICAnY2hjcCA2NTAwMSAmJiAnLFxuICAgICAgICBzcGF3bkFyZ3MsXG4gICAgICAgIHRoaXMuZGlkRXhpdC5iaW5kKHRoaXMpLFxuICAgICAgICB7IGN3ZCwgc2hlbGw6IHRydWUgfSxcbiAgICAgICAgZW5kUGF0dGVybixcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9jZXNzID0gbmV3IEludGVyYWN0aXZlUHJvY2VzcyhcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgYXJncyxcbiAgICAgICAgdGhpcy5kaWRFeGl0LmJpbmQodGhpcyksXG4gICAgICAgIHsgY3dkIH0sXG4gICAgICAgIGVuZFBhdHRlcm4sXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5yZWFkeVByb21pc2UgPSB0aGlzLnByb2Nlc3MucmVxdWVzdChcbiAgICAgIGA6c2V0IGVkaXRvciBcXFwiJHthdG9tUGF0aH1cXFwiJHtFT0x9YCArXG4gICAgICAgIGA6c2V0IHByb21wdDIgXFxcIlxcXCIke0VPTH1gICtcbiAgICAgICAgYDpzZXQgcHJvbXB0LWNvbnQgXFxcIlxcXCIke0VPTH1gICtcbiAgICAgICAgYDpzZXQgcHJvbXB0IFxcXCJcXFxcbiN+SURFSEFTS0VMTFJFUEx+JXN+I1xcXFxuXFxcIiR7RU9MfWAsXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHdhaXRSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeVByb21pc2VcbiAgfVxuXG4gIHB1YmxpYyBpc0J1c3koKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzcy5pc0J1c3koKSAmJiAhdGhpcy5faXNQcm9jZXNzaW5nQXV0b2NvbXBsZXRpb25SZXF1ZXN0XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9hZCh1cmk6IHN0cmluZywgY2FsbGJhY2s/OiBUTGluZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzcy5yZXF1ZXN0KGA6bG9hZCAke2hzRXNjYXBlU3RyaW5nKHVyaSl9JHtFT0x9YCwgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVsb2FkKGNhbGxiYWNrPzogVExpbmVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3MucmVxdWVzdChgOnJlbG9hZCR7RU9MfWAsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGludGVycnVwdCgpIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtcmVwbC5naGNpV3JhcHBlclBhdGgnKSAmJlxuICAgICAgICBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInXG4gICAgICApIHtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzLnJlcXVlc3QoJ1xceDAzJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvY2Vzcy5pbnRlcnJ1cHQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB3cml0ZUxpbmVzKGxpbmVzOiBzdHJpbmdbXSwgY2FsbGJhY2s/OiBUTGluZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzcy5yZXF1ZXN0KFxuICAgICAgYDp7JHtFT0x9JHtsaW5lcy5qb2luKEVPTCl9JHtFT0x9On0ke0VPTH1gLFxuICAgICAgY2FsbGJhY2ssXG4gICAgKVxuICB9XG5cbiAgcHVibGljIHdyaXRlUmF3KHJhdzogc3RyaW5nKSB7XG4gICAgdGhpcy5wcm9jZXNzLndyaXRlU3RkaW4ocmF3KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNlbmRDb21wbGV0aW9uUmVxdWVzdChjYWxsYmFjaz86IFRMaW5lQ2FsbGJhY2spIHtcbiAgICB0aGlzLl9pc1Byb2Nlc3NpbmdBdXRvY29tcGxldGlvblJlcXVlc3QgPSB0cnVlXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc3MucmVxdWVzdChgOmNvbXBsZXRlIHJlcGwgXFxcIlxcXCIke0VPTH1gLCBjYWxsYmFjaylcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5faXNQcm9jZXNzaW5nQXV0b2NvbXBsZXRpb25SZXF1ZXN0ID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLnByb2Nlc3MuZGVzdHJveSgpXG4gIH1cblxuICBwcml2YXRlIGRpZEV4aXQoY29kZTogbnVtYmVyKSB7XG4gICAgdGhpcy5vbkRpZEV4aXQoY29kZSlcbiAgICB0aGlzLmRlc3Ryb3koKVxuICB9XG59XG4iXX0=