"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_haskell_utils_1 = require("atom-haskell-utils");
const os_1 = require("os");
const interactive_process_1 = require("./interactive-process");
class GHCI {
    constructor(opts) {
        const endPattern = /^#~IDEHASKELLREPL~(.*)~#$/;
        const { cwd, atomPath, command, args, onExit } = opts;
        this.onDidExit = onExit;
        if (process.platform === 'win32') {
            const spawnArgs = [command, ...args];
            const cmdexe = atom.config.get('ide-haskell-repl.ghciWrapperPath');
            if (cmdexe) {
                spawnArgs.unshift('\"' + cmdexe + '\"');
            }
            this.process = new interactive_process_1.InteractiveProcess('chcp 65001 && ', spawnArgs, this.didExit.bind(this), { cwd, shell: true }, endPattern);
        }
        else {
            this.process = new interactive_process_1.InteractiveProcess(command, args, this.didExit.bind(this), { cwd }, endPattern);
        }
        this.readyPromise = this.process.request(`:set editor \"${atomPath}\"${os_1.EOL}` +
            `:set prompt2 \"\"${os_1.EOL}` +
            `:set prompt-cont \"\"${os_1.EOL}` +
            `:set prompt \"\\n#~IDEHASKELLREPL~%s~#\\n\"${os_1.EOL}`);
    }
    async waitReady() {
        return this.readyPromise;
    }
    isBusy() {
        return this.process.isBusy();
    }
    async load(uri, callback) {
        return this.process.request(`:load ${atom_haskell_utils_1.hsEscapeString(uri)}${os_1.EOL}`, callback);
    }
    async reload(callback) {
        return this.process.request(`:reload${os_1.EOL}`, callback);
    }
    async interrupt() {
        if (this.process) {
            if (atom.config.get('ide-haskell-repl.ghciWrapperPath') && process.platform === 'win32') {
                await this.process.request('\x03');
            }
            else {
                this.process.interrupt();
            }
        }
    }
    async writeLines(lines, callback) {
        return this.process.request(`:{${os_1.EOL}${lines.join(os_1.EOL)}${os_1.EOL}:}${os_1.EOL}`, callback);
    }
    writeRaw(raw) {
        this.process.writeStdin(raw);
    }
    async sendCompletionRequest(callback) {
        return this.process.request(`:complete repl \"\"${os_1.EOL}`, callback);
    }
    destroy() {
        this.process.destroy();
    }
    didExit(code) {
        this.onDidExit(code);
        this.destroy();
    }
}
exports.GHCI = GHCI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9naGNpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQW1EO0FBQ25ELDJCQUF3QjtBQUN4QiwrREFBeUY7QUFZekY7SUFLRSxZQUFZLElBQVc7UUFDckIsTUFBTSxVQUFVLEdBQUcsMkJBQTJCLENBQUE7UUFDOUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUE7UUFFdkIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7WUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtZQUNsRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNYLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQTtZQUN6QyxDQUFDO1lBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdDQUFrQixDQUNuQyxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN2QixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQ3BCLFVBQVUsQ0FDWCxDQUFBO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHdDQUFrQixDQUNuQyxPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN2QixFQUFFLEdBQUcsRUFBRSxFQUNQLFVBQVUsQ0FDWCxDQUFBO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ3RDLGlCQUFpQixRQUFRLEtBQUssUUFBRyxFQUFFO1lBQ25DLG9CQUFvQixRQUFHLEVBQUU7WUFDekIsd0JBQXdCLFFBQUcsRUFBRTtZQUM3Qiw4Q0FBOEMsUUFBRyxFQUFFLENBQ3BELENBQUE7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVM7UUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUE7SUFDMUIsQ0FBQztJQUVNLE1BQU07UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFXLEVBQUUsUUFBd0I7UUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsbUNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUF3QjtRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVM7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3hGLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDcEMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUE7WUFDMUIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFlLEVBQUUsUUFBd0I7UUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUN6QixLQUFLLFFBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQUcsQ0FBQyxHQUFHLFFBQUcsS0FBSyxRQUFHLEVBQUUsRUFDMUMsUUFBUSxDQUNULENBQUE7SUFDSCxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVc7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxRQUF3QjtRQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLFFBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BFLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBRU8sT0FBTyxDQUFDLElBQVk7UUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEIsQ0FBQztDQUNGO0FBMUZELG9CQTBGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhzRXNjYXBlU3RyaW5nIH0gZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQgeyBJbnRlcmFjdGl2ZVByb2Nlc3MsIElSZXF1ZXN0UmVzdWx0LCBUTGluZUNhbGxiYWNrIH0gZnJvbSAnLi9pbnRlcmFjdGl2ZS1wcm9jZXNzJ1xuXG5leHBvcnQgeyBUTGluZUNhbGxiYWNrLCBJUmVxdWVzdFJlc3VsdCB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdHMge1xuICBjd2Q6IHN0cmluZ1xuICBhdG9tUGF0aDogc3RyaW5nXG4gIGNvbW1hbmQ6IHN0cmluZ1xuICBhcmdzOiBzdHJpbmdbXVxuICBvbkV4aXQ6IChjb2RlOiBudW1iZXIpID0+IHZvaWRcbn1cblxuZXhwb3J0IGNsYXNzIEdIQ0kge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5pbml0aWFsaXplZFxuICBwcml2YXRlIHByb2Nlc3M6IEludGVyYWN0aXZlUHJvY2Vzc1xuICBwcml2YXRlIHJlYWR5UHJvbWlzZTogUHJvbWlzZTxJUmVxdWVzdFJlc3VsdD5cbiAgcHJpdmF0ZSBvbkRpZEV4aXQ6IChjb2RlOiBudW1iZXIpID0+IHZvaWRcbiAgY29uc3RydWN0b3Iob3B0czogSU9wdHMpIHtcbiAgICBjb25zdCBlbmRQYXR0ZXJuID0gL14jfklERUhBU0tFTExSRVBMfiguKil+IyQvXG4gICAgY29uc3QgeyBjd2QsIGF0b21QYXRoLCBjb21tYW5kLCBhcmdzLCBvbkV4aXQgfSA9IG9wdHNcbiAgICB0aGlzLm9uRGlkRXhpdCA9IG9uRXhpdFxuXG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAgIGNvbnN0IHNwYXduQXJncyA9IFtjb21tYW5kLCAuLi5hcmdzXVxuICAgICAgY29uc3QgY21kZXhlID0gYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1yZXBsLmdoY2lXcmFwcGVyUGF0aCcpXG4gICAgICBpZiAoY21kZXhlKSB7XG4gICAgICAgIHNwYXduQXJncy51bnNoaWZ0KCdcXFwiJyArIGNtZGV4ZSArICdcXFwiJylcbiAgICAgIH1cbiAgICAgIHRoaXMucHJvY2VzcyA9IG5ldyBJbnRlcmFjdGl2ZVByb2Nlc3MoXG4gICAgICAgICdjaGNwIDY1MDAxICYmICcsXG4gICAgICAgIHNwYXduQXJncyxcbiAgICAgICAgdGhpcy5kaWRFeGl0LmJpbmQodGhpcyksXG4gICAgICAgIHsgY3dkLCBzaGVsbDogdHJ1ZSB9LFxuICAgICAgICBlbmRQYXR0ZXJuLFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb2Nlc3MgPSBuZXcgSW50ZXJhY3RpdmVQcm9jZXNzKFxuICAgICAgICBjb21tYW5kLFxuICAgICAgICBhcmdzLFxuICAgICAgICB0aGlzLmRpZEV4aXQuYmluZCh0aGlzKSxcbiAgICAgICAgeyBjd2QgfSxcbiAgICAgICAgZW5kUGF0dGVybixcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5UHJvbWlzZSA9IHRoaXMucHJvY2Vzcy5yZXF1ZXN0KFxuICAgICAgYDpzZXQgZWRpdG9yIFxcXCIke2F0b21QYXRofVxcXCIke0VPTH1gICtcbiAgICAgIGA6c2V0IHByb21wdDIgXFxcIlxcXCIke0VPTH1gICtcbiAgICAgIGA6c2V0IHByb21wdC1jb250IFxcXCJcXFwiJHtFT0x9YCArXG4gICAgICBgOnNldCBwcm9tcHQgXFxcIlxcXFxuI35JREVIQVNLRUxMUkVQTH4lc34jXFxcXG5cXFwiJHtFT0x9YCxcbiAgICApXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgd2FpdFJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5UHJvbWlzZVxuICB9XG5cbiAgcHVibGljIGlzQnVzeSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzLmlzQnVzeSgpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9hZCh1cmk6IHN0cmluZywgY2FsbGJhY2s/OiBUTGluZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzcy5yZXF1ZXN0KGA6bG9hZCAke2hzRXNjYXBlU3RyaW5nKHVyaSl9JHtFT0x9YCwgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVsb2FkKGNhbGxiYWNrPzogVExpbmVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3MucmVxdWVzdChgOnJlbG9hZCR7RU9MfWAsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGludGVycnVwdCgpIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1yZXBsLmdoY2lXcmFwcGVyUGF0aCcpICYmIHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzLnJlcXVlc3QoJ1xceDAzJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvY2Vzcy5pbnRlcnJ1cHQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB3cml0ZUxpbmVzKGxpbmVzOiBzdHJpbmdbXSwgY2FsbGJhY2s/OiBUTGluZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzcy5yZXF1ZXN0KFxuICAgICAgYDp7JHtFT0x9JHtsaW5lcy5qb2luKEVPTCl9JHtFT0x9On0ke0VPTH1gLFxuICAgICAgY2FsbGJhY2ssXG4gICAgKVxuICB9XG5cbiAgcHVibGljIHdyaXRlUmF3KHJhdzogc3RyaW5nKSB7XG4gICAgdGhpcy5wcm9jZXNzLndyaXRlU3RkaW4ocmF3KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNlbmRDb21wbGV0aW9uUmVxdWVzdChjYWxsYmFjaz86IFRMaW5lQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzLnJlcXVlc3QoYDpjb21wbGV0ZSByZXBsIFxcXCJcXFwiJHtFT0x9YCwgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLnByb2Nlc3MuZGVzdHJveSgpXG4gIH1cblxuICBwcml2YXRlIGRpZEV4aXQoY29kZTogbnVtYmVyKSB7XG4gICAgdGhpcy5vbkRpZEV4aXQoY29kZSlcbiAgICB0aGlzLmRlc3Ryb3koKVxuICB9XG59XG4iXX0=